// (c) 2019-2020 FMS_Cat - https://github.com/FMS-Cat/experimental-npm/blob/master/LICENSE
function t(e,s){if("function"!=typeof s)return t(e,t=>t<=s);const i=s;let n=0,r=e.length;for(;n<r;){const t=n+r>>1;i(e[t])?n=t+1:r=t}return n}const e=[-1,-1,1,-1,-1,1,1,1],s=[-1,-1,0,1,-1,0,-1,1,0,1,1,0],i=[0,0,1,0,0,1,0,0,1,0,0,1],n=[0,0,1,0,0,1,1,1];function r(t,e){const s=e||(()=>Math.random());for(let e=0;e<t.length-1;e++){const i=e+Math.floor(s()*(t.length-e)),n=t[i];t[i]=t[e],t[e]=n}return t}function h(t){const e=[];for(let s=0;s<t.length/3;s++){const i=3*s;e.push(t[i],t[i+1],t[i+1],t[i+2],t[i+2],t[i])}return e}function c(t,e){const s=[];for(let i=0;i<e;i++)for(let e=0;e<t;e++)s.push(e,i);return s}class _{constructor(){this.factor=100,this.ratio=1,this.velocity=0,this.value=0,this.target=0}update(t){return this.velocity+=(-this.factor*(this.value-this.target)-2*this.velocity*Math.sqrt(this.factor)*this.ratio)*t,this.value+=this.velocity*t,this.value}}class o{constructor(){this.__time=0,this.__deltaTime=0,this.__isPlaying=!1}get time(){return this.__time}get deltaTime(){return this.__deltaTime}get isPlaying(){return this.__isPlaying}update(t){const e=this.__time;this.__time=t||0,this.__deltaTime=this.__time-e}play(){this.__isPlaying=!0}pause(){this.__isPlaying=!1}setTime(t){this.__time=t}}class a extends o{constructor(t=60){super(),this.__frame=0,this.__fps=t}get frame(){return this.__frame}get fps(){return this.__fps}update(){this.__isPlaying?(this.__time=this.__frame/this.__fps,this.__deltaTime=1/this.__fps,this.__frame++):this.__deltaTime=0}setTime(t){this.__frame=Math.floor(this.__fps*t),this.__time=this.__frame/this.__fps}}class l extends o{constructor(){super(...arguments),this.__rtTime=0,this.__rtDate=performance.now()}get isRealtime(){return!0}update(){const t=performance.now();if(this.__isPlaying){const e=this.__time,s=t-this.__rtDate;this.__time=this.__rtTime+s/1e3,this.__deltaTime=this.time-e}else this.__rtTime=this.time,this.__rtDate=t,this.__deltaTime=0}setTime(t){this.__time=t,this.__rtTime=this.time,this.__rtDate=performance.now()}}function u(t,e,s,i){let n=0;const r=new Float32Array(i);r[0]=0;const h=new Float32Array(i+1);h[0]=-1/0,h[1]=1/0;const c=new Float32Array(i);for(let n=0;n<i;n++)c[n]=t[e+n*s];for(let t=1;t<i;t++){let e=0;for(;0<=n&&(e=(c[t]+t*t-c[r[n]]-r[n]*r[n])/(2*t-2*r[n]),e<=h[n]);)n--;n++,r[n]=t,h[n]=e,h[n+1]=1/0}n=0;for(let _=0;_<i;_++){for(;h[n+1]<_;)n++;const i=_-r[n];t[e+_*s]=c[r[n]]+i*i}}function m(t,e,s){for(let i=0;i<e;i++)u(t,i,e,s);for(let i=0;i<s;i++)u(t,i*e,1,e)}function d(t,e,s){return t+(e-t)*s}function y(t,e,s){return Math.min(Math.max(t,e),s)}function x(t){return y(t,0,1)}function w(t,e,s,i,n){return(t-e)*(n-i)/(s-e)+i}function p(t,e,s){return x((s-t)/(e-t))}function f(t,e,s){const i=p(t,e,s);return i*i*(3-2*i)}function g(t,e,s){const i=p(t,e,s);return i*i*i*(i*(6*i-15)+10)}function z(t,e,s){const i=p(t,e,s);return i*i*i*i*(i*(i*(-20*i+70)-84)+35)}class M{constructor(){this.factor=10,this.target=0,this.value=0}update(t){return this.value=d(this.target,this.value,Math.exp(-this.factor*t)),this.value}}class ${constructor(t=$.WordsDefault,e=1,s=100){this.__words=t,this.__index=e,this.__end=s}[Symbol.iterator](){return this}next(){if(this.__end<this.__index)return{done:!0,value:null};let t="";for(const[e,s]of this.__words)this.__index%e==0&&(t+=s);return""===t&&(t=this.__index),this.__index++,{done:!1,value:t}}}$.WordsDefault=new Map([[3,"Fizz"],[5,"Buzz"]]);class F{}F.gif="https://fms-cat.com/images/fms_cat.gif",F.png="https://fms-cat.com/images/fms_cat.png";class T{constructor(t){this.__recalcForEach=0,this.__countUntilRecalc=0,this.__history=[],this.__index=0,this.__count=0,this.__cache=0,this.__length=t,this.__recalcForEach=t;for(let e=0;e<t;e++)this.__history[e]=0}get mean(){const t=Math.min(this.__count,this.__length);return 0===t?0:this.__cache/t}get recalcForEach(){return this.__recalcForEach}set recalcForEach(t){const e=t-this.__recalcForEach;this.__recalcForEach=t,this.__countUntilRecalc=Math.max(0,this.__countUntilRecalc+e)}reset(){this.__index=0,this.__count=0,this.__cache=0,this.__countUntilRecalc=0;for(let t=0;t<this.__length;t++)this.__history[t]=0}push(t){const e=this.__history[this.__index];this.__history[this.__index]=t,this.__count++,this.__index=(this.__index+1)%this.__length,0===this.__countUntilRecalc?this.recalc():(this.__countUntilRecalc--,this.__cache-=e,this.__cache+=t)}recalc(){this.__countUntilRecalc=this.__recalcForEach;const t=this.__history.slice(0,Math.min(this.__count,this.__length)).reduce((t,e)=>t+e,0);this.__cache=t}}class v{constructor(t){this.__history=[],this.__sorted=[],this.__index=0,this.__length=t}get median(){return this.percentile(50)}percentile(t){return 0===this.__history.length?0:this.__sorted[Math.round(.01*t*(this.__history.length-1))]}reset(){this.__index=0,this.__history=[],this.__sorted=[]}push(e){const s=this.__history[this.__index];if(this.__history[this.__index]=e,this.__index=(this.__index+1)%this.__length,this.__sorted.length===this.__length){const e=t(this.__sorted,s);this.__sorted.splice(e,1)}const i=t(this.__sorted,e);this.__sorted.splice(i,0,e)}}class b extends v{constructor(t){super(t),console.warn("HistoryMedianCalculator: Deprecated. Use HistoryPercentileCalculator instead")}}class D{get length(){return Math.sqrt(this.elements.reduce((t,e)=>t+e*e,0))}get normalized(){return this.scale(1/this.length)}clone(){return this.__new(this.elements.concat())}add(t){return this.__new(this.elements.map((e,s)=>e+t.elements[s]))}sub(t){return this.__new(this.elements.map((e,s)=>e-t.elements[s]))}multiply(t){return this.__new(this.elements.map((e,s)=>e*t.elements[s]))}divide(t){return this.__new(this.elements.map((e,s)=>e/t.elements[s]))}scale(t){return this.__new(this.elements.map(e=>e*t))}dot(t){return this.elements.reduce((e,s,i)=>e+s*t.elements[i],0)}}class P extends D{constructor(t=[0,0,0]){super(),this.elements=t}get x(){return this.elements[0]}set x(t){this.elements[0]=t}get y(){return this.elements[1]}set y(t){this.elements[1]=t}get z(){return this.elements[2]}set z(t){this.elements[2]=t}toString(){return`Vector3( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)} )`}cross(t){return new P([this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x])}applyQuaternion(t){const e=new R([this.x,this.y,this.z,0]),s=t.inversed,i=t.multiply(e).multiply(s);return new P([i.x,i.y,i.z])}applyMatrix4(t){const e=t.elements,s=1/(e[3]*this.x+e[7]*this.y+e[11]*this.z+e[15]);return new P([(e[0]*this.x+e[4]*this.y+e[8]*this.z+e[12])*s,(e[1]*this.x+e[5]*this.y+e[9]*this.z+e[13])*s,(e[2]*this.x+e[6]*this.y+e[10]*this.z+e[14])*s])}__new(t){return new P(t)}static get zero(){return new P([0,0,0])}static get one(){return new P([1,1,1])}}const E=[0,0,0,1];class R{constructor(t=E){this.elements=t}get x(){return this.elements[0]}get y(){return this.elements[1]}get z(){return this.elements[2]}get w(){return this.elements[3]}toString(){return`Quaternion( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)}, ${this.w.toFixed(3)} )`}clone(){return new R(this.elements.concat())}get matrix(){const t=new P([1,0,0]).applyQuaternion(this),e=new P([0,1,0]).applyQuaternion(this),s=new P([0,0,1]).applyQuaternion(this);return new A([t.x,e.x,s.x,0,t.y,e.y,s.y,0,t.z,e.z,s.z,0,0,0,0,1])}get inversed(){return new R([-this.x,-this.y,-this.z,this.w])}multiply(t){return new R([this.w*t.x+this.x*t.w+this.y*t.z-this.z*t.y,this.w*t.y-this.x*t.z+this.y*t.w+this.z*t.x,this.w*t.z+this.x*t.y-this.y*t.x+this.z*t.w,this.w*t.w-this.x*t.x-this.y*t.y-this.z*t.z])}static get identity(){return new R(E)}static fromAxisAngle(t,e){const s=e/2,i=Math.sin(s);return new R([t.x*i,t.y*i,t.z*i,Math.cos(s)])}static fromMatrix(t){const e=t.elements,s=e[0],i=e[4],n=e[8],r=e[1],h=e[5],c=e[9],_=e[2],o=e[6],a=e[10],l=s+h+a;if(l>0){const t=.5/Math.sqrt(l+1);return new R([(o-c)*t,(n-_)*t,(r-i)*t,.25/t])}if(s>h&&s>a){const t=2*Math.sqrt(1+s-h-a);return new R([.25*t,(i+r)/t,(n+_)/t,(o-c)/t])}if(h>a){const t=2*Math.sqrt(1+h-s-a);return new R([(i+r)/t,.25*t,(c+o)/t,(n-_)/t])}{const t=2*Math.sqrt(1+a-s-h);return new R([(n+_)/t,(c+o)/t,.25*t,(r-i)/t])}}}const U=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];class A{constructor(t=U){this.elements=t}get transpose(){const t=this.elements;return new A([t[0],t[4],t[8],t[12],t[1],t[5],t[9],t[13],t[2],t[6],t[10],t[14],t[3],t[7],t[11],t[15]])}get determinant(){const t=this.elements,e=t[0],s=t[1],i=t[2],n=t[3],r=t[4],h=t[5],c=t[6],_=t[7],o=t[8],a=t[9],l=t[10],u=t[11],m=t[12],d=t[13],y=t[14],x=t[15];return(e*h-s*r)*(l*x-u*y)-(e*c-i*r)*(a*x-u*d)+(e*_-n*r)*(a*y-l*d)+(s*c-i*h)*(o*x-u*m)-(s*_-n*h)*(o*y-l*m)+(i*_-n*c)*(o*d-a*m)}get inverse(){const t=this.elements,e=t[0],s=t[1],i=t[2],n=t[3],r=t[4],h=t[5],c=t[6],_=t[7],o=t[8],a=t[9],l=t[10],u=t[11],m=t[12],d=t[13],y=t[14],x=t[15],w=e*h-s*r,p=e*c-i*r,f=e*_-n*r,g=s*c-i*h,z=s*_-n*h,M=i*_-n*c,$=o*d-a*m,F=o*y-l*m,T=o*x-u*m,v=a*y-l*d,b=a*x-u*d,D=l*x-u*y,P=w*D-p*b+f*v+g*T-z*F+M*$;if(0===P)return null;const E=1/P;return new A([h*D-c*b+_*v,i*b-s*D-n*v,d*M-y*z+x*g,l*z-a*M-u*g,c*T-r*D-_*F,e*D-i*T+n*F,y*f-m*M-x*p,o*M-l*f+u*p,r*b-h*T+_*$,s*T-e*b-n*$,m*z-d*f+x*w,a*f-o*z-u*w,h*F-r*v-c*$,e*v-s*F+i*$,d*p-m*g-y*w,o*g-a*p+l*w].map(t=>t*E))}toString(){const t=this.elements.map(t=>t.toFixed(3));return`Matrix4( ${t[0]}, ${t[4]}, ${t[8]}, ${t[12]}; ${t[1]}, ${t[5]}, ${t[9]}, ${t[13]}; ${t[2]}, ${t[6]}, ${t[10]}, ${t[14]}; ${t[3]}, ${t[7]}, ${t[11]}, ${t[15]} )`}clone(){return new A(this.elements.concat())}multiply(...t){if(0===t.length)return this.clone();const e=t.concat();let s=e.shift();0<e.length&&(s=s.multiply(...e));const i=this.elements,n=s.elements;return new A([i[0]*n[0]+i[4]*n[1]+i[8]*n[2]+i[12]*n[3],i[1]*n[0]+i[5]*n[1]+i[9]*n[2]+i[13]*n[3],i[2]*n[0]+i[6]*n[1]+i[10]*n[2]+i[14]*n[3],i[3]*n[0]+i[7]*n[1]+i[11]*n[2]+i[15]*n[3],i[0]*n[4]+i[4]*n[5]+i[8]*n[6]+i[12]*n[7],i[1]*n[4]+i[5]*n[5]+i[9]*n[6]+i[13]*n[7],i[2]*n[4]+i[6]*n[5]+i[10]*n[6]+i[14]*n[7],i[3]*n[4]+i[7]*n[5]+i[11]*n[6]+i[15]*n[7],i[0]*n[8]+i[4]*n[9]+i[8]*n[10]+i[12]*n[11],i[1]*n[8]+i[5]*n[9]+i[9]*n[10]+i[13]*n[11],i[2]*n[8]+i[6]*n[9]+i[10]*n[10]+i[14]*n[11],i[3]*n[8]+i[7]*n[9]+i[11]*n[10]+i[15]*n[11],i[0]*n[12]+i[4]*n[13]+i[8]*n[14]+i[12]*n[15],i[1]*n[12]+i[5]*n[13]+i[9]*n[14]+i[13]*n[15],i[2]*n[12]+i[6]*n[13]+i[10]*n[14]+i[14]*n[15],i[3]*n[12]+i[7]*n[13]+i[11]*n[14]+i[15]*n[15]])}scaleScalar(t){return new A(this.elements.map(e=>e*t))}static get identity(){return new A(U)}static multiply(...t){if(0===t.length)return A.identity;{const e=t.concat();return e.shift().multiply(...e)}}static translate(t){return new A([1,0,0,0,0,1,0,0,0,0,1,0,t.x,t.y,t.z,1])}static scale(t){return new A([t.x,0,0,0,0,t.y,0,0,0,0,t.z,0,0,0,0,1])}static scaleScalar(t){return new A([t,0,0,0,0,t,0,0,0,0,t,0,0,0,0,1])}static rotateX(t){return new A([1,0,0,0,0,Math.cos(t),-Math.sin(t),0,0,Math.sin(t),Math.cos(t),0,0,0,0,1])}static rotateY(t){return new A([Math.cos(t),0,Math.sin(t),0,0,1,0,0,-Math.sin(t),0,Math.cos(t),0,0,0,0,1])}static rotateZ(t){return new A([Math.cos(t),-Math.sin(t),0,0,Math.sin(t),Math.cos(t),0,0,0,0,1,0,0,0,0,1])}static lookAt(t,e=new P([0,0,0]),s=new P([0,1,0]),i=0){const n=t.sub(e).normalized;let r=s.cross(n).normalized,h=n.cross(r);return r=r.scale(Math.cos(i)).add(h.scale(Math.sin(i))),h=n.cross(r),new A([r.x,r.y,r.z,0,h.x,h.y,h.z,0,n.x,n.y,n.z,0,t.x,t.y,t.z,1])}static lookAtInverse(t,e=new P([0,0,0]),s=new P([0,1,0]),i=0){const n=t.sub(e).normalized;let r=s.cross(n).normalized,h=n.cross(r);return r=r.scale(Math.cos(i)).add(h.scale(Math.sin(i))),h=n.cross(r),new A([r.x,h.x,n.x,0,r.y,h.y,n.y,0,r.z,h.z,n.z,0,-r.x*t.x-r.y*t.y-r.z*t.z,-h.x*t.x-h.y*t.y-h.z*t.z,-n.x*t.x-n.y*t.y-n.z*t.z,1])}static perspective(t=45,e=.01,s=100){const i=1/Math.tan(t*Math.PI/360),n=s-e;return new A([i,0,0,0,0,i,0,0,0,0,-(s+e)/n,-1,0,0,-2*s*e/n,0])}decompose(){const t=this.elements;let e=new P([t[0],t[1],t[2]]).length;const s=new P([t[4],t[5],t[6]]).length,i=new P([t[8],t[9],t[10]]).length;this.determinant<0&&(e=-e);const n=1/e,r=1/s,h=1/i,c=this.clone();return c.elements[0]*=n,c.elements[1]*=n,c.elements[2]*=n,c.elements[4]*=r,c.elements[5]*=r,c.elements[6]*=r,c.elements[8]*=h,c.elements[9]*=h,c.elements[10]*=h,{position:new P([t[12],t[13],t[14]]),scale:new P([e,s,i]),rotation:R.fromMatrix(c)}}static compose(t,e,s){const i=e.x,n=e.y,r=e.z,h=e.w,c=i+i,_=n+n,o=r+r,a=i*c,l=i*_,u=i*o,m=n*_,d=n*o,y=r*o,x=h*c,w=h*_,p=h*o,f=s.x,g=s.y,z=s.z;return new A([(1-(m+y))*f,(l+p)*f,(u-w)*f,0,(l-p)*g,(1-(a+y))*g,(d+x)*g,0,(u+w)*z,(d-x)*z,(1-(a+m))*z,0,t.x,t.y,t.z,1])}}class S extends D{constructor(t=[0,0,0,0]){super(),this.elements=t}get x(){return this.elements[0]}set x(t){this.elements[0]=t}get y(){return this.elements[1]}set y(t){this.elements[1]=t}get z(){return this.elements[2]}set z(t){this.elements[2]=t}get w(){return this.elements[3]}set w(t){this.elements[3]=t}toString(){return`Vector4( ${this.x.toFixed(3)}, ${this.y.toFixed(3)}, ${this.z.toFixed(3)}, ${this.w.toFixed(3)} )`}applyMatrix4(t){const e=t.elements;return new S([e[0]*this.x+e[4]*this.y+e[8]*this.z+e[12]*this.w,e[1]*this.x+e[5]*this.y+e[9]*this.z+e[13]*this.w,e[2]*this.x+e[6]*this.y+e[10]*this.z+e[14]*this.w,e[3]*this.x+e[7]*this.y+e[11]*this.z+e[15]*this.w])}__new(t){return new S(t)}static get zero(){return new S([0,0,0,0])}static get one(){return new S([1,1,1,1])}}class q{constructor(t,e){this.i=t,this.o=e}swap(){const t=this.i;this.i=this.o,this.o=t}}class B{constructor(){this.__bpm=0,this.__lastTap=0,this.__lastBeat=0,this.__lastTime=0,this.__calc=new T(16)}get beatDuration(){return 60/this.__bpm}get bpm(){return this.__bpm}set bpm(t){this.__lastBeat=this.beat,this.__lastTime=performance.now(),this.__bpm=t}get beat(){return this.__lastBeat+.001*(performance.now()-this.__lastTime)/this.beatDuration}reset(){this.__calc.reset()}nudge(t){this.__lastBeat=this.beat+t,this.__lastTime=performance.now()}tap(){const t=performance.now(),e=.001*(t-this.__lastTap);2<e?this.reset():(this.__calc.push(e),this.__bpm=60/this.__calc.mean),this.__lastTap=t,this.__lastTime=t,this.__lastBeat=0}}class Q{constructor(t){this.seed=t||1}gen(t){return t&&(this.seed=t),this.seed=this.seed^this.seed<<13,this.seed=this.seed^this.seed>>>17,this.seed=this.seed^this.seed<<5,this.seed/Math.pow(2,32)+.5}set(t){this.seed=t||this.seed||1}}export{_ as CDS,o as Clock,a as ClockFrame,l as ClockRealtime,M as ExpSmooth,F as FMS_Cat,$ as FizzBuzz,T as HistoryMeanCalculator,b as HistoryMedianCalculator,v as HistoryPercentileCalculator,A as Matrix4,R as Quaternion,q as Swap,e as TRIANGLE_STRIP_QUAD,s as TRIANGLE_STRIP_QUAD_3D,i as TRIANGLE_STRIP_QUAD_NORMAL,n as TRIANGLE_STRIP_QUAD_UV,B as TapTempo,D as Vector,P as Vector3,S as Vector4,Q as Xorshift,t as binarySearch,y as clamp,u as edt1d,m as edt2d,d as lerp,p as linearstep,c as matrix2d,w as range,U as rawIdentityMatrix4,E as rawIdentityQuaternion,x as saturate,r as shuffleArray,g as smootherstep,z as smootheststep,f as smoothstep,h as triIndexToLineIndex};
