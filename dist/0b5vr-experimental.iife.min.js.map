{
  "version": 3,
  "sources": ["../src/index.ts", "../src/algorithm/binarySearch.ts", "../src/algorithm/traverse.ts", "../src/array/arrayRange.ts", "../src/array/arraySerial.ts", "../src/array/arraySet.ts", "../src/array/constants.ts", "../src/array/utils.ts", "../src/CDS/CDS.ts", "../src/Clock/Clock.ts", "../src/Clock/ClockFrame.ts", "../src/Clock/ClockRealtime.ts", "../src/color/colorFromAtariST.ts", "../src/math/utils.ts", "../src/color/colorHSV2RGB.ts", "../src/color/colorToHex.ts", "../src/math/vec/vecDot.ts", "../src/color/colorTurbo.ts", "../src/color/eotfRec709.ts", "../src/color/oetfRec709.ts", "../src/dag/dagEdgesParents.ts", "../src/dag/dagEdgesAncestors.ts", "../src/dag/dagEdgesChildren.ts", "../src/dag/dagEdgesDescendants.ts", "../src/dag/dagEdgesParent.ts", "../src/dag/dagEdgesResolve.ts", "../src/edt/edt.ts", "../src/ExpSmooth/ExpSmooth.ts", "../src/Pool/Pool.ts", "../src/GPUTimer/GPUTimer.ts", "../src/HistoryMeanCalculator/HistoryMeanCalculator.ts", "../src/HistoryMeanCalculator/HistoryPercentileCalculator.ts", "../src/HistoryMeanCalculator/HistoryMedianCalculator.ts", "../src/MapOfSet/MapOfSet.ts", "../src/math/vec/vecAbs.ts", "../src/math/vec/vecAdd.ts", "../src/math/vec/vecDivide.ts", "../src/math/vec/vecLength.ts", "../src/math/vec/vecLengthSq.ts", "../src/math/vec/vecManhattanLength.ts", "../src/math/vec/vecMultiply.ts", "../src/math/vec/vecNeg.ts", "../src/math/vec/vecScale.ts", "../src/math/vec/vecNormalize.ts", "../src/math/vec/vecSub.ts", "../src/math/vec/Vector.ts", "../src/math/vec4/vec4ApplyMatrix4.ts", "../src/math/vec3/vec3ApplyMatrix4.ts", "../src/math/quat/quatInverse.ts", "../src/math/quat/quatMultiply.ts", "../src/math/vec3/vec3ApplyQuaternion.ts", "../src/math/vec3/vec3Cross.ts", "../src/math/vec3/vec3OrthoNormalize.ts", "../src/math/vec3/Vector3.ts", "../src/math/box3/box3ContainsPoint.ts", "../src/math/box3/Box3.ts", "../src/math/mat3/mat3FromMat4Transpose.ts", "../src/math/mat3/mat3Inverse.ts", "../src/math/mat3/mat3CreateNormalMatrix.ts", "../src/math/mat3/mat3Determinant.ts", "../src/math/mat3/mat3FromMat4.ts", "../src/math/mat3/mat3FromQuaternion.ts", "../src/math/mat3/mat3Multiply.ts", "../src/math/mat3/mat3Transpose.ts", "../src/math/mat3/Matrix3.ts", "../src/math/mat4/mat4FromQuaternion.ts", "../src/math/mat4/mat4Compose.ts", "../src/math/mat4/mat4Determinant.ts", "../src/math/quat/quatFromMatrix3.ts", "../src/math/quat/quatFromMatrix4.ts", "../src/math/mat4/mat4Decompose.ts", "../src/math/mat4/mat4FromMat3.ts", "../src/math/mat4/mat4Inverse.ts", "../src/math/mat4/mat4LookAt.ts", "../src/math/mat4/mat4LookAtInverse.ts", "../src/math/mat4/mat4Multiply.ts", "../src/math/mat4/mat4Perspective.ts", "../src/math/mat4/mat4RotationX.ts", "../src/math/mat4/mat4RotationY.ts", "../src/math/mat4/mat4RotationZ.ts", "../src/math/mat4/mat4Scale.ts", "../src/math/mat4/mat4ScaleScalar.ts", "../src/math/mat4/mat4Translate.ts", "../src/math/mat4/mat4Transpose.ts", "../src/math/mat4/Matrix4.ts", "../src/math/quat/quatFromAxisAngle.ts", "../src/math/quat/quatLookRotation.ts", "../src/math/quat/quatNormalize.ts", "../src/math/quat/quatRotationX.ts", "../src/math/quat/quatRotationY.ts", "../src/math/quat/quatRotationZ.ts", "../src/math/quat/quatSlerp.ts", "../src/math/quat/Quaternion.ts", "../src/math/mod.ts", "../src/math/sanitizeAngle.ts", "../src/math/euler/eulerFromMat3.ts", "../src/math/euler/eulerFromMat4.ts", "../src/math/euler/eulerFromQuaternion.ts", "../src/math/quat/quatFromEuler.ts", "../src/math/euler/Euler.ts", "../src/math/ray3/ray3DistanceToSphere.ts", "../src/math/line3/line3Delta.ts", "../src/math/ray3/ray3FromLine3.ts", "../src/math/ray3/Ray3.ts", "../src/math/line3/line3ApplyMatrix4.ts", "../src/math/line3/line3At.ts", "../src/math/line3/line3ClosestPointToPoint.ts", "../src/math/line3/line3DistanceToPoint.ts", "../src/math/line3/Line3.ts", "../src/math/mat2/mat2Determinant.ts", "../src/math/mat2/mat2Inverse.ts", "../src/math/mat2/mat2Multiply.ts", "../src/math/mat2/mat2Transpose.ts", "../src/math/mat2/Matrix2.ts", "../src/math/vec3/vec3ApplyMatrix3.ts", "../src/math/plane3/plane3ApplyMatrix4.ts", "../src/math/plane3/plane3DistanceToPoint.ts", "../src/math/plane3/plane3Normalize.ts", "../src/math/plane3/Plane3.ts", "../src/math/plane3/planes3ContainPoint.ts", "../src/math/plane3/planes3FromBox3.ts", "../src/math/plane3/planes3FromProjectionMatrix.ts", "../src/math/plane3/planes3IntersectBox3.ts", "../src/math/plane3/planes3IntersectSphere3.ts", "../src/math/plane3/Planes3.ts", "../src/math/sphere3/sphere3ContainsPoint.ts", "../src/math/sphere3/Sphere3.ts", "../src/math/vec4/vec4ApplyMatrix3.ts", "../src/math/vec4/Vector4.ts", "../src/midi/midiParse.ts", "../src/poker/pokerRanksByStrength.ts", "../src/poker/pokerSuitsByIndex.ts", "../src/poker/createPokerDeck.ts", "../src/poker/pokerHandStrengthMap.ts", "../src/poker/pokerRankStrengthMap.ts", "../src/poker/pokerSuitIndexMap.ts", "../src/poker/sortPokerCardsByRank.ts", "../src/poker/evaluatePokerHand.ts", "../src/poker/pokerHandsByStrength.ts", "../src/retry/asyncRetry.ts", "../src/retry/retry.ts", "../src/stniccc/parseSTNICCC.ts", "../src/stniccc/stnicccToSVG.ts", "../src/SmoothDamp/SmoothDamp.ts", "../src/Swap/Swap.ts", "../src/TapTempo/TapTempo.ts", "../src/tinyseq/createTinyseqPolyReader.ts", "../src/tinyseq/createTinyseqReader.ts", "../src/tinyseq/tinyseqFromMidiParseResult.ts", "../src/Xorshift/Xorshift.ts", "../src/yugop/getYugopText.ts"],
  "sourcesContent": ["export * from './algorithm';\nexport * from './array';\nexport * from './CDS';\nexport * from './Clock';\nexport * from './color';\nexport * from './dag';\nexport * from './edt';\nexport * from './ExpSmooth';\n\n// This is somehow very not treeshaking friendly so removing\n// export * from './FizzBuzz';\n\nexport * from './GPUTimer';\nexport * from './HistoryMeanCalculator';\nexport * from './MapOfSet';\nexport * from './math';\nexport * from './midi';\nexport * from './poker';\nexport * from './Pool';\nexport * from './retry';\nexport * from './stniccc';\nexport * from './SmoothDamp';\nexport * from './Swap';\nexport * from './TapTempo';\nexport * from './tinyseq';\nexport * from './Xorshift';\nexport * from './yugop';\n", "// yoinked from https://stackoverflow.com/questions/1344500/efficient-way-to-insert-a-number-into-a-sorted-array-of-numbers\n\n/**\n * Look for an index from a sorted list using binary search.\n *\n * If you don't provide a compare function, it will look for **the first same value** it can find.\n * If it cannot find an exactly matching value, it can return N where the length of given array is N.\n *\n * @param array A sorted array\n * @param compare Make this function return `false` if you want to point right side of given element, `true` if you want to point left side of given element.\n * @returns An index found\n */\nexport function binarySearch<T>( array: ArrayLike<T>, element: T ): number;\nexport function binarySearch<T>( array: ArrayLike<T>, compare: ( element: T ) => boolean ): number;\nexport function binarySearch<T>(\n  array: ArrayLike<T>,\n  elementOrCompare: T | ( ( element: T ) => boolean ),\n): number {\n  if ( typeof elementOrCompare !== 'function' ) {\n    return binarySearch( array, ( element ) => ( element < elementOrCompare ) );\n  }\n  const compare = elementOrCompare as ( element: T ) => boolean;\n\n  let start = 0;\n  let end = array.length;\n\n  while ( start < end ) {\n    const center = ( start + end ) >> 1;\n    const centerElement = array[ center ];\n\n    const compareResult = compare( centerElement );\n\n    if ( compareResult ) {\n      start = center + 1;\n    } else {\n      end = center;\n    }\n  }\n\n  return start;\n}\n", "/**\n * Generic traverse function.\n *\n * It performs Depth-First Search.\n *\n * The `traverser` function will be executed for each descendants.\n * You need to return their \"children\" in an array.\n * If you want to stop the traversal, return `false` instead.\n *\n * @example\n * ```js\n * // replicate Three.js traverse for no reason\n * const meshes = [];\n * traverse( object3DRoot, ( object ) => {\n *   if ( object.isMesh ) {\n *     meshes.push( object );\n *   }\n *   return object3DRoot.children;\n * } );\n * ```\n *\n * @param root The \"root\" node\n * @param traverser The traverse function. If the node has \"children\" return them in an array.\n */\nexport function traverse<TNode>(\n  root: TNode,\n  traverser: ( node: TNode ) => TNode[] | false,\n): void {\n  const nodesNeedProcess: TNode[] = [ root ];\n  const nodesSeen = new Set<TNode>( nodesNeedProcess );\n\n  while ( nodesNeedProcess.length > 0 ) {\n    const currentNode = nodesNeedProcess.shift()!;\n\n    const children = traverser( currentNode );\n\n    if ( !children ) {\n      break;\n    }\n\n    const nodesFound = children.filter( ( node ) => !nodesSeen.has( node ) );\n    nodesNeedProcess.unshift( ...nodesFound );\n    nodesFound.map( ( node ) => nodesSeen.add( node ) );\n  }\n}\n", "export function arrayRange( start: number, end: number, step?: number ): number[] {\n  let current = start;\n  const ret: number[] = [];\n\n  if ( start < end ) {\n    step = step ?? 1;\n    while ( current < end ) {\n      ret.push( current );\n      current += step;\n    }\n  } else {\n    step = step ?? -1;\n    while ( current > end ) {\n      ret.push( current );\n      current += step;\n    }\n  }\n\n  return ret;\n}\n\n", "export const arraySerial = ( count: number ): number[] => (\n  [ ...Array( count ) ].map( ( _, i ) => i )\n);\n", "export function arraySetDelete<T>( array: Array<T>, value: T ): boolean {\n  const index = array.indexOf( value );\n  if ( index === -1 ) { return false; }\n\n  array.splice( index, 1 );\n  return true;\n}\n\nexport function arraySetHas<T>( array: Array<T>, value: T ): boolean {\n  return array.indexOf( value ) !== -1;\n}\n\nexport function arraySetAdd<T>( array: Array<T>, value: T ): boolean {\n  const index = array.indexOf( value );\n  if ( index !== -1 ) { return false; }\n\n  array.push( value );\n  return true;\n}\n\nexport function arraySetUnion<T>( a: Array<T>, b: Array<T> ): Array<T> {\n  const out = [ ...a ];\n  b.forEach( ( v ) => {\n    if ( !arraySetHas( out, v ) ) {\n      out.push( v );\n    }\n  } );\n  return out;\n}\n\nexport function arraySetDiff<T>( from: Array<T>, diff: Array<T> ): Array<T> {\n  const out = [ ...from ];\n  diff.forEach( ( v ) => {\n    arraySetDelete( out, v );\n  } );\n  return out;\n}\n", "/**\n * `[ -1, -1, 1, -1, -1, 1, 1, 1 ]`\n */\nexport const TRIANGLE_STRIP_QUAD = [ -1, -1, 1, -1, -1, 1, 1, 1 ];\n\n/**\n * `[ -1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0 ]`\n */\nexport const TRIANGLE_STRIP_QUAD_3D = [ -1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0 ];\n\n/**\n * `[ 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1 ]`\n */\nexport const TRIANGLE_STRIP_QUAD_NORMAL = [ 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1 ];\n\n/**\n * `[ 0, 0, 1, 0, 0, 1, 1, 1 ]`\n */\nexport const TRIANGLE_STRIP_QUAD_UV = [ 0, 0, 1, 0, 0, 1, 1, 1 ];\n", "/**\n * Shuffle given `array` using given `dice` RNG. **Destructive**.\n */\nexport function shuffleArray<T>( array: T[], dice?: () => number ): T[] {\n  const f = dice ? dice : () => Math.random();\n  for ( let i = 0; i < array.length - 1; i ++ ) {\n    const ir = i + Math.floor( f() * ( array.length - i ) );\n    const temp = array[ ir ];\n    array[ ir ] = array[ i ];\n    array[ i ] = temp;\n  }\n  return array;\n}\n\n/**\n * I like wireframe\n *\n * `triIndexToLineIndex( [ 0, 1, 2, 5, 6, 7 ] )` -> `[ 0, 1, 1, 2, 2, 0, 5, 6, 6, 7, 7, 5 ]`\n */\nexport function triIndexToLineIndex<T>( array: T[] ): T[] {\n  const ret: T[] = [];\n  for ( let i = 0; i < array.length / 3; i ++ ) {\n    const head = i * 3;\n    ret.push(\n      array[ head     ], array[ head + 1 ],\n      array[ head + 1 ], array[ head + 2 ],\n      array[ head + 2 ], array[ head     ]\n    );\n  }\n  return ret;\n}\n\n/**\n * `matrix2d( 3, 2 )` -> `[ 0, 0, 0, 1, 0, 2, 1, 0, 1, 1, 1, 2 ]`\n */\nexport function matrix2d( w: number, h: number ): number[] {\n  const arr: number[] = [];\n  for ( let iy = 0; iy < h; iy ++ ) {\n    for ( let ix = 0; ix < w; ix ++ ) {\n      arr.push( ix, iy );\n    }\n  }\n  return arr;\n}\n\n/**\n * See also: {@link matrix2d}\n */\nexport function matrix3d( w: number, h: number, d: number ): number[] {\n  const arr: number[] = [];\n  for ( let iz = 0; iz < d; iz ++ ) {\n    for ( let iy = 0; iy < h; iy ++ ) {\n      for ( let ix = 0; ix < w; ix ++ ) {\n        arr.push( ix, iy, iz );\n      }\n    }\n  }\n  return arr;\n}\n", "/**\n * Critically Damped Spring\n *\n * Shoutouts to Keijiro Takahashi\n */\nexport class CDS {\n  public factor = 100.0;\n  public ratio = 1.0;\n  public velocity = 0.0;\n  public value = 0.0;\n  public target = 0.0;\n\n  public update( deltaTime: number ): number {\n    this.velocity += (\n      -this.factor * ( this.value - this.target )\n      - 2.0 * this.velocity * Math.sqrt( this.factor ) * this.ratio\n    ) * deltaTime;\n    this.value += this.velocity * deltaTime;\n    return this.value;\n  }\n}\n", "/**\n * Class that deals with time.\n * In this base class, you need to set time manually from `Automaton.update()`.\n * Best for sync with external clock stuff.\n */\nexport class Clock {\n  /**\n   * Its current time.\n   */\n  protected __time = 0.0;\n\n  /**\n   * Its deltaTime of last update.\n   */\n  protected __deltaTime = 0.0;\n\n  /**\n   * Whether its currently playing or not.\n   */\n  protected __isPlaying = false;\n\n  /**\n   * Its current time.\n   */\n  public get time(): number { return this.__time; }\n\n  /**\n   * Its deltaTime of last update.\n   */\n  public get deltaTime(): number { return this.__deltaTime; }\n\n  /**\n   * Whether its currently playing or not.\n   */\n  public get isPlaying(): boolean { return this.__isPlaying; }\n\n  /**\n   * Update the clock.\n   * @param time Time. You need to set manually when you are using manual Clock\n   */\n  public update( time?: number ): void {\n    const prevTime = this.__time;\n    this.__time = time || 0.0;\n    this.__deltaTime = this.__time - prevTime;\n  }\n\n  /**\n   * Start the clock.\n   */\n  public play(): void {\n    this.__isPlaying = true;\n  }\n\n  /**\n   * Stop the clock.\n   */\n  public pause(): void {\n    this.__isPlaying = false;\n  }\n\n  /**\n   * Set the time manually.\n   * @param time Time\n   */\n  public setTime( time: number ): void {\n    this.__time = time;\n  }\n}\n", "import { Clock } from './Clock';\n\n/**\n * Class that deals with time.\n * This is \"frame\" type clock, the frame increases every {@link ClockFrame#update} call.\n * @param fps Frames per second\n */\nexport class ClockFrame extends Clock {\n  /**\n   * Its current frame.\n   */\n  private __frame = 0;\n\n  /**\n   * Its fps.\n   */\n  private __fps: number;\n\n  public constructor( fps = 60 ) {\n    super();\n    this.__fps = fps;\n  }\n\n  /**\n   * Its current frame.\n   */\n  public get frame(): number { return this.__frame; }\n\n  /**\n   * Its fps.\n   */\n  public get fps(): number { return this.__fps; }\n\n  /**\n   * Update the clock. It will increase the frame by 1.\n   */\n  public update(): void {\n    if ( this.__isPlaying ) {\n      this.__time = this.__frame / this.__fps;\n      this.__deltaTime = 1.0 / this.__fps;\n      this.__frame ++;\n    } else {\n      this.__deltaTime = 0.0;\n    }\n  }\n\n  /**\n   * Set the time manually.\n   * The set time will be converted into internal frame count, so the time will not be exactly same as set one.\n   * @param time Time\n   */\n  public setTime( time: number ): void {\n    this.__frame = Math.floor( this.__fps * time );\n    this.__time = this.__frame / this.__fps;\n  }\n}\n", "import { Clock } from './Clock';\n\n/**\n * Class that deals with time.\n * This is \"realtime\" type clock, the time goes on as real world.\n */\nexport class ClockRealtime extends Clock {\n  /**\n   * \"You set the time manually to `__rtTime` when it's `__rtDate`.\"\n   */\n  private __rtTime = 0.0;\n\n  /**\n   * \"You set the time manually to `__rtTime` when it's `__rtDate`.\"\n   */\n  private __rtDate: number = performance.now();\n\n  /**\n   * The clock is realtime. yeah.\n   */\n  public get isRealtime(): boolean { return true; }\n\n  /**\n   * Update the clock. Time is calculated based on time in real world.\n   */\n  public update(): void {\n    const now = performance.now();\n\n    if ( this.__isPlaying ) {\n      const prevTime = this.__time;\n      const deltaDate = ( now - this.__rtDate );\n      this.__time = this.__rtTime + deltaDate / 1000.0;\n      this.__deltaTime = this.time - prevTime;\n    } else {\n      this.__rtTime = this.time;\n      this.__rtDate = now;\n      this.__deltaTime = 0.0;\n    }\n  }\n\n  /**\n   * Set the time manually.\n   * @param time Time\n   */\n  public setTime( time: number ): void {\n    this.__time = time;\n    this.__rtTime = this.time;\n    this.__rtDate = performance.now();\n  }\n}\n", "import type { RawRGB } from './RawRGB';\n\n/**\n * Converts the input color in Atari-ST color palette format to a {@link RawRGB}.\n *\n * @param stColor A color in Atari-ST format\n */\nexport function colorFromAtariST( stColor: number ): RawRGB {\n  return [\n    ( stColor >> 8 & 7 ) / 7.0,\n    ( stColor >> 4 & 7 ) / 7.0,\n    ( stColor & 7 ) / 7.0,\n  ];\n}\n", "/**\n * `lerp`, or `mix`\n */\nexport function lerp( a: number, b: number, x: number ): number {\n  return a + ( b - a ) * x;\n}\n\n/**\n * `clamp`\n */\nexport function clamp( x: number, l: number, h: number ): number {\n  return Math.min( Math.max( x, l ), h );\n}\n\n/**\n * `clamp( x, 0.0, 1.0 )`\n */\nexport function saturate( x: number ): number {\n  return clamp( x, 0.0, 1.0 );\n}\n\n/**\n * Transform a value from input range to output range.\n */\nexport function range( x: number, x0: number, x1: number, y0: number, y1: number ): number {\n  return ( ( x - x0 ) * ( y1 - y0 ) / ( x1 - x0 ) + y0 );\n}\n\n/**\n * `smoothstep` but not smooth\n */\nexport function linearstep( a: number, b: number, x: number ): number {\n  return saturate( ( x - a ) / ( b - a ) );\n}\n\n/**\n * world famous `smoothstep` function\n */\nexport function smoothstep( a: number, b: number, x: number ): number {\n  const t = linearstep( a, b, x );\n  return t * t * ( 3.0 - 2.0 * t );\n}\n\n/**\n * `smoothstep` but more smooth\n */\nexport function smootherstep( a: number, b: number, x: number ): number {\n  const t = linearstep( a, b, x );\n  return t * t * t * ( t * ( t * 6.0 - 15.0 ) + 10.0 );\n}\n\n/**\n * `smoothstep` but WAY more smooth\n */\nexport function smootheststep( a: number, b: number, x: number ): number {\n  const t = linearstep( a, b, x );\n  return t * t * t * t * ( t * ( t * ( -20.0 * t + 70.0 ) - 84.0 ) + 35.0 );\n}\n", "import { RawRGB } from './RawRGB';\nimport { lerp } from '../math/utils';\n\n/**\n * Convert a color from HSV to RGB.\n * Each component of the HSV must be given in [0 - 1] range.\n *\n * Ref: https://en.wikipedia.org/wiki/HSV_color_space\n */\nexport function colorHSV2RGB( [ h, s, v ]: [ number, number, number ] ): RawRGB {\n  const ht = h % 1.0 * 6.0;\n\n  return [ 0.0, 4.0, 2.0 ].map( ( p ) => {\n    const colH = Math.min( Math.max( (\n      Math.abs( ( ht + p ) % 6.0 - 3.0 ) - 1.0\n    ), 0.0 ), 1.0 );\n    const colS = lerp( 1.0, colH, s );\n    return v * colS;\n  } ) as RawRGB;\n}\n", "import { saturate } from '../math/utils';\nimport type { RawRGB } from './RawRGB';\n\n/**\n * Converts the input color to hex representation (e.g. #7f7f7f)\n * @param color color in {@link RawRGB}\n */\nexport function colorToHex( color: RawRGB ): string {\n  return '#' + color.map( ( v ) => (\n    ( '0' + ( Math.round( saturate( v ) * 255.0 ) ).toString( 16 ) ).slice( -2 )\n  ) ).join( '' );\n}\n", "/**\n * Return a dot product of given two vectors.\n */\nexport function vecDot<T extends number[]>( vecA: T, vecB: T ): number {\n  return vecA.reduce( ( sum, v, i ) => sum + v * vecB[ i ], 0.0 );\n}\n", "/*!\n * Turbo colormap\n *\n * Copyright 2019 Google LLC. (Apache-2.0)\n *\n * https://gist.github.com/mikhailov-work/0d177465a8151eb6ede1768d51d476c7\n */\n\nimport { RawRGB } from './RawRGB';\nimport { saturate } from '../math/utils';\nimport { vecDot } from '../math/vec/vecDot';\n\n/**\n * Generate a turbo gradient.\n *\n * Ref: https://gist.github.com/mikhailov-work/0d177465a8151eb6ede1768d51d476c7\n */\nexport function colorTurbo( x: number ): RawRGB {\n  const kr = [\n    0.13572138, 4.61539260, -42.66032258,\n    132.13108234, -152.94239396, 59.28637943,\n  ];\n  const kg = [\n    0.09140261, 2.19418839, 4.84296658,\n    -14.18503333, 4.27729857, 2.82956604,\n  ];\n  const kb = [\n    0.10667330, 12.64194608, -60.58204836,\n    110.36276771, -89.90310912, 27.34824973,\n  ];\n\n  const xt = saturate( x );\n  const xv = [\n    1.0,\n    xt,\n    xt * xt,\n    xt * xt * xt,\n    xt * xt * xt * xt,\n    xt * xt * xt * xt * xt,\n  ];\n\n  const col = [\n    saturate( vecDot( kr, xv ) ),\n    saturate( vecDot( kg, xv ) ),\n    saturate( vecDot( kb, xv ) ),\n  ];\n\n  return col as RawRGB;\n}\n", "import type { RawRGB } from './RawRGB';\n\n/**\n * EOTF of Rec.709 a.k.a. sRGB-to-Linear\n */\nexport function eotfRec709( value: RawRGB ): RawRGB {\n  return value.map( ( v ) => (\n    v < 0.081\n      ? v / 4.5\n      : Math.pow( ( v + 0.099 ) / 1.099, 1.0 / 0.45 )\n  ) ) as RawRGB;\n}\n", "import type { RawRGB } from './RawRGB';\n\n/**\n * OETF of Rec.709 a.k.a. Linear-to-sRGB\n */\nexport function oetfRec709( luminance: RawRGB ): RawRGB {\n  return luminance.map( ( l ) => (\n    l < 0.018\n      ? 4.5 * l\n      : 1.099 * Math.pow( l, 0.45 ) - 0.099\n  ) ) as RawRGB;\n}\n", "import { RawDagEdge } from './RawDagEdge';\n\n/**\n * Return all parent sources the specified destination has.\n * @param edges An array of dag edge\n * @param destination The target destination\n *\n * See also: {@link dagEdgesChildren}\n */\nexport function dagEdgesParents<T>( edges: RawDagEdge<T>[], destination: T ): T[] {\n  return edges\n    .filter( ( edge ) => edge[ 1 ] === destination )\n    .map( ( edge ) => edge[ 0 ] );\n}\n", "import { dagEdgesParents } from './dagEdgesParents';\nimport { traverse } from '../algorithm/traverse';\nimport type { RawDagEdge } from './RawDagEdge';\n\n/**\n * Return all ancestor sources the specified destination has.\n * @param edges An array of dag edge\n * @param destination The target destination\n *\n * See also: {@link dagEdgesChildren}\n */\nexport function dagEdgesAncestors<T>( edges: RawDagEdge<T>[], destination: T ): T[] {\n  const ancestors = new Set<T>();\n\n  traverse( destination, ( node ) => {\n    const parents = dagEdgesParents( edges, node );\n    parents.map( ( parent ) => ancestors.add( parent ) );\n    return parents;\n  } );\n\n  return Array.from( ancestors );\n}\n", "import { RawDagEdge } from './RawDagEdge';\n\n/**\n * Return all children destinations the specified source has.\n * @param edges An array of dag edge\n * @param source The target source\n *\n * See also: {@link dagEdgesDescendant}\n */\nexport function dagEdgesChildren<T>( edges: RawDagEdge<T>[], source: T ): T[] {\n  return edges\n    .filter( ( edge ) => edge[ 0 ] === source )\n    .map( ( edge ) => edge[ 1 ] );\n}\n", "import { dagEdgesChildren } from './dagEdgesChildren';\nimport { traverse } from '../algorithm/traverse';\nimport type { RawDagEdge } from './RawDagEdge';\n\n/**\n * Return all descendant destinations the specified source has.\n * @param edges An array of dag edge\n * @param source The target source\n *\n * See also: {@link dagEdgesChildren}\n */\nexport function dagEdgesDescendants<T>( edges: RawDagEdge<T>[], source: T ): T[] {\n  const descendants = new Set<T>();\n\n  traverse( source, ( node ) => {\n    const children = dagEdgesChildren( edges, node );\n    children.map( ( child ) => descendants.add( child ) );\n    return children;\n  } );\n\n  return Array.from( descendants );\n}\n", "import { RawDagEdge } from './RawDagEdge';\n\n/**\n * Return first parent source the specified destination has.\n * If it can't find a parent, it will return `null` instead.\n *\n * @param edges An array of dag edge\n * @param destination The target destination\n *\n * See also: {@link dagEdgesParents}\n */\nexport function dagEdgesParent<T>( edges: RawDagEdge<T>[], destination: T ): T | null {\n  return edges.find( ( edge ) => edge[ 1 ] === destination )?.[ 0 ] ?? null;\n}\n", "import { RawDagEdge } from './RawDagEdge';\nimport { dagEdgesParent } from './dagEdgesParent';\n\n/**\n * Resolve dag dependency relationship and give you a correct order.\n *\n * @param edges An array of dag edges\n * @param nodes An array of dag nodes\n */\nexport function dagEdgesResolve<T>( edges: RawDagEdge<T>[], nodes: T[] ): T[] {\n  const order: T[] = [];\n\n  const nodeSet = new Set( nodes );\n  let tempEdges = edges.concat();\n\n  while ( tempEdges.length > 0 ) {\n    nodeSet.forEach( ( node ) => {\n      // is this an entrypoint?\n      const hasParents = dagEdgesParent( tempEdges, node ) != null;\n\n      if ( !hasParents ) {\n        nodeSet.delete( node );\n        order.push( node );\n\n        // delete the structure of tempEdges from entrypoint side\n        tempEdges = tempEdges.filter( ( [ src ] ) => ( src !== node ) );\n      }\n    } );\n  }\n\n  return order.concat( Array.from( nodeSet ) );\n  //                   ^^^^^^^^^^^^^^^^^^^^^ terminator nodes\n}\n", "// yoinked from https://github.com/mapbox/tiny-sdf (BSD 2-Clause)\n// implements http://people.cs.uchicago.edu/~pff/papers/dt.pdf\n\n/**\n * Compute a one dimensional edt from the source data.\n * Returning distance will be squared.\n * Intended to be used internally in {@link edt2d}.\n *\n * @param data Data of the source\n * @param offset Offset of the source from beginning\n * @param stride Stride of the source\n * @param length Length of the source\n */\nexport function edt1d(\n  data: Float32Array,\n  offset: number,\n  stride: number,\n  length: number\n): void {\n  // index of rightmost parabola in lower envelope\n  let k = 0;\n\n  // locations of parabolas in lower envelope\n  const v = new Float32Array( length );\n  v[ 0 ] = 0.0;\n\n  // locations of boundaries between parabolas\n  const z = new Float32Array( length + 1 );\n  z[ 0 ] = -Infinity;\n  z[ 1 ] = Infinity;\n\n  // create a straight array of input data\n  const f = new Float32Array( length );\n  for ( let q = 0; q < length; q ++ ) {\n    f[ q ] = data[ offset + q * stride ];\n  }\n\n  // compute lower envelope\n  for ( let q = 1; q < length; q ++ ) {\n    let s = 0.0;\n\n    while ( 0 <= k ) {\n      s = ( f[ q ] + q * q - f[ v[ k ] ] - v[ k ] * v[ k ] ) / ( 2.0 * q - 2.0 * v[ k ] );\n      if ( s <= z[ k ] ) {\n        k --;\n      } else {\n        break;\n      }\n    }\n\n    k ++;\n    v[ k ] = q;\n    z[ k ] = s;\n    z[ k + 1 ] = Infinity;\n  }\n\n  k = 0;\n\n  // fill in values of distance transform\n  for ( let q = 0; q < length; q ++ ) {\n    while ( z[ k + 1 ] < q ) { k ++; }\n    const qSubVK = q - v[ k ];\n    data[ offset + q * stride ] = f[ v[ k ] ] + qSubVK * qSubVK;\n  }\n}\n\n/**\n * Compute a two dimensional edt from the source data.\n * Returning distance will be squared.\n *\n * @param data Data of the source.\n * @param width Width of the source.\n * @param height Height of the source.\n */\nexport function edt2d(\n  data: Float32Array,\n  width: number,\n  height: number\n): void {\n  for ( let x = 0; x < width; x ++ ) {\n    edt1d( data, x, width, height );\n  }\n\n  for ( let y = 0; y < height; y ++ ) {\n    edt1d( data, y * width, 1, width );\n  }\n}\n", "import { lerp } from '../math/utils';\n\n/**\n * Do exp smoothing\n */\nexport class ExpSmooth {\n  public factor = 10.0;\n  public target = 0.0;\n  public value = 0.0;\n\n  public update( deltaTime: number ): number {\n    this.value = lerp( this.target, this.value, Math.exp( -this.factor * deltaTime ) );\n    return this.value;\n  }\n}\n", "export class Pool<T> {\n  public array: T[];\n\n  public index = 0;\n\n  public get current(): T {\n    return this.array[ this.index ];\n  }\n\n  public constructor( array: T[] ) {\n    this.array = array;\n  }\n\n  public next(): T {\n    this.index = ( this.index + 1 ) % this.array.length;\n    return this.current;\n  }\n}\n", "import { Pool } from '../Pool/Pool';\n\nexport class GPUTimer {\n  public queries: Pool<WebGLQuery>;\n  public stack: Promise<number>[];\n  public ext: any;\n  public readonly gl: WebGL2RenderingContext;\n\n  private __loopTasks: Set<() => void>;\n\n  public static isSupported( gl: WebGLRenderingContext | WebGL2RenderingContext ): boolean {\n    return new Set( gl.getSupportedExtensions() ).has( 'EXT_disjoint_timer_query_webgl2' );\n  }\n\n  public constructor( gl: WebGL2RenderingContext ) {\n    this.gl = gl;\n\n    const queries = new Array( 1024 ).fill( 1 ).map( () => gl.createQuery()! );\n    this.queries = new Pool( queries );\n\n    this.stack = [];\n\n    this.ext = gl.getExtension( 'EXT_disjoint_timer_query_webgl2' );\n\n    this.__loopTasks = new Set();\n\n    // loop\n    const update = (): void => {\n      this.update();\n      requestAnimationFrame( update );\n    };\n    update();\n  }\n\n  public update(): void {\n    Array.from( this.__loopTasks ).forEach( ( task ) => task() );\n  }\n\n  public async measure( func: () => void ): Promise<number> {\n    const { gl } = this;\n\n    if ( this.stack.length !== 0 ) {\n      gl.endQuery( this.ext.TIME_ELAPSED_EXT );\n      const promiseFinishingPrev = this.check( this.queries.current );\n\n      this.stack = this.stack.map( async ( promiseAccum ) => {\n        return ( await promiseAccum ) + ( await promiseFinishingPrev );\n      } );\n    }\n\n    this.stack.push( Promise.resolve( 0.0 ) );\n\n    gl.beginQuery( this.ext.TIME_ELAPSED_EXT, this.queries.next() );\n\n    func();\n\n    gl.endQuery( this.ext.TIME_ELAPSED_EXT );\n\n    const promiseAccum = this.stack.pop()!;\n    const promiseThis = this.check( this.queries.current );\n\n    if ( this.stack.length !== 0 ) {\n      this.stack = this.stack.map( async ( promiseAccum ) => {\n        return ( await promiseAccum ) + ( await promiseThis );\n      } );\n\n      gl.beginQuery( this.ext.TIME_ELAPSED_EXT, this.queries.next() );\n    }\n\n    return ( await promiseAccum ) + ( await promiseThis );\n  }\n\n  public check( query: WebGLQuery ): Promise<number> {\n    const { gl } = this;\n\n    return new Promise( ( resolve ) => {\n      const task = (): void => {\n        const isAvailable = gl.getQueryParameter( query, gl.QUERY_RESULT_AVAILABLE );\n\n        if ( isAvailable ) {\n          this.__loopTasks.delete( task );\n          resolve( gl.getQueryParameter( query, gl.QUERY_RESULT ) * 0.001 * 0.001 );\n        }\n      };\n\n      this.__loopTasks.add( task );\n    } );\n  }\n}\n", "/**\n * Useful for tap tempo\n * See also: {@link HistoryMeanCalculator}\n */\nexport class HistoryMeanCalculator {\n  private __recalcForEach = 0;\n  private __countUntilRecalc = 0;\n  private __history: number[] = [];\n  private __index = 0;\n  private __length: number;\n  private __count = 0;\n  private __cache = 0;\n\n  public constructor( length: number ) {\n    this.__length = length;\n    this.__recalcForEach = length;\n    for ( let i = 0; i < length; i ++ ) {\n      this.__history[ i ] = 0;\n    }\n  }\n\n  public get mean(): number {\n    const count = Math.min( this.__count, this.__length );\n    return count === 0 ? 0.0 : this.__cache / count;\n  }\n\n  public get recalcForEach(): number {\n    return this.__recalcForEach;\n  }\n\n  public set recalcForEach( value: number ) {\n    const delta = value - this.__recalcForEach;\n    this.__recalcForEach = value;\n    this.__countUntilRecalc = Math.max( 0, this.__countUntilRecalc + delta );\n  }\n\n  public reset(): void {\n    this.__index = 0;\n    this.__count = 0;\n    this.__cache = 0;\n    this.__countUntilRecalc = 0;\n    for ( let i = 0; i < this.__length; i ++ ) {\n      this.__history[ i ] = 0;\n    }\n  }\n\n  public push( value: number ): void {\n    const prev = this.__history[ this.__index ];\n    this.__history[ this.__index ] = value;\n    this.__count ++;\n    this.__index = ( this.__index + 1 ) % this.__length;\n\n    if ( this.__countUntilRecalc === 0 ) {\n      this.recalc();\n    } else {\n      this.__countUntilRecalc --;\n      this.__cache -= prev;\n      this.__cache += value;\n    }\n  }\n\n  public recalc(): void {\n    this.__countUntilRecalc = this.__recalcForEach;\n    const sum = this.__history\n      .slice( 0, Math.min( this.__count, this.__length ) )\n      .reduce( ( sum, v ) => sum + v, 0 );\n    this.__cache = sum;\n  }\n}\n", "import { binarySearch } from '../algorithm/binarySearch';\n\n/**\n * Useful for fps calc\n * See also: {@link HistoryMeanCalculator}\n */\nexport class HistoryPercentileCalculator {\n  private __history: number[] = [];\n  private __sorted: number[] = [];\n  private __index = 0;\n  private readonly __length: number;\n\n  public constructor( length: number ) {\n    this.__length = length;\n  }\n\n  public get median(): number {\n    return this.percentile( 50.0 );\n  }\n\n  public percentile( percentile: number ): number {\n    if ( this.__history.length === 0 ) { return 0.0; }\n    return this.__sorted[ Math.round( percentile * 0.01 * ( this.__history.length - 1 ) ) ];\n  }\n\n  public reset(): void {\n    this.__index = 0;\n    this.__history = [];\n    this.__sorted = [];\n  }\n\n  public push( value: number ): void {\n    const prev = this.__history[ this.__index ];\n    this.__history[ this.__index ] = value;\n    this.__index = ( this.__index + 1 ) % this.__length;\n\n    // remove the prev from sorted array\n    if ( this.__sorted.length === this.__length ) {\n      const prevIndex = binarySearch( this.__sorted, prev );\n      this.__sorted.splice( prevIndex, 1 );\n    }\n\n    const index = binarySearch( this.__sorted, value );\n    this.__sorted.splice( index, 0, value );\n  }\n}\n", "import { HistoryPercentileCalculator } from './HistoryPercentileCalculator';\n\n/**\n * @deprecated It's actually just a special case of {@link HistoryPercentileCalculator}\n */\nexport class HistoryMedianCalculator extends HistoryPercentileCalculator {\n  public constructor( length: number ) {\n    super( length );\n    console.warn( 'HistoryMedianCalculator: Deprecated. Use HistoryPercentileCalculator instead' );\n  }\n}\n", "export class MapOfSet<K, V> {\n  public readonly map: Map<K, Set<V>>;\n\n  public constructor() {\n    this.map = new Map();\n  }\n\n  public get( key: K ): Set<V> {\n    return this.map.get( key ) ?? new Set();\n  }\n\n  public add( key: K, value: V ): void {\n    let set = this.map.get( key );\n    if ( set == null ) {\n      set = new Set();\n      this.map.set( key, set );\n    }\n    set.add( value );\n  }\n}\n", "/**\n * Return a vector with the absolute of each component of the given vector.\n */\nexport function vecAbs<T extends number[]>( vec: T ): T {\n  return vec.map( ( v ) => Math.abs( v ) ) as T;\n}\n", "/**\n * Return a sum of vectors.\n */\nexport function vecAdd<T extends number[]>( ...vecs: T[] ): T {\n  if ( vecs.length < 2 ) {\n    return vecs[ 0 ];\n  }\n\n  const a = vecs.shift()!;\n  const b = vecAdd( ...vecs );\n\n  return a.map( ( v, i ) => v + b[ i ] ) as T;\n}\n", "/**\n * Divide a vector by a vector.\n */\nexport function vecDivide<T extends number[]>( vecA: T, vecB: T ): T {\n  return vecA.map( ( v, i ) => v / vecB[ i ] ) as T;\n}\n", "/**\n * Return an euclidean length of given vector.\n */\nexport function vecLength<T extends number[]>( vec: T ): number {\n  return Math.sqrt( vec.reduce( ( sum, v ) => sum + v * v, 0.0 ) );\n}\n", "/**\n * Return an squared euclidean length of given vector.\n */\nexport function vecLengthSq<T extends number[]>( vec: T ): number {\n  return vec.reduce( ( sum, v ) => sum + v * v, 0.0 );\n}\n", "/**\n * Return a manhattan length of given vector.\n */\nexport function vecManhattanLength<T extends number[]>( vec: T ): number {\n  return vec.reduce( ( sum, v ) => sum + Math.abs( v ), 0.0 );\n}\n", "/**\n * Return a product of vectors.\n */\nexport function vecMultiply<T extends number[]>( ...vecs: T[] ): T {\n  if ( vecs.length < 2 ) {\n    return vecs[ 0 ];\n  }\n\n  const a = vecs.shift()!;\n  const b = vecMultiply( ...vecs );\n\n  return a.map( ( v, i ) => v * b[ i ] ) as T;\n}\n", "/**\n * Negate a vector.\n */\nexport function vecNeg<T extends number[]>( vec: T ): T {\n  return vec.map( ( v ) => -v ) as T;\n}\n", "/**\n * Scale the given vector by a scalar.\n */\nexport function vecScale<T extends number[]>( vec: T, scalar: number ): T {\n  return vec.map( ( v ) => v * scalar ) as T;\n}\n", "import { vecLength } from './vecLength';\nimport { vecScale } from './vecScale';\n\n/**\n * Normalize given vector.\n * If the length of given vector is 0.0, it will return a zero vector instead.\n */\nexport function vecNormalize<T extends number[]>( vec: T ): T {\n  const len = vecLength( vec );\n  const invLen = len === 0.0 ? 0.0 : 1.0 / len;\n  return vecScale( vec, invLen );\n}\n", "/**\n * Subtract a vector from a vector.\n */\nexport function vecSub<T extends number[]>( vecA: T, vecB: T ): T {\n  return vecA.map( ( v, i ) => v - vecB[ i ] ) as T;\n}\n", "import { vecAbs } from './vecAbs';\nimport { vecAdd } from './vecAdd';\nimport { vecDivide } from './vecDivide';\nimport { vecDot } from './vecDot';\nimport { vecLength } from './vecLength';\nimport { vecLengthSq } from './vecLengthSq';\nimport { vecManhattanLength } from './vecManhattanLength';\nimport { vecMultiply } from './vecMultiply';\nimport { vecNeg } from './vecNeg';\nimport { vecNormalize } from './vecNormalize';\nimport { vecScale } from './vecScale';\nimport { vecSub } from './vecSub';\n\n/**\n * A Vector.\n */\nexport abstract class Vector<T extends Vector<T>> {\n  public abstract elements: number[];\n\n  /**\n   * The length of this.\n   * a.k.a. `magnitude`\n   */\n  public get length(): number {\n    return vecLength( this.elements );\n  }\n\n  /**\n   * The squared length of this.\n   */\n  public get lengthSq(): number {\n    return vecLengthSq( this.elements );\n  }\n\n  /**\n   * The manhattan length of this.\n   */\n  public get manhattanLength(): number {\n    return vecManhattanLength( this.elements );\n  }\n\n  /**\n   * A normalized Vector3 of this.\n   */\n  public get normalized(): T {\n    return this.__new( vecNormalize( this.elements ) );\n  }\n\n  /**\n   * This but negated.\n   */\n  public get negated(): T {\n    return this.__new( vecNeg( this.elements ) );\n  }\n\n  /**\n   * This but each component is the absolute.\n   */\n  public get abs(): T {\n    return this.__new( vecAbs( this.elements ) );\n  }\n\n  /**\n   * Clone this.\n   */\n  public clone(): T {\n    return this.__new( this.elements.concat() );\n  }\n\n  /**\n   * Add one or more Vector into this.\n   * @param vectors Other Vectors\n   */\n  public add( ...vectors: T[] ): T {\n    return this.__new( vecAdd( this.elements, ...vectors.map( ( v ) => v.elements ) ) );\n  }\n\n  /**\n   * Substract this from another Vector.\n   * @param v Another vector\n   */\n  public sub( vector: T ): T {\n    return this.__new( vecSub( this.elements, vector.elements ) );\n  }\n\n  /**\n   * Multiply one or more Vector with this.\n   * @param vectors Other Vectors\n   */\n  public multiply( ...vectors: T[] ): T {\n    return this.__new( vecMultiply( this.elements, ...vectors.map( ( v ) => v.elements ) ) );\n  }\n\n  /**\n   * Divide this from another Vector.\n   * @param vector Another Vector\n   */\n  public divide( vector: T ): T {\n    return this.__new( vecDivide( this.elements, vector.elements ) );\n  }\n\n  /**\n   * Scale this by scalar.\n   * a.k.a. `multiplyScalar`\n   * @param scalar A scalar\n   */\n  public scale( scalar: number ): T {\n    return this.__new( vecScale( this.elements, scalar ) );\n  }\n\n  /**\n   * Dot two Vectors.\n   * @param vector Another vector\n   */\n  public dot( vector: T ): number {\n    return vecDot( this.elements, vector.elements );\n  }\n\n  protected abstract __new( v: number[] ): T;\n}\n", "import type { RawMatrix4 } from '../mat4';\nimport type { RawVector4 } from './RawVector4';\n\n/**\n * Multiply a vec4 by a mat4.\n */\nexport function vec4ApplyMatrix4( v: RawVector4, m: RawMatrix4 ): RawVector4 {\n  return [\n    m[ 0 ] * v[ 0 ] + m[ 4 ] * v[ 1 ] + m[ 8 ] * v[ 2 ] + m[ 12 ] * v[ 3 ],\n    m[ 1 ] * v[ 0 ] + m[ 5 ] * v[ 1 ] + m[ 9 ] * v[ 2 ] + m[ 13 ] * v[ 3 ],\n    m[ 2 ] * v[ 0 ] + m[ 6 ] * v[ 1 ] + m[ 10 ] * v[ 2 ] + m[ 14 ] * v[ 3 ],\n    m[ 3 ] * v[ 0 ] + m[ 7 ] * v[ 1 ] + m[ 11 ] * v[ 2 ] + m[ 15 ] * v[ 3 ],\n  ];\n}\n", "import { vec4ApplyMatrix4 } from '../vec4/vec4ApplyMatrix4';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\nimport type { RawVector3 } from './RawVector3';\n\n/**\n * Apply a vec3 (with an implicit 1 in the 4th dimension) a mat4.\n */\nexport function vec3ApplyMatrix4( v: RawVector3, m: RawMatrix4 ): RawVector3 {\n  const vec4 = vec4ApplyMatrix4( [ ...v, 1 ], m );\n  const xyz: RawVector3 = [ vec4[ 0 ], vec4[ 1 ], vec4[ 2 ] ];\n  const w = vec4[ 3 ];\n  return vecScale( xyz, 1.0 / w );\n}\n", "import type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Return an inverse of a quaternion.\n */\nexport function quatInverse( quat: RawQuaternion ): RawQuaternion {\n  return [ -quat[ 0 ], -quat[ 1 ], -quat[ 2 ], quat[ 3 ] ];\n}\n", "import type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Return a multiplication result of quaternions.\n */\nexport function quatMultiply( ...quats: RawQuaternion[] ): RawQuaternion {\n  if ( quats.length < 2 ) {\n    return quats[ 0 ];\n  }\n\n  const a = quats.shift()!;\n  const b = quatMultiply( ...quats );\n\n  return [\n    a[ 3 ] * b[ 0 ] + a[ 0 ] * b[ 3 ] + a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ],\n    a[ 3 ] * b[ 1 ] - a[ 0 ] * b[ 2 ] + a[ 1 ] * b[ 3 ] + a[ 2 ] * b[ 0 ],\n    a[ 3 ] * b[ 2 ] + a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] + a[ 2 ] * b[ 3 ],\n    a[ 3 ] * b[ 3 ] - a[ 0 ] * b[ 0 ] - a[ 1 ] * b[ 1 ] - a[ 2 ] * b[ 2 ],\n  ];\n}\n", "import { quatInverse } from '../quat/quatInverse';\nimport { quatMultiply } from '../quat/quatMultiply';\nimport type { RawQuaternion } from '../quat/RawQuaternion';\nimport type { RawVector3 } from './RawVector3';\n\n/**\n * Apply a vec3 (with an implicit 1 in the 4th dimension) a quaternion.\n */\nexport function vec3ApplyQuaternion( vec: RawVector3, quat: RawQuaternion ): RawVector3 {\n  const p: RawQuaternion = [ ...vec, 0.0 ];\n  const r = quatInverse( quat );\n  const res = quatMultiply( quat, p, r );\n  res.pop();\n  return res as unknown as RawVector3;\n}\n", "import type { RawVector3 } from './RawVector3';\n\n/**\n * Return a cross product of two vec3s.\n */\nexport function vec3Cross( vecA: RawVector3, vecB: RawVector3 ): RawVector3 {\n  return [\n    vecA[ 1 ] * vecB[ 2 ] - vecA[ 2 ] * vecB[ 1 ],\n    vecA[ 2 ] * vecB[ 0 ] - vecA[ 0 ] * vecB[ 2 ],\n    vecA[ 0 ] * vecB[ 1 ] - vecA[ 1 ] * vecB[ 0 ],\n  ];\n}\n", "import { vec3Cross } from './vec3Cross';\nimport { vecDot } from '../vec/vecDot';\nimport { vecNeg } from '../vec/vecNeg';\nimport { vecNormalize } from '../vec/vecNormalize';\nimport { vecScale } from '../vec/vecScale';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawVector3 } from './RawVector3';\n\n/**\n * Return a tangent which is orthogonal to normal.\n * If binormal is specified, it is also returned and it's orthogonal to both normal and tangent.\n */\nexport function vec3OrthoNormalize(\n  normal: RawVector3,\n  tangent: RawVector3 = [ 0.0, 1.0, 0.0 ],\n  binormal?: RawVector3,\n): {\n    normal: RawVector3,\n    tangent: RawVector3,\n    binormal: RawVector3,\n  } {\n  const n = vecNormalize( normal );\n  let t = vecNormalize( tangent );\n\n  let dotNT = vecDot( n, t );\n\n  if ( dotNT === 1.0 ) {\n    if ( Math.abs( n[ 1 ] ) > Math.abs( n[ 2 ] ) ) {\n      t = [ 0.0, 0.0, 1.0 ];\n    } else {\n      t = [ 0.0, 1.0, 0.0 ];\n    }\n    dotNT = vecDot( n, t );\n  }\n\n  t = vecNormalize( vecSub( t, vecScale( n, dotNT ) ) );\n\n  let b = vec3Cross( t, n );\n  if ( binormal && vecDot( b, binormal ) < 0.0 ) {\n    b = vecNeg( b );\n  }\n\n  return {\n    normal: n,\n    tangent: t,\n    binormal: b,\n  };\n}\n", "import { Matrix4 } from '../mat4/Matrix4';\nimport { Quaternion } from '../quat/Quaternion';\nimport { Vector } from '../vec/Vector';\nimport { vec3ApplyMatrix4 } from './vec3ApplyMatrix4';\nimport { vec3ApplyQuaternion } from './vec3ApplyQuaternion';\nimport { vec3Cross } from './vec3Cross';\nimport { vec3OrthoNormalize } from './vec3OrthoNormalize';\nimport type { RawVector3 } from './RawVector3';\n\n/**\n * A Vector3.\n */\nexport class Vector3 extends Vector<Vector3> {\n  public elements: RawVector3;\n\n  public constructor( v: RawVector3 = [ 0.0, 0.0, 0.0 ] ) {\n    super();\n    this.elements = v;\n  }\n\n  /**\n   * An x component of this.\n   */\n  public get x(): number {\n    return this.elements[ 0 ];\n  }\n\n  public set x( x: number ) {\n    this.elements[ 0 ] = x;\n  }\n\n  /**\n   * An y component of this.\n   */\n  public get y(): number {\n    return this.elements[ 1 ];\n  }\n\n  public set y( y: number ) {\n    this.elements[ 1 ] = y;\n  }\n\n  /**\n   * An z component of this.\n   */\n  public get z(): number {\n    return this.elements[ 2 ];\n  }\n\n  public set z( z: number ) {\n    this.elements[ 2 ] = z;\n  }\n\n  public toString(): string {\n    return `Vector3( ${ this.x.toFixed( 3 ) }, ${ this.y.toFixed( 3 ) }, ${ this.z.toFixed( 3 ) } )`;\n  }\n\n  /**\n   * Return a cross of this and another Vector3.\n   * @param vector Another vector\n   */\n  public cross( vector: Vector3 ): Vector3 {\n    return new Vector3( vec3Cross( this.elements, vector.elements ) );\n  }\n\n  /**\n   * Rotate this vector using a Quaternion.\n   * @param quaternion A quaternion\n   */\n  public applyQuaternion( quaternion: Quaternion ): Vector3 {\n    return new Vector3( vec3ApplyQuaternion( this.elements, quaternion.elements ) );\n  }\n\n  /**\n   * Multiply this vector (with an implicit 1 in the 4th dimension) by m.\n   */\n  public applyMatrix4( matrix: Matrix4 ): Vector3 {\n    return new Vector3( vec3ApplyMatrix4( this.elements, matrix.elements ) );\n  }\n\n  protected __new( v: RawVector3 ): Vector3 {\n    return new Vector3( v );\n  }\n\n  /**\n   * Vector3( 0.0, 0.0, 0.0 )\n   */\n  public static get zero(): Vector3 {\n    return new Vector3( [ 0.0, 0.0, 0.0 ] );\n  }\n\n  /**\n   * Vector3( 1.0, 0.0, 0.0 )\n   */\n  public static get px(): Vector3 {\n    return new Vector3( [ 1.0, 0.0, 0.0 ] );\n  }\n\n  /**\n   * Vector3( -1.0, 0.0, 0.0 )\n   */\n  public static get nx(): Vector3 {\n    return new Vector3( [ -1.0, 0.0, 0.0 ] );\n  }\n\n  /**\n   * Vector3( 0.0, 1.0, 0.0 )\n   */\n  public static get py(): Vector3 {\n    return new Vector3( [ 0.0, 1.0, 0.0 ] );\n  }\n\n  /**\n   * Vector3( 0.0, -1.0, 0.0 )\n   */\n  public static get ny(): Vector3 {\n    return new Vector3( [ 0.0, -1.0, 0.0 ] );\n  }\n\n  /**\n   * Vector3( 0.0, 0.0, 1.0 )\n   */\n  public static get pz(): Vector3 {\n    return new Vector3( [ 0.0, 0.0, 1.0 ] );\n  }\n\n  /**\n   * Vector3( 0.0, 0.0, -1.0 )\n   */\n  public static get nz(): Vector3 {\n    return new Vector3( [ 0.0, 0.0, -1.0 ] );\n  }\n\n  /**\n   * Vector3( 1.0, 1.0, 1.0 )\n   */\n  public static get one(): Vector3 {\n    return new Vector3( [ 1.0, 1.0, 1.0 ] );\n  }\n\n  /**\n   * Return a tangent which is orthogonal to normal.\n   * If binormal is specified, it is also returned and it's orthogonal to both normal and tangent.\n   */\n  public static orthoNormalize( normal: Vector3, tangent: Vector3, binormal: Vector3 ): {\n    normal: Vector3,\n    tangent: Vector3,\n    binormal: Vector3,\n  } {\n    const result = vec3OrthoNormalize( normal.elements, tangent.elements, binormal.elements );\n    return {\n      normal: new Vector3( result.normal ),\n      tangent: new Vector3( result.tangent ),\n      binormal: new Vector3( result.binormal ),\n    };\n  }\n}\n", "import type { RawBox3 } from './RawBox3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Test if given point is contained in given box or not.\n * @param box A box\n * @param point A point\n */\nexport function box3ContainsPoint( box: RawBox3, point: RawVector3 ): boolean {\n  return (\n    box[ 0 ][ 0 ] <= point[ 0 ] &&\n    box[ 1 ][ 0 ] >= point[ 0 ] &&\n    box[ 0 ][ 1 ] <= point[ 1 ] &&\n    box[ 1 ][ 1 ] >= point[ 1 ] &&\n    box[ 0 ][ 2 ] <= point[ 2 ] &&\n    box[ 1 ][ 2 ] >= point[ 2 ]\n  );\n}\n", "import { Vector3 } from '../vec3/Vector3';\nimport { box3ContainsPoint } from './box3ContainsPoint';\nimport type { RawBox3 } from './RawBox3';\n\n/**\n * A 3D box.\n */\nexport class Box3 {\n  public min: Vector3;\n  public max: Vector3;\n\n  public constructor( min: Vector3 = Vector3.zero, max: Vector3 = Vector3.zero ) {\n    this.min = min;\n    this.max = max;\n  }\n\n  /**\n   * Itself but {@link RawBox3} form.\n   */\n  public get raw(): RawBox3 {\n    return [ this.min.elements, this.max.elements ];\n  }\n\n  /**\n   * Test if given point is contained in the box or not.\n   *\n   * @param point A point\n   */\n  public containsPoint( point: Vector3 ): boolean {\n    return box3ContainsPoint( this.raw, point.elements );\n  }\n\n  /**\n   * Convert {@link RawBox3} to class form.\n   * @param box A {@link RawBox3}\n   */\n  public static fromRaw( box: RawBox3 ): Box3 {\n    return new Box3( new Vector3( box[ 0 ] ), new Vector3( box[ 1 ] ) );\n  }\n}\n", "import type { RawMatrix3 } from './RawMatrix3';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\n\n/**\n * Who needs this?\n *\n * Intended to be used by {@link mat3CreateNormalMatrix}.\n */\nexport function mat3FromMat4Transpose(\n  source: RawMatrix4,\n): RawMatrix3 {\n  return [\n    source[ 0 ], source[ 4 ], source[ 8 ],\n    source[ 1 ], source[ 5 ], source[ 9 ],\n    source[ 2 ], source[ 6 ], source[ 10 ],\n  ];\n}\n", "import { vecScale } from '../vec/vecScale';\nimport type { RawMatrix3 } from './RawMatrix3';\n\n/**\n * Return an inverse of given mat3.\n *\n * Yoinked from Three.js\n */\nexport function mat3Inverse( m: RawMatrix3 ): RawMatrix3 {\n  const\n    n11 = m[ 0 ], n21 = m[ 1 ], n31 = m[ 2 ],\n    n12 = m[ 3 ], n22 = m[ 4 ], n32 = m[ 5 ],\n    n13 = m[ 6 ], n23 = m[ 7 ], n33 = m[ 8 ],\n    t11 = n33 * n22 - n32 * n23,\n    t12 = n32 * n13 - n33 * n12,\n    t13 = n23 * n12 - n22 * n13,\n    det = n11 * t11 + n21 * t12 + n31 * t13;\n\n  if ( det === 0.0 ) { return vecScale( m, 0.0 ); }\n\n  return vecScale( [\n    t11,\n    n31 * n23 - n33 * n21,\n    n32 * n21 - n31 * n22,\n    t12,\n    n33 * n11 - n31 * n13,\n    n31 * n12 - n32 * n11,\n    t13,\n    n21 * n13 - n23 * n11,\n    n22 * n11 - n21 * n12,\n  ], 1.0 / det );\n}\n", "import { mat3FromMat4Transpose } from './mat3FromMat4Transpose';\nimport { mat3Inverse } from './mat3Inverse';\nimport type { RawMatrix3 } from './RawMatrix3';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\n\n/**\n * Create a normal matrix out of a matrix4.\n *\n * @param matrix A matrix4\n */\nexport function mat3CreateNormalMatrix( m: RawMatrix4 ): RawMatrix3 {\n  return mat3Inverse( mat3FromMat4Transpose( m ) );\n}\n", "import type { RawMatrix3 } from './RawMatrix3';\n\nexport function mat3Determinant( m: RawMatrix3 ): number {\n  const\n    n11 = m[ 0 ], n21 = m[ 1 ], n31 = m[ 2 ],\n    n12 = m[ 3 ], n22 = m[ 4 ], n32 = m[ 5 ],\n    n13 = m[ 6 ], n23 = m[ 7 ], n33 = m[ 8 ],\n    t11 = n33 * n22 - n32 * n23,\n    t12 = n32 * n13 - n33 * n12,\n    t13 = n23 * n12 - n22 * n13;\n\n  return n11 * t11 + n21 * t12 + n31 * t13;\n}\n", "import type { RawMatrix3 } from './RawMatrix3';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\n\n/**\n * Create a matrix3 from matrix4.\n */\nexport function mat3FromMat4(\n  source: RawMatrix4,\n): RawMatrix3 {\n  return [\n    source[ 0 ], source[ 1 ], source[ 2 ],\n    source[ 4 ], source[ 5 ], source[ 6 ],\n    source[ 8 ], source[ 9 ], source[ 10 ],\n  ];\n}\n", "import type { RawMatrix3 } from './RawMatrix3';\nimport type { RawQuaternion } from '../quat/RawQuaternion';\n\n/**\n * Convert a quaternion into a matrix3.\n *\n * Yoinked from Three.js.\n *\n * See: https://threejs.org/docs/#api/en/math/Matrix4.makeRotationFromQuaternion\n */\nexport function mat3FromQuaternion( quat: RawQuaternion ): RawMatrix3 {\n  const x = quat[ 0 ];\n  const y = quat[ 1 ];\n  const z = quat[ 2 ];\n  const w = quat[ 3 ];\n\n  return [\n    1.0 - 2.0 * y * y - 2.0 * z * z, 2.0 * x * y + 2.0 * z * w, 2.0 * x * z - 2.0 * y * w,\n    2.0 * x * y - 2.0 * z * w, 1.0 - 2.0 * x * x - 2.0 * z * z, 2.0 * y * z + 2.0 * x * w,\n    2.0 * x * z + 2.0 * y * w, 2.0 * y * z - 2.0 * x * w, 1.0 - 2.0 * x * x - 2.0 * y * y,\n  ];\n}\n", "import type { RawMatrix3 } from './RawMatrix3';\n\n/**\n * Return a multiplication result of matrices.\n */\nexport function mat3Multiply( ...mats: RawMatrix3[] ): RawMatrix3 {\n  if ( mats.length < 2 ) {\n    return mats[ 0 ];\n  }\n\n  const a = mats.shift()!;\n  const b = mat3Multiply( ...mats );\n  const\n    a00 = a[ 0 ], a01 = a[ 1 ], a02 = a[ 2 ],\n    a10 = a[ 3 ], a11 = a[ 4 ], a12 = a[ 5 ],\n    a20 = a[ 6 ], a21 = a[ 7 ], a22 = a[ 8 ],\n    b00 = b[ 0 ], b01 = b[ 1 ], b02 = b[ 2 ],\n    b10 = b[ 3 ], b11 = b[ 4 ], b12 = b[ 5 ],\n    b20 = b[ 6 ], b21 = b[ 7 ], b22 = b[ 8 ];\n\n  return [\n    a00 * b00 + a10 * b01 + a20 * b02,\n    a01 * b00 + a11 * b01 + a21 * b02,\n    a02 * b00 + a12 * b01 + a22 * b02,\n\n    a00 * b10 + a10 * b11 + a20 * b12,\n    a01 * b10 + a11 * b11 + a21 * b12,\n    a02 * b10 + a12 * b11 + a22 * b12,\n\n    a00 * b20 + a10 * b21 + a20 * b22,\n    a01 * b20 + a11 * b21 + a21 * b22,\n    a02 * b20 + a12 * b21 + a22 * b22,\n  ];\n}\n", "import type { RawMatrix3 } from './RawMatrix3';\n\n/**\n * Transpose a mat3.\n */\nexport function mat3Transpose(\n  source: RawMatrix3,\n): RawMatrix3 {\n  return [\n    source[ 0 ], source[ 3 ], source[ 6 ],\n    source[ 1 ], source[ 4 ], source[ 7 ],\n    source[ 2 ], source[ 5 ], source[ 8 ],\n  ];\n}\n", "import { Matrix4 } from '../mat4/Matrix4';\nimport { Quaternion } from '../quat/Quaternion';\nimport { mat3CreateNormalMatrix } from './mat3CreateNormalMatrix';\nimport { mat3Determinant } from './mat3Determinant';\nimport { mat3FromMat4 } from './mat3FromMat4';\nimport { mat3FromQuaternion } from './mat3FromQuaternion';\nimport { mat3Inverse } from './mat3Inverse';\nimport { mat3Multiply } from './mat3Multiply';\nimport { mat3Transpose } from './mat3Transpose';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawMatrix3 } from './RawMatrix3';\n\nconst rawIdentityMatrix3: RawMatrix3 = [\n  1.0, 0.0, 0.0,\n  0.0, 1.0, 0.0,\n  0.0, 0.0, 1.0,\n];\n\n/**\n * A Matrix3.\n */\nexport class Matrix3 {\n  public elements: RawMatrix3;\n\n  public constructor( v: RawMatrix3 = rawIdentityMatrix3 ) {\n    this.elements = v;\n  }\n\n  /**\n   * Itself but transposed.\n   */\n  public get transpose(): Matrix3 {\n    return new Matrix3( mat3Transpose( this.elements ) );\n  }\n\n  /**\n   * Its determinant.\n   */\n  public get determinant(): number {\n    return mat3Determinant( this.elements );\n  }\n\n  /**\n   * Itself but inverted.\n   */\n  public get inverse(): Matrix3 {\n    return new Matrix3( mat3Inverse( this.elements ) );\n  }\n\n  /**\n   * Itself but matrix4.\n   */\n  public get matrix4(): Matrix4 {\n    return Matrix4.fromMatrix3( this );\n  }\n\n  public toString(): string {\n    const m = this.elements.map( ( v ) => v.toFixed( 3 ) );\n    return `Matrix3( ${ m[ 0 ] }, ${ m[ 3 ] }, ${ m[ 6 ] }; ${ m[ 1 ] }, ${ m[ 4 ] }, ${ m[ 7 ] }; ${ m[ 2 ] }, ${ m[ 5 ] }, ${ m[ 8 ] } )`;\n  }\n\n  /**\n   * Clone this.\n   */\n  public clone(): Matrix3 {\n    return new Matrix3( this.elements.concat() as RawMatrix3 );\n  }\n\n  /**\n   * Multiply this Matrix3 by one or more Matrix3s.\n   */\n  public multiply( ...matrices: Matrix3[] ): Matrix3 {\n    return Matrix3.multiply( this, ...matrices );\n  }\n\n  /**\n   * Multiply this Matrix3 by a scalar.\n   */\n  public scaleScalar( scalar: number ): Matrix3 {\n    return new Matrix3( vecScale( this.elements, scalar ) );\n  }\n\n  /**\n   * An identity Matrix4.\n   */\n  public static get identity(): Matrix3 {\n    return new Matrix3( rawIdentityMatrix3 );\n  }\n\n  /**\n   * Multiply two or more matrices.\n   * @param matrices Matrices\n   */\n  public static multiply( ...matrices: Matrix3[] ): Matrix3 {\n    if ( matrices.length === 0 ) {\n      return Matrix3.identity;\n    } else {\n      return new Matrix3( mat3Multiply( ...matrices.map( ( m ) => m.elements ) ) );\n    }\n  }\n\n  /**\n   * Create a normal matrix out of matrix4.\n   * @param matrix4 A matrix4\n   */\n  public static createNormalMatrix( matrix4: Matrix4 ): Matrix3 {\n    return new Matrix3( mat3CreateNormalMatrix( matrix4.elements ) );\n  }\n\n  /**\n   * Cast a {@link Matrix4} into a Matrix3.\n   * @param matrix4 A matrix4\n   */\n  public static fromMatrix4( matrix4: Matrix4 ): Matrix3 {\n    return new Matrix3( mat3FromMat4( matrix4.elements ) );\n  }\n\n  /**\n   * Create a matrix out of a {@link Quaternion}.\n   * @param quaternion A quaternion\n   */\n  public static fromQuaternion( quaternion: Quaternion ): Matrix3 {\n    return new Matrix3( mat3FromQuaternion( quaternion.elements ) );\n  }\n}\n", "import type { RawMatrix4 } from '.';\nimport type { RawQuaternion } from '../quat/RawQuaternion';\n\n/**\n * Convert a quaternion into a matrix4.\n *\n * Yoinked from Three.js.\n *\n * See: https://threejs.org/docs/#api/en/math/Matrix4.makeRotationFromQuaternion\n */\nexport function mat4FromQuaternion( quat: RawQuaternion ): RawMatrix4 {\n  const x = quat[ 0 ];\n  const y = quat[ 1 ];\n  const z = quat[ 2 ];\n  const w = quat[ 3 ];\n\n  return [\n    1.0 - 2.0 * y * y - 2.0 * z * z, 2.0 * x * y + 2.0 * z * w, 2.0 * x * z - 2.0 * y * w, 0.0,\n    2.0 * x * y - 2.0 * z * w, 1.0 - 2.0 * x * x - 2.0 * z * z, 2.0 * y * z + 2.0 * x * w, 0.0,\n    2.0 * x * z + 2.0 * y * w, 2.0 * y * z - 2.0 * x * w, 1.0 - 2.0 * x * x - 2.0 * y * y, 0.0,\n    0.0, 0.0, 0.0, 1.0,\n  ];\n}\n", "import { mat4FromQuaternion } from './mat4FromQuaternion';\nimport type { RawMatrix4 } from './RawMatrix4';\nimport type { RawQuaternion } from '../quat/RawQuaternion';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Compose a matrix out of position, scale, and rotation.\n * Yoinked from Three.js.\n */\nexport function mat4Compose(\n  position: RawVector3,\n  rotation: RawQuaternion,\n  scale: RawVector3,\n): RawMatrix4 {\n  const matRot = mat4FromQuaternion( rotation );\n\n  const sx = scale[ 0 ], sy = scale[ 1 ], sz = scale[ 2 ];\n\n  return [\n    matRot[ 0 ] * sx,\n    matRot[ 1 ] * sx,\n    matRot[ 2 ] * sx,\n    0.0,\n\n    matRot[ 4 ] * sy,\n    matRot[ 5 ] * sy,\n    matRot[ 6 ] * sy,\n    0.0,\n\n    matRot[ 8 ] * sz,\n    matRot[ 9 ] * sz,\n    matRot[ 10 ] * sz,\n    0.0,\n\n    position[ 0 ],\n    position[ 1 ],\n    position[ 2 ],\n    1.0\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Return a determinant of given mat4.\n */\nexport function mat4Determinant( m: RawMatrix4 ): number {\n  const\n    a00 = m[  0 ], a01 = m[  1 ], a02 = m[  2 ], a03 = m[  3 ],\n    a10 = m[  4 ], a11 = m[  5 ], a12 = m[  6 ], a13 = m[  7 ],\n    a20 = m[  8 ], a21 = m[  9 ], a22 = m[ 10 ], a23 = m[ 11 ],\n    a30 = m[ 12 ], a31 = m[ 13 ], a32 = m[ 14 ], a33 = m[ 15 ],\n    b00 = a00 * a11 - a01 * a10,  b01 = a00 * a12 - a02 * a10,\n    b02 = a00 * a13 - a03 * a10,  b03 = a01 * a12 - a02 * a11,\n    b04 = a01 * a13 - a03 * a11,  b05 = a02 * a13 - a03 * a12,\n    b06 = a20 * a31 - a21 * a30,  b07 = a20 * a32 - a22 * a30,\n    b08 = a20 * a33 - a23 * a30,  b09 = a21 * a32 - a22 * a31,\n    b10 = a21 * a33 - a23 * a31,  b11 = a22 * a33 - a23 * a32;\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n", "import type { RawMatrix3 } from '../mat3/RawMatrix3';\nimport type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Generate a Quaternion out of a rotation matrix.\n * Yoinked from Three.js.\n */\nexport function quatFromMatrix3( m: RawMatrix3 ): RawQuaternion {\n  const m11 = m[ 0 ], m12 = m[ 3 ], m13 = m[ 6 ],\n    m21 = m[ 1 ], m22 = m[ 4 ], m23 = m[ 7 ],\n    m31 = m[ 2 ], m32 = m[ 5 ], m33 = m[ 8 ],\n    trace = m11 + m22 + m33;\n\n  if ( trace > 0 ) {\n    const s = 0.5 / Math.sqrt( trace + 1.0 );\n    return [\n      ( m32 - m23 ) * s,\n      ( m13 - m31 ) * s,\n      ( m21 - m12 ) * s,\n      0.25 / s\n    ];\n  } else if ( m11 > m22 && m11 > m33 ) {\n    const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n    return [\n      0.25 * s,\n      ( m12 + m21 ) / s,\n      ( m13 + m31 ) / s,\n      ( m32 - m23 ) / s\n    ];\n  } else if ( m22 > m33 ) {\n    const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n    return [\n      ( m12 + m21 ) / s,\n      0.25 * s,\n      ( m23 + m32 ) / s,\n      ( m13 - m31 ) / s\n    ];\n  } else {\n    const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n    return [\n      ( m13 + m31 ) / s,\n      ( m23 + m32 ) / s,\n      0.25 * s,\n      ( m21 - m12 ) / s\n    ];\n  }\n}\n", "import { mat3FromMat4 } from '../mat3/mat3FromMat4';\nimport { quatFromMatrix3 } from './quatFromMatrix3';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\nimport type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Generate a Quaternion out of a rotation matrix.\n */\nexport function quatFromMatrix4( m: RawMatrix4 ): RawQuaternion {\n  return quatFromMatrix3( mat3FromMat4( m ) );\n}\n", "import { mat4Determinant } from './mat4Determinant';\nimport { quatFromMatrix4 } from '../quat/quatFromMatrix4';\nimport { vecLength } from '../vec/vecLength';\nimport type { RawMatrix4 } from './RawMatrix4';\nimport type { RawQuaternion } from '../quat/RawQuaternion';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Decompose a matrix into a position, a scale, and a rotation.\n * Yoinked from Three.js.\n */\nexport function mat4Decompose( m: RawMatrix4 ): {\n  position: RawVector3;\n  scale: RawVector3;\n  rotation: RawQuaternion;\n} {\n  let sx = vecLength( [ m[ 0 ], m[ 1 ], m[ 2 ] ] );\n  const sy = vecLength( [ m[ 4 ], m[ 5 ], m[ 6 ] ] );\n  const sz = vecLength( [ m[ 8 ], m[ 9 ], m[ 10 ] ] );\n\n  // if determinant is negative, we need to invert one scale\n  const det = mat4Determinant( m );\n  if ( det < 0 ) { sx = -sx; }\n\n  const invSx = 1.0 / sx;\n  const invSy = 1.0 / sy;\n  const invSz = 1.0 / sz;\n\n  const rotationMatrix = m.concat() as RawMatrix4;\n\n  rotationMatrix[ 0 ] *= invSx;\n  rotationMatrix[ 1 ] *= invSx;\n  rotationMatrix[ 2 ] *= invSx;\n\n  rotationMatrix[ 4 ] *= invSy;\n  rotationMatrix[ 5 ] *= invSy;\n  rotationMatrix[ 6 ] *= invSy;\n\n  rotationMatrix[ 8 ] *= invSz;\n  rotationMatrix[ 9 ] *= invSz;\n  rotationMatrix[ 10 ] *= invSz;\n\n  return {\n    position: [ m[ 12 ], m[ 13 ], m[ 14 ] ],\n    scale: [ sx, sy, sz ],\n    rotation: quatFromMatrix4( rotationMatrix ),\n  };\n}\n", "import type { RawMatrix3 } from '../mat3/RawMatrix3';\nimport type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Create a matrix4 from matrix3.\n */\nexport function mat4FromMat3(\n  source: RawMatrix3,\n): RawMatrix4 {\n  return [\n    source[ 0 ], source[ 1 ], source[ 2 ], 0.0,\n    source[ 3 ], source[ 4 ], source[ 5 ], 0.0,\n    source[ 6 ], source[ 7 ], source[ 8 ], 0.0,\n    0.0, 0.0, 0.0, 1.0,\n  ];\n}\n", "import { vecScale } from '../vec/vecScale';\nimport type { RawMatrix4 } from './RawMatrix4';\n\n/**\n *  an inverse of given mat4.\n */\nexport function mat4Inverse( m: RawMatrix4 ): RawMatrix4 {\n  const\n    a00 = m[  0 ], a01 = m[  1 ], a02 = m[  2 ], a03 = m[  3 ],\n    a10 = m[  4 ], a11 = m[  5 ], a12 = m[  6 ], a13 = m[  7 ],\n    a20 = m[  8 ], a21 = m[  9 ], a22 = m[ 10 ], a23 = m[ 11 ],\n    a30 = m[ 12 ], a31 = m[ 13 ], a32 = m[ 14 ], a33 = m[ 15 ],\n    b00 = a00 * a11 - a01 * a10,  b01 = a00 * a12 - a02 * a10,\n    b02 = a00 * a13 - a03 * a10,  b03 = a01 * a12 - a02 * a11,\n    b04 = a01 * a13 - a03 * a11,  b05 = a02 * a13 - a03 * a12,\n    b06 = a20 * a31 - a21 * a30,  b07 = a20 * a32 - a22 * a30,\n    b08 = a20 * a33 - a23 * a30,  b09 = a21 * a32 - a22 * a31,\n    b10 = a21 * a33 - a23 * a31,  b11 = a22 * a33 - a23 * a32;\n\n  const det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if ( det === 0.0 ) { return vecScale( m, 0.0 ); }\n\n  return vecScale( [\n    a11 * b11 - a12 * b10 + a13 * b09,\n    a02 * b10 - a01 * b11 - a03 * b09,\n    a31 * b05 - a32 * b04 + a33 * b03,\n    a22 * b04 - a21 * b05 - a23 * b03,\n    a12 * b08 - a10 * b11 - a13 * b07,\n    a00 * b11 - a02 * b08 + a03 * b07,\n    a32 * b02 - a30 * b05 - a33 * b01,\n    a20 * b05 - a22 * b02 + a23 * b01,\n    a10 * b10 - a11 * b08 + a13 * b06,\n    a01 * b08 - a00 * b10 - a03 * b06,\n    a30 * b04 - a31 * b02 + a33 * b00,\n    a21 * b02 - a20 * b04 - a23 * b00,\n    a11 * b07 - a10 * b09 - a12 * b06,\n    a00 * b09 - a01 * b07 + a02 * b06,\n    a31 * b01 - a30 * b03 - a32 * b00,\n    a20 * b03 - a21 * b01 + a22 * b00,\n  ], 1.0 / det );\n}\n", "import { vec3Cross } from '../vec3/vec3Cross';\nimport { vecAdd } from '../vec/vecAdd';\nimport { vecNormalize } from '../vec/vecNormalize';\nimport { vecScale } from '../vec/vecScale';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawMatrix4 } from './RawMatrix4';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Generate a \"LookAt\" matrix.\n *\n * See also: {@link mat4LookAtInverse}\n */\nexport function mat4LookAt(\n  position: RawVector3,\n  target: RawVector3 = [ 0.0, 0.0, 0.0 ],\n  up: RawVector3 = [ 0.0, 1.0, 0.0 ],\n  roll = 0.0,\n): RawMatrix4 {\n  const dir = vecNormalize( vecSub( position, target ) );\n\n  let sid = vecNormalize( vec3Cross( up, dir ) );\n\n  if ( roll !== 0.0 ) {\n    sid = vecAdd(\n      vecScale( sid, Math.cos( roll ) ),\n      vecScale( vec3Cross( dir, sid ), Math.sin( roll ) ),\n    );\n  }\n\n  const top = vec3Cross( dir, sid );\n\n  return [\n    sid[ 0 ], sid[ 1 ], sid[ 2 ], 0.0,\n    top[ 0 ], top[ 1 ], top[ 2 ], 0.0,\n    dir[ 0 ], dir[ 1 ], dir[ 2 ], 0.0,\n    position[ 0 ], position[ 1 ], position[ 2 ], 1.0\n  ];\n}\n", "import { vec3Cross } from '../vec3/vec3Cross';\nimport { vecAdd } from '../vec/vecAdd';\nimport { vecDot } from '../vec/vecDot';\nimport { vecNormalize } from '../vec/vecNormalize';\nimport { vecScale } from '../vec/vecScale';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawMatrix4 } from './RawMatrix4';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Generate an inverse of \"LookAt\" matrix. Good for creating a view matrix.\n *\n * See also: {@link mat4LookAt}\n */\nexport function mat4LookAtInverse(\n  position: RawVector3,\n  target: RawVector3 = [ 0.0, 0.0, 0.0 ],\n  up: RawVector3 = [ 0.0, 1.0, 0.0 ],\n  roll = 0.0,\n): RawMatrix4 {\n  const dir = vecNormalize( vecSub( position, target ) );\n\n  let sid = vecNormalize( vec3Cross( up, dir ) );\n\n  if ( roll !== 0.0 ) {\n    sid = vecAdd(\n      vecScale( sid, Math.cos( roll ) ),\n      vecScale( vec3Cross( dir, sid ), Math.sin( roll ) ),\n    );\n  }\n\n  const top = vec3Cross( dir, sid );\n\n  return [\n    sid[ 0 ], top[ 0 ], dir[ 0 ], 0.0,\n    sid[ 1 ], top[ 1 ], dir[ 1 ], 0.0,\n    sid[ 2 ], top[ 2 ], dir[ 2 ], 0.0,\n    -vecDot( sid, position ),\n    -vecDot( top, position ),\n    -vecDot( dir, position ),\n    1.0,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Return a multiplication result of matrices.\n */\nexport function mat4Multiply( ...mats: RawMatrix4[] ): RawMatrix4 {\n  if ( mats.length < 2 ) {\n    return mats[ 0 ];\n  }\n\n  const a = mats.shift()!;\n  const b = mat4Multiply( ...mats );\n  const\n    a00 = a[  0 ], a01 = a[  1 ], a02 = a[  2 ], a03 = a[  3 ],\n    a10 = a[  4 ], a11 = a[  5 ], a12 = a[  6 ], a13 = a[  7 ],\n    a20 = a[  8 ], a21 = a[  9 ], a22 = a[ 10 ], a23 = a[ 11 ],\n    a30 = a[ 12 ], a31 = a[ 13 ], a32 = a[ 14 ], a33 = a[ 15 ],\n    b00 = b[  0 ], b01 = b[  1 ], b02 = b[  2 ], b03 = b[  3 ],\n    b10 = b[  4 ], b11 = b[  5 ], b12 = b[  6 ], b13 = b[  7 ],\n    b20 = b[  8 ], b21 = b[  9 ], b22 = b[ 10 ], b23 = b[ 11 ],\n    b30 = b[ 12 ], b31 = b[ 13 ], b32 = b[ 14 ], b33 = b[ 15 ];\n\n  return [\n    a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03,\n    a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03,\n    a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03,\n    a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03,\n\n    a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13,\n    a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13,\n    a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13,\n    a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13,\n\n    a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23,\n    a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23,\n    a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23,\n    a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23,\n\n    a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33,\n    a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33,\n    a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33,\n    a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Generate a \"Perspective\" projection matrix.\n *\n * @param fov Field of View Y, **IN DEGREES**\n * @param near Near clip plane\n * @param far Far clip plane\n * @param aspect Aspect ratio. **`1.0` BY DEFAULT**\n */\nexport function mat4Perspective(\n  fov = 45.0,\n  near = 0.01,\n  far = 100.0,\n  aspect = 1.0,\n): RawMatrix4 {\n  const p = 1.0 / Math.tan( fov * Math.PI / 360.0 );\n  const d = ( far - near );\n  return [\n    p / aspect, 0.0, 0.0, 0.0,\n    0.0, p, 0.0, 0.0,\n    0.0, 0.0, -( far + near ) / d, -1.0,\n    0.0, 0.0, -2 * far * near / d, 0.0\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Generate a 3d rotation matrix, rotates around x axis.\n */\nexport function mat4RotationX( theta: number ): RawMatrix4 {\n  const c = Math.cos( theta );\n  const s = Math.sin( theta );\n\n  return [\n    1, 0, 0, 0,\n    0, c, -s, 0,\n    0, s, c, 0,\n    0, 0, 0, 1,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Generate a 3d rotation matrix, rotates around y axis.\n */\nexport function mat4RotationY( theta: number ): RawMatrix4 {\n  const c = Math.cos( theta );\n  const s = Math.sin( theta );\n\n  return [\n    c, 0, s, 0,\n    0, 1, 0, 0,\n    -s, 0, c, 0,\n    0, 0, 0, 1,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Generate a 3d rotation matrix, rotates around z axis.\n */\nexport function mat4RotationZ( theta: number ): RawMatrix4 {\n  const c = Math.cos( theta );\n  const s = Math.sin( theta );\n\n  return [\n    c, -s, 0, 0,\n    s, c, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Generate a 3d scaling matrix.\n */\nexport function mat4Scale( vec: RawVector3 ): RawMatrix4 {\n  return [\n    vec[ 0 ], 0, 0, 0,\n    0, vec[ 1 ], 0, 0,\n    0, 0, vec[ 2 ], 0,\n    0, 0, 0, 1,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Generate a 3d scaling matrix by a scalar.\n */\nexport function mat4ScaleScalar( scalar: number ): RawMatrix4 {\n  return [\n    scalar, 0, 0, 0,\n    0, scalar, 0, 0,\n    0, 0, scalar, 0,\n    0, 0, 0, 1,\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Generate a translation matrix.\n */\nexport function mat4Translate( vec: RawVector3 ): RawMatrix4 {\n  return [\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    vec[ 0 ], vec[ 1 ], vec[ 2 ], 1\n  ];\n}\n", "import type { RawMatrix4 } from './RawMatrix4';\n\n/**\n * Transpose a mat4.\n */\nexport function mat4Transpose( m: RawMatrix4 ): RawMatrix4 {\n  return [\n    m[ 0 ], m[ 4 ], m[ 8 ], m[ 12 ],\n    m[ 1 ], m[ 5 ], m[ 9 ], m[ 13 ],\n    m[ 2 ], m[ 6 ], m[ 10 ], m[ 14 ],\n    m[ 3 ], m[ 7 ], m[ 11 ], m[ 15 ],\n  ];\n}\n", "import { Matrix3 } from '../mat3/Matrix3';\nimport { Quaternion } from '../quat/Quaternion';\nimport { Vector3 } from '../vec3/Vector3';\nimport { mat4Compose } from './mat4Compose';\nimport { mat4Decompose } from './mat4Decompose';\nimport { mat4Determinant } from './mat4Determinant';\nimport { mat4FromMat3 } from './mat4FromMat3';\nimport { mat4FromQuaternion } from './mat4FromQuaternion';\nimport { mat4Inverse } from './mat4Inverse';\nimport { mat4LookAt } from './mat4LookAt';\nimport { mat4LookAtInverse } from './mat4LookAtInverse';\nimport { mat4Multiply } from './mat4Multiply';\nimport { mat4Perspective } from './mat4Perspective';\nimport { mat4RotationX } from './mat4RotationX';\nimport { mat4RotationY } from './mat4RotationY';\nimport { mat4RotationZ } from './mat4RotationZ';\nimport { mat4Scale } from './mat4Scale';\nimport { mat4ScaleScalar } from './mat4ScaleScalar';\nimport { mat4Translate } from './mat4Translate';\nimport { mat4Transpose } from './mat4Transpose';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawMatrix4 } from './RawMatrix4';\n\nconst rawIdentityMatrix4: RawMatrix4 = [\n  1.0, 0.0, 0.0, 0.0,\n  0.0, 1.0, 0.0, 0.0,\n  0.0, 0.0, 1.0, 0.0,\n  0.0, 0.0, 0.0, 1.0\n];\n\n/**\n * A Matrix4.\n */\nexport class Matrix4 {\n  public elements: RawMatrix4;\n\n  public constructor( v: RawMatrix4 = rawIdentityMatrix4 ) {\n    this.elements = v;\n  }\n\n  /**\n   * Itself but transposed.\n   */\n  public get transpose(): Matrix4 {\n    return new Matrix4( mat4Transpose( this.elements ) );\n  }\n\n  /**\n   * Its determinant.\n   */\n  public get determinant(): number {\n    return mat4Determinant( this.elements );\n  }\n\n  /**\n   * Itself but inverted.\n   */\n  public get inverse(): Matrix4 {\n    return new Matrix4( mat4Inverse( this.elements ) );\n  }\n\n  /**\n   * Itself but matrix3.\n   */\n  public get matrix3(): Matrix3 {\n    return Matrix3.fromMatrix4( this );\n  }\n\n  /**\n   * Itself but normal matrix.\n   */\n  public get normalMatrix(): Matrix3 {\n    return Matrix3.createNormalMatrix( this );\n  }\n\n  public toString(): string {\n    const m = this.elements.map( ( v ) => v.toFixed( 3 ) );\n    return `Matrix4( ${ m[ 0 ] }, ${ m[ 4 ] }, ${ m[ 8 ] }, ${ m[ 12 ] }; ${ m[ 1 ] }, ${ m[ 5 ] }, ${ m[ 9 ] }, ${ m[ 13 ] }; ${ m[ 2 ] }, ${ m[ 6 ] }, ${ m[ 10 ] }, ${ m[ 14 ] }; ${ m[ 3 ] }, ${ m[ 7 ] }, ${ m[ 11 ] }, ${ m[ 15 ] } )`;\n  }\n\n  /**\n   * Clone this.\n   */\n  public clone(): Matrix4 {\n    return new Matrix4( this.elements.concat() as RawMatrix4 );\n  }\n\n  /**\n   * Multiply this Matrix4 by one or more Matrix4s.\n   */\n  public multiply( ...matrices: Matrix4[] ): Matrix4 {\n    return Matrix4.multiply( this, ...matrices );\n  }\n\n  /**\n   * Multiply this Matrix4 by a scalar.\n   */\n  public scaleScalar( scalar: number ): Matrix4 {\n    return new Matrix4( vecScale( this.elements, scalar ) );\n  }\n\n  /**\n   * Decompose this matrix into a position, a scale, and a rotation.\n   */\n  public decompose(): { position: Vector3; scale: Vector3; rotation: Quaternion } {\n    const { position, scale, rotation } = mat4Decompose( this.elements );\n\n    return {\n      position: new Vector3( position ),\n      scale: new Vector3( scale ),\n      rotation: new Quaternion( rotation ),\n    };\n  }\n\n  /**\n   * An identity Matrix4.\n   */\n  public static get identity(): Matrix4 {\n    return new Matrix4( rawIdentityMatrix4 );\n  }\n\n  /**\n   * Multiply two or more matrices.\n   * @param matrices Matrices\n   */\n  public static multiply( ...matrices: Matrix4[] ): Matrix4 {\n    if ( matrices.length === 0 ) {\n      return Matrix4.identity;\n    } else {\n      return new Matrix4( mat4Multiply( ...matrices.map( ( m ) => m.elements ) ) );\n    }\n  }\n\n  /**\n   * Create a matrix out of a {@link Quaternion}.\n   * @param quaternion A quaternion\n   */\n  public static fromQuaternion( quaternion: Quaternion ): Matrix4 {\n    return new Matrix4( mat4FromQuaternion( quaternion.elements ) );\n  }\n\n  /**\n   * Cast a {@link Matrix3} into a Matrix4.\n   * @param matrix3 A matrix3\n   */\n  public static fromMatrix3( matrix3: Matrix3 ): Matrix4 {\n    return new Matrix4( mat4FromMat3( matrix3.elements ) );\n  }\n\n  /**\n   * Generate a translation matrix.\n   * @param vector Translation\n   */\n  public static translate( vector: Vector3 ): Matrix4 {\n    return new Matrix4( mat4Translate( vector.elements ) );\n  }\n\n  /**\n   * Generate a 3d scaling matrix.\n   * @param vector Scale\n   */\n  public static scale( vector: Vector3 ): Matrix4 {\n    return new Matrix4( mat4Scale( vector.elements ) );\n  }\n\n  /**\n   * Generate a 3d scaling matrix by a scalar.\n   * @param vector Scale\n   */\n  public static scaleScalar( scalar: number ): Matrix4 {\n    return new Matrix4( mat4ScaleScalar( scalar ) );\n  }\n\n  /**\n   * Generate a 3d rotation matrix, rotates around x axis.\n   * @param vector Scale\n   */\n  public static rotationX( theta: number ): Matrix4 {\n    return new Matrix4( mat4RotationX( theta ) );\n  }\n\n  /**\n   * Generate a 3d rotation matrix, rotates around y axis.\n   * @param vector Scale\n   */\n  public static rotationY( theta: number ): Matrix4 {\n    return new Matrix4( mat4RotationY( theta ) );\n  }\n\n  /**\n   * Generate a 3d rotation matrix, rotates around z axis.\n   * @param vector Scale\n   */\n  public static rotationZ( theta: number ): Matrix4 {\n    return new Matrix4( mat4RotationZ( theta ) );\n  }\n\n  /**\n   * Generate a \"LookAt\" matrix.\n   *\n   * See also: {@link lookAtInverse}\n   */\n  public static lookAt(\n    position: Vector3,\n    target = new Vector3( [ 0.0, 0.0, 0.0 ] ),\n    up = new Vector3( [ 0.0, 1.0, 0.0 ] ),\n    roll = 0.0\n  ): Matrix4 {\n    return new Matrix4( mat4LookAt(\n      position.elements,\n      target.elements,\n      up.elements,\n      roll,\n    ) );\n  }\n\n  /**\n   * Generate an inverse of \"LookAt\" matrix. Good for creating a view matrix.\n   *\n   * See also: {@link lookAt}\n   */\n  public static lookAtInverse(\n    position: Vector3,\n    target = new Vector3( [ 0.0, 0.0, 0.0 ] ),\n    up = new Vector3( [ 0.0, 1.0, 0.0 ] ),\n    roll = 0.0\n  ): Matrix4 {\n    return new Matrix4( mat4LookAtInverse(\n      position.elements,\n      target.elements,\n      up.elements,\n      roll,\n    ) );\n  }\n\n  /**\n   * Generate a \"Perspective\" projection matrix.\n   * It won't include aspect!\n   */\n  public static perspective( fov = 45.0, near = 0.01, far = 100.0 ): Matrix4 {\n    return new Matrix4( mat4Perspective( fov, near, far ) );\n  }\n\n  /**\n   * Compose a matrix out of position, scale, and rotation.\n   * Yoinked from Three.js.\n   */\n  public static compose( position: Vector3, rotation: Quaternion, scale: Vector3 ): Matrix4 {\n    return new Matrix4( mat4Compose( position.elements, rotation.elements, scale.elements ) );\n  }\n}\n", "import type { RawQuaternion } from './RawQuaternion';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Generate a Quaternion out of axis and angle.\n */\nexport function quatFromAxisAngle( axis: RawVector3, angle: number ): RawQuaternion {\n  const halfAngle = angle / 2.0;\n  const sinHalfAngle = Math.sin( halfAngle );\n  return [\n    axis[ 0 ] * sinHalfAngle,\n    axis[ 1 ] * sinHalfAngle,\n    axis[ 2 ] * sinHalfAngle,\n    Math.cos( halfAngle )\n  ];\n}\n", "import { vec3OrthoNormalize } from '../vec3/vec3OrthoNormalize';\nimport type { RawQuaternion } from './RawQuaternion';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a quaternion which looks at the direction of `look`.\n */\nexport function quatLookRotation( look: RawVector3, up?: RawVector3 ): RawQuaternion {\n  const { normal, tangent, binormal } = vec3OrthoNormalize( look, up ?? [ 0.0, 1.0, 0.0 ] );\n\n  const w = Math.sqrt( 1.0 + binormal[ 0 ] + tangent[ 1 ] + normal[ 2 ] ) * 0.5;\n  const invW4 = 0.25 / w;\n\n  return [\n    ( tangent[ 2 ] - normal[ 1 ] ) * invW4,\n    ( normal[ 0 ] - binormal[ 2 ] ) * invW4,\n    ( binormal[ 1 ] - tangent[ 0 ] ) * invW4,\n    w,\n  ];\n}\n", "import { vecLength } from '../vec/vecLength';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Normalize given quaternion.\n *\n * It's almost identical as {@link vecNormalize},\n * but it will return an identity quaternion instead\n * when it recieves a quaternion which length is zero.\n */\nexport function quatNormalize( vec: RawQuaternion ): RawQuaternion {\n  const len = vecLength( vec );\n  if ( len === 0.0 ) {\n    return [ 0.0, 0.0, 0.0, 1.0 ];\n  }\n  return vecScale( vec, 1.0 / len );\n}\n", "import type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Generate a quaternion rotates around x axis.\n * @param theta An angle around x axis, in degree\n */\nexport function quatRotationX( theta: number ): RawQuaternion {\n  return [ Math.sin( theta / 2.0 ), 0.0, 0.0, Math.cos( theta / 2.0 ) ];\n}\n", "import type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Generate a quaternion rotates around y axis.\n * @param theta An angle around y axis, in degree\n */\nexport function quatRotationY( theta: number ): RawQuaternion {\n  return [ 0.0, Math.sin( theta / 2.0 ), 0.0, Math.cos( theta / 2.0 ) ];\n}\n", "import type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Generate a quaternion rotates around z axis.\n * @param theta An angle around z axis, in degree\n */\nexport function quatRotationZ( theta: number ): RawQuaternion {\n  return [ 0.0, 0.0, Math.sin( theta / 2.0 ), Math.cos( theta / 2.0 ) ];\n}\n", "import { vecDot, vecNeg, vecNormalize } from '..';\nimport type { RawQuaternion } from './RawQuaternion';\n\n/**\n * Interpolate between two quaternions.\n * @param a \"from\" quaternion\n * @param b \"to\" quaternion\n * @param t How much do we want to rotate the a to b\n */\nexport function quatSlerp( a: RawQuaternion, b: RawQuaternion, t: number ): RawQuaternion {\n  if ( t === 0.0 ) { return a.concat() as RawQuaternion; }\n  if ( t === 1.0 ) { return b.concat() as RawQuaternion; }\n\n  // Ref: https://github.com/mrdoob/three.js/blob/master/src/math/Quaternion.js\n  // Ref: http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n  let cosHalfTheta = vecDot( a, b );\n\n  if ( cosHalfTheta < 0.0 ) {\n    b = vecNeg( b );\n    cosHalfTheta = -cosHalfTheta;\n  }\n\n  // I think you two are same\n  if ( cosHalfTheta >= 1.0 ) {\n    return a.concat() as RawQuaternion;\n  }\n\n  const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n  // fallback to simple lerp\n  if ( sqrSinHalfTheta <= Number.EPSILON ) {\n    const s = 1.0 - t;\n\n    return vecNormalize( [\n      s * a[ 0 ] + t * b[ 0 ],\n      s * a[ 1 ] + t * b[ 1 ],\n      s * a[ 2 ] + t * b[ 2 ],\n      s * a[ 3 ] + t * b[ 3 ],\n    ] );\n  }\n\n  // welcome\n  const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n  const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n  const ratioA = Math.sin( ( 1.0 - t ) * halfTheta ) / sinHalfTheta;\n  const ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n  return [\n    a[ 0 ] * ratioA + b[ 0 ] * ratioB,\n    a[ 1 ] * ratioA + b[ 1 ] * ratioB,\n    a[ 2 ] * ratioA + b[ 2 ] * ratioB,\n    a[ 3 ] * ratioA + b[ 3 ] * ratioB,\n  ];\n}\n", "import { Matrix4 } from '../mat4/Matrix4';\nimport { Vector3 } from '../vec3/Vector3';\nimport { mat4FromQuaternion } from '../mat4/mat4FromQuaternion';\nimport { quatFromAxisAngle } from './quatFromAxisAngle';\nimport { quatFromMatrix4 } from './quatFromMatrix4';\nimport { quatInverse } from './quatInverse';\nimport { quatLookRotation } from './quatLookRotation';\nimport { quatMultiply } from './quatMultiply';\nimport { quatNormalize } from './quatNormalize';\nimport { quatRotationX } from './quatRotationX';\nimport { quatRotationY } from './quatRotationY';\nimport { quatRotationZ } from './quatRotationZ';\nimport { quatSlerp } from './quatSlerp';\nimport { vecLength } from '../vec/vecLength';\nimport { vecLengthSq } from '../vec/vecLengthSq';\nimport type { RawQuaternion } from './RawQuaternion';\n\nconst rawIdentityQuaternion: RawQuaternion = [ 0.0, 0.0, 0.0, 1.0 ];\n\n/**\n * A Quaternion.\n */\nexport class Quaternion {\n  public elements: RawQuaternion; // [ x, y, z; w ]\n\n  public constructor( elements: RawQuaternion = rawIdentityQuaternion ) {\n    this.elements = elements;\n  }\n\n  /**\n   * An x component of this.\n   */\n  public get x(): number {\n    return this.elements[ 0 ];\n  }\n\n  /**\n   * An y component of this.\n   */\n  public get y(): number {\n    return this.elements[ 1 ];\n  }\n\n  /**\n   * An z component of this.\n   */\n  public get z(): number {\n    return this.elements[ 2 ];\n  }\n\n  /**\n   * An w component of this.\n   */\n  public get w(): number {\n    return this.elements[ 3 ];\n  }\n\n  public toString(): string {\n    return `Quaternion( ${ this.x.toFixed( 3 ) }, ${ this.y.toFixed( 3 ) }, ${ this.z.toFixed( 3 ) }, ${ this.w.toFixed( 3 ) } )`;\n  }\n\n  /**\n   * Clone this.\n   */\n  public clone(): Quaternion {\n    return new Quaternion( this.elements.concat() as RawQuaternion );\n  }\n\n  /**\n   * Itself but converted into a Matrix4.\n   */\n  public get matrix4(): Matrix4 {\n    return new Matrix4( mat4FromQuaternion( this.elements ) );\n  }\n\n  /**\n   * An inverse of this.\n   */\n  public get inversed(): Quaternion {\n    return new Quaternion( quatInverse( this.elements ) );\n  }\n\n  /**\n   * The length of this.\n   */\n  public get length(): number {\n    return vecLength( this.elements );\n  }\n\n  /**\n   * The squared length of this.\n   */\n  public get lengthSq(): number {\n    return vecLengthSq( this.elements );\n  }\n\n  /**\n   * A normalized this.\n   */\n  public get normalized(): Quaternion {\n    return new Quaternion( quatNormalize( this.elements ) );\n  }\n\n  /**\n   * Multiply one or more Quaternions with this.\n   * @param quaternions Other Quaternions\n   */\n  public multiply( ...quaternions: Quaternion[] ): Quaternion {\n    return Quaternion.multiply( this, ...quaternions );\n  }\n\n  /**\n   * Interpolate between this and given quaternion.\n   * @param b Another Quaternion\n   * @param t How much do we want to rotate this to b\n   */\n  public slerp( b: Quaternion, t: number ): Quaternion {\n    return Quaternion.slerp( this, b, t );\n  }\n\n  /**\n   * An identity Quaternion.\n   */\n  public static get identity(): Quaternion {\n    return new Quaternion( rawIdentityQuaternion );\n  }\n\n  /**\n   * Multiply two or more matrices.\n   * @param quaternion Quaternions\n   */\n  public static multiply( ...quaternions: Quaternion[] ): Quaternion {\n    if ( quaternions.length === 0 ) {\n      return Quaternion.identity;\n    } else {\n      return new Quaternion( quatMultiply( ...quaternions.map( ( q ) => q.elements ) ) );\n    }\n  }\n\n  /**\n   * Interpolate between two quaternions.\n   * @param a \"from\" quaternion\n   * @param b \"to\" quaternion\n   * @param t How much do we want to rotate the a to b\n   */\n  public static slerp( a: Quaternion, b: Quaternion, t: number ): Quaternion {\n    return new Quaternion( quatSlerp( a.elements, b.elements, t ) );\n  }\n\n  /**\n   * Return a quaternion which rotates around x axis.\n   * @param theta An angle around x axis, in degree\n   */\n  public static rotationX( theta: number ): Quaternion {\n    return new Quaternion( quatRotationX( theta ) );\n  }\n\n  /**\n   * Return a quaternion which rotates around y axis.\n   * @param theta An angle around y axis, in degree\n   */\n  public static rotationY( theta: number ): Quaternion {\n    return new Quaternion( quatRotationY( theta ) );\n  }\n\n  /**\n   * Return a quaternion which rotates around z axis.\n   * @param theta An angle around z axis, in degree\n   */\n  public static rotationZ( theta: number ): Quaternion {\n    return new Quaternion( quatRotationZ( theta ) );\n  }\n\n  /**\n   * Return a quaternion which looks at the direction of `look`.\n   * @param look Position where the quaternion will look at\n   * @param up The \"up vector\"\n   */\n  public static lookRotation( look: Vector3, up: Vector3 ): Quaternion {\n    return new Quaternion( quatLookRotation( look.elements, up.elements ) );\n  }\n\n  /**\n   * Generate a Quaternion out of angle and axis.\n   */\n  public static fromAxisAngle( axis: Vector3, angle: number ): Quaternion {\n    return new Quaternion( quatFromAxisAngle( axis.elements, angle ) );\n  }\n\n  /**\n   * Generate a Quaternion out of a rotation matrix.\n   */\n  public static fromMatrix4( matrix: Matrix4 ): Quaternion {\n    return new Quaternion( quatFromMatrix4( matrix.elements ) );\n  }\n}\n", "/**\n * GLSL Style `mod` function.\n * \"compute value of one parameter modulo another\"\n */\nexport function mod( value: number, divisor: number ): number {\n  return value - Math.floor( value / divisor ) * divisor;\n}\n", "import { mod } from './mod';\n\n/**\n * Enclose arbitrary angle (in radian) into [-\u03C0, \u03C0)\n */\nexport function sanitizeAngle( angle: number ): number {\n  return mod( angle + Math.PI, 2.0 * Math.PI ) - Math.PI;\n}\n", "import { clamp } from '../utils';\nimport { sanitizeAngle } from '../sanitizeAngle';\nimport { vecManhattanLength } from '../vec/vecManhattanLength';\nimport type { EulerOrder } from './EulerOrder';\nimport type { RawMatrix3 } from '../mat3/RawMatrix3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a euler angles out of a matrix3.\n * Make sure the input matrix is normalized.\n *\n * @param m An input rotation matrix\n * @param order An order of output euler angles. Assume as `XYZ` if not specified\n */\nexport function eulerFromMat3( m: RawMatrix3, order?: EulerOrder ): RawVector3 {\n  const [ i, j, k, sign ] =\n    !order || order === 'XYZ' ? [ 0, 1, 2, 1 ] :\n    order === 'XZY' ? [ 0, 2, 1, -1 ] :\n    order === 'YXZ' ? [ 1, 0, 2, -1 ] :\n    order === 'YZX' ? [ 1, 2, 0, 1 ] :\n    order === 'ZXY' ? [ 2, 0, 1, 1 ] :\n    [ 2, 1, 0, -1 ];\n\n  const result: RawVector3 = [ 0.0, 0.0, 0.0 ];\n\n  const c = m[ k + i * 3 ];\n  result[ j ] = -sign * Math.asin( clamp( c, -1.0, 1.0 ) );\n\n  if ( Math.abs( c ) < 0.999999 ) {\n    result[ i ] = sign * Math.atan2( m[ k + j * 3 ], m[ k * 4 ] );\n    result[ k ] = sign * Math.atan2( m[ j + i * 3 ], m[ i * 4 ] );\n  } else {\n    // \"y is 90deg\" cases\n    result[ i ] = sign * Math.atan2( -m[ j + k * 3 ], m[ j * 4 ] );\n  }\n\n  if ( vecManhattanLength( result ) > 1.5 * Math.PI ) {\n    // \"two big revolutions\" cases\n    result[ i ] = sanitizeAngle( result[ i ] + Math.PI );\n    result[ j ] = sanitizeAngle( Math.PI - result[ j ] );\n    result[ k ] = sanitizeAngle( result[ k ] + Math.PI );\n  }\n\n  return result;\n}\n", "import { eulerFromMat3 } from './eulerFromMat3';\nimport { mat3FromMat4 } from '../mat3/mat3FromMat4';\nimport type { EulerOrder } from './EulerOrder';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a euler angles out of a matrix4.\n * Make sure the input matrix is normalized.\n *\n * @param m An input rotation matrix\n * @param order An order of output euler angles. Assume as `XYZ` if not specified\n */\nexport function eulerFromMat4( m: RawMatrix4, order?: EulerOrder ): RawVector3 {\n  return eulerFromMat3( mat3FromMat4( m ), order );\n}\n", "import { eulerFromMat3 } from './eulerFromMat3';\nimport { mat3FromQuaternion } from '../mat3/mat3FromQuaternion';\nimport type { EulerOrder } from './EulerOrder';\nimport type { RawQuaternion } from '../quat/RawQuaternion';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a euler angles out of a quaternion.\n *\n * @param m An input quaternion\n * @param order An order of output euler angles. Assume as `XYZ` if not specified\n */\nexport function eulerFromQuaternion( m: RawQuaternion, order?: EulerOrder ): RawVector3 {\n  return eulerFromMat3( mat3FromQuaternion( m ), order );\n}\n", "import type { EulerOrder } from '../euler/EulerOrder';\nimport type { RawQuaternion } from './RawQuaternion';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Generate a Quaternion out of euler angles.\n */\nexport function quatFromEuler( euler: RawVector3, order?: EulerOrder ): RawQuaternion {\n  const [ i, j, k, sign ] =\n    !order || order === 'XYZ' ? [ 0, 1, 2, 1 ] :\n    order === 'XZY' ? [ 0, 2, 1, -1 ] :\n    order === 'YXZ' ? [ 1, 0, 2, -1 ] :\n    order === 'YZX' ? [ 1, 2, 0, 1 ] :\n    order === 'ZXY' ? [ 2, 0, 1, 1 ] :\n    [ 2, 1, 0, -1 ];\n\n  const ti = 0.5 * euler[ i ];\n  const tj = 0.5 * sign * euler[ j ];\n  const tk = 0.5 * euler[ k ];\n\n  const ci = Math.cos( ti );\n  const cj = Math.cos( tj );\n  const ck = Math.cos( tk );\n  const si = Math.sin( ti );\n  const sj = Math.sin( tj );\n  const sk = Math.sin( tk );\n\n  const result: RawQuaternion = [\n    0.0,\n    0.0,\n    0.0,\n    ck * cj * ci + sk * sj * si,\n  ];\n  result[ i ] = ck * cj * si - sk * sj * ci;\n  result[ j ] = sign * ( ck * sj * ci + sk * cj * si );\n  result[ k ] = sk * cj * ci - ck * sj * si;\n\n  return result;\n}\n", "import { Matrix3 } from '../mat3/Matrix3';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Quaternion } from '../quat/Quaternion';\nimport { eulerFromMat3 } from './eulerFromMat3';\nimport { eulerFromMat4 } from './eulerFromMat4';\nimport { eulerFromQuaternion } from './eulerFromQuaternion';\nimport { quatFromEuler } from '../quat/quatFromEuler';\nimport type { EulerOrder } from './EulerOrder';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * An Euler rotations.\n */\nexport class Euler {\n  public elements: RawVector3; // [ x, y, z ]\n\n  /**\n   * An order of this euler.\n   * 'XYZ' by default.\n   *\n   * Note that this is **extrinsic** rotations (which is same as Blender, Maya, and Unity).\n   * Three.js uses intrinsic rotations so you have to reverse the order if you want to match the behavior with Three.js.\n   */\n  public order: EulerOrder;\n\n  public constructor( elements: RawVector3 = [ 0.0, 0.0, 0.0 ], order: EulerOrder = 'XYZ' ) {\n    this.elements = elements;\n    this.order = order;\n  }\n\n  /**\n   * An x component of this.\n   */\n  public get x(): number {\n    return this.elements[ 0 ];\n  }\n\n  /**\n   * An y component of this.\n   */\n  public get y(): number {\n    return this.elements[ 1 ];\n  }\n\n  /**\n   * An z component of this.\n   */\n  public get z(): number {\n    return this.elements[ 2 ];\n  }\n\n  public toString(): string {\n    return `Euler( ${ this.x.toFixed( 3 ) }, ${ this.y.toFixed( 3 ) }, ${ this.z.toFixed( 3 ) } (${ this.order }) )`;\n  }\n\n  /**\n   * Clone this.\n   */\n  public clone(): Euler {\n    return new Euler( this.elements.concat() as RawVector3, this.order );\n  }\n\n  /**\n   * Itself but converted into a Quaternion.\n   */\n  public get quaternion(): Quaternion {\n    return new Quaternion( quatFromEuler( this.elements, this.order ) );\n  }\n\n  /**\n   * Itself but converted into a Matrix4.\n   */\n  public get matrix4(): Matrix4 {\n    return this.quaternion.matrix4;\n  }\n\n  /**\n   * Generate an Euler out of a matrix3.\n   */\n  public static fromMatrix3( matrix: Matrix3, order: EulerOrder ): Euler {\n    return new Euler( eulerFromMat3( matrix.elements, order ), order );\n  }\n\n  /**\n   * Generate an Euler out of a matrix4.\n   */\n  public static fromMatrix4( matrix: Matrix4, order: EulerOrder ): Euler {\n    return new Euler( eulerFromMat4( matrix.elements, order ), order );\n  }\n\n  /**\n   * Generate an Euler out of a quaternion.\n   */\n  public static fromQuaternion( quaternion: Quaternion, order: EulerOrder ): Euler {\n    return new Euler( eulerFromQuaternion( quaternion.elements, order ), order );\n  }\n}\n", "import { vecDot } from '../vec/vecDot';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawRay3 } from './RawRay3';\nimport type { RawSphere3 } from '../sphere3/RawSphere3';\n\n/**\n * Return distances from given ray to sphere.\n *\n * The returning distance can be negative.\n *\n * The first returning value will be the distance of the incident point.\n * If the ray does not intersect with sphere, it will return `null`.\n *\n * @param ray A ray\n * @param sphere A target sphere\n */\nexport function ray3DistanceToSphere(\n  [ ro, rd ]: RawRay3,\n  sphere: RawSphere3,\n): [ number, number ] | null {\n  const v = vecSub( ro, sphere[ 0 ] );\n  const b = vecDot( v, rd );\n  const c = vecDot( v, v ) - sphere[ 1 ];\n  const d = b * b - c;\n\n  if ( d < 0.0 ) { return null; }\n\n  const sqrtD = Math.sqrt( d );\n\n  return [ -b - sqrtD, -b + sqrtD ];\n}\n", "import { vecSub } from '../vec/vecSub';\nimport type { RawLine3 } from './RawLine3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a vector that represents delta of given line.\n *\n * @param line A line\n */\nexport function line3Delta( line: RawLine3 ): RawVector3 {\n  return vecSub( line[ 1 ], line[ 0 ] );\n}\n", "import { line3Delta } from '../line3/line3Delta';\nimport { vecNormalize } from '../vec/vecNormalize';\nimport type { RawLine3 } from '../line3/RawLine3';\nimport type { RawRay3 } from './RawRay3';\n\n/**\n * Convert the given line to a ray.\n *\n * @param line A line\n */\nexport function ray3FromLine3( line: RawLine3 ): RawRay3 {\n  return [\n    line[ 0 ],\n    vecNormalize( line3Delta( line ) ),\n  ];\n}\n", "import { Line3 } from '../line3/Line3';\nimport { Sphere3 } from '../sphere3/Sphere3';\nimport { Vector3 } from '../vec3/Vector3';\nimport { ray3DistanceToSphere } from './ray3DistanceToSphere';\nimport { ray3FromLine3 } from './ray3FromLine3';\nimport type { RawRay3 } from './RawRay3';\n\n/**\n * A 3D ray.\n */\nexport class Ray3 {\n  /**\n   * The origin of the ray.\n   */\n  public origin: Vector3;\n\n  /**\n   * The direction of the ray.\n   * Make sure the direction is normalized.\n   */\n  public direction: Vector3;\n\n  public constructor( start: Vector3 = Vector3.zero, end: Vector3 = Vector3.pz ) {\n    this.origin = start;\n    this.direction = end;\n  }\n\n  /**\n   * Itself but {@link RawRay3} form.\n   */\n  public get raw(): RawRay3 {\n    return [ this.origin.elements, this.direction.elements ];\n  }\n\n  /**\n   * Return distances from given ray to sphere.\n   *\n   * The returning distance can be negative.\n   *\n   * The first returning value will be the distance of the incident point.\n   * If the ray does not intersect with sphere, it will return `null`.\n   *\n   * @param sphere A target sphere\n   */\n  public distanceToSphere( sphere: Sphere3 ): [ number, number ] | null {\n    return ray3DistanceToSphere( this.raw, sphere.raw );\n  }\n\n  /**\n   * Convert {@link RawRay3} to class form.\n   * @param ray A {@link RawRay3}\n   */\n  public static fromRaw( ray: RawRay3 ): Ray3 {\n    return new Ray3( new Vector3( ray[ 0 ] ), new Vector3( ray[ 1 ] ) );\n  }\n\n  /**\n   * Create a ray out of a line.\n   *\n   * @param line A {@link Line3}\n   */\n  public static fromLine3( line: Line3 ): Ray3 {\n    return Ray3.fromRaw( ray3FromLine3( line.raw ) );\n  }\n}\n", "import { vec3ApplyMatrix4 } from '../vec3/vec3ApplyMatrix4';\nimport type { RawLine3 } from './RawLine3';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\n\n/**\n * Apply given matrix4 to given line.\n *\n * @param line A line\n * @param matrix A matrix4 which will be applied to the line\n */\nexport function line3ApplyMatrix4(\n  [ start, end ]: RawLine3,\n  matrix: RawMatrix4,\n): RawLine3 {\n  return [\n    vec3ApplyMatrix4( start, matrix ),\n    vec3ApplyMatrix4( end, matrix ),\n  ];\n}\n", "import { vecAdd } from '../vec/vecAdd';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawLine3 } from './RawLine3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a vector that represents a certain point of given line.\n * Same as start at t = 0, same as end at t = 1.\n *\n * @param line A line\n * @param t A parameter t\n */\nexport function line3At( line: RawLine3, t: number ): RawVector3 {\n  return vecAdd(\n    vecScale( line[ 0 ], 1.0 - t ),\n    vecScale( line[ 1 ], t ),\n  );\n}\n", "import { line3At } from './line3At';\nimport { saturate } from '../utils';\nimport { vecDot } from '../vec/vecDot';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawLine3 } from './RawLine3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a point that is on the given line which is closest to the given point.\n *\n * If `segment` is true, it will treat the line as a segment which has start and end.\n * Otherwise it will treat the line is infinite.\n *\n * @param line A line\n * @param point A point\n * @param segment Is the line a segment?\n */\nexport function line3ClosestPointToPoint(\n  line: RawLine3,\n  point: RawVector3,\n  segment?: boolean,\n): RawVector3 {\n  const ap = vecSub( point, line[ 0 ] );\n  const ab = vecSub( line[ 1 ], line[ 0 ] );\n\n  let t = vecDot( ap, ab ) / vecDot( ab, ab );\n  segment && ( t = saturate( t ) );\n\n  return line3At( line, t );\n}\n", "import { line3ClosestPointToPoint } from './line3ClosestPointToPoint';\nimport { vecLength } from '../vec/vecLength';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawLine3 } from './RawLine3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a distance from the given line to the given point.\n *\n * If `segment` is true, it will treat the line as a segment which has start and end.\n * Otherwise it will treat the line is infinite.\n *\n * @param line A line\n * @param point A point\n * @param segment Is the line a segment?\n */\nexport function line3DistanceToPoint(\n  line: RawLine3,\n  point: RawVector3,\n  segment?: boolean,\n): number {\n  return vecLength( vecSub(\n    line3ClosestPointToPoint( line, point, segment ),\n    point,\n  ) );\n}\n", "import { Matrix4 } from '../mat4/Matrix4';\nimport { Ray3 } from '../ray3/Ray3';\nimport { Vector3 } from '../vec3/Vector3';\nimport { line3ApplyMatrix4 } from './line3ApplyMatrix4';\nimport { line3At } from './line3At';\nimport { line3ClosestPointToPoint } from './line3ClosestPointToPoint';\nimport { line3Delta } from './line3Delta';\nimport { line3DistanceToPoint } from './line3DistanceToPoint';\nimport type { RawLine3 } from './RawLine3';\n\n/**\n * A 3D line.\n */\nexport class Line3 {\n  public start: Vector3;\n  public end: Vector3;\n\n  public constructor( start: Vector3 = Vector3.zero, end: Vector3 = Vector3.zero ) {\n    this.start = start;\n    this.end = end;\n  }\n\n  /**\n   * Itself but {@link RawLine3} form.\n   */\n  public get raw(): RawLine3 {\n    return [ this.start.elements, this.end.elements ];\n  }\n\n  /**\n   * Itself but a ray.\n   */\n  public get ray(): Ray3 {\n    return Ray3.fromLine3( this );\n  }\n\n  /**\n   * A vector that represents delta of the line.\n   */\n  public delta(): Vector3 {\n    return new Vector3( line3Delta( this.raw ) );\n  }\n\n  /**\n   * Its length.\n   */\n  public length(): number {\n    return this.delta.length;\n  }\n\n  /**\n   * Return a vector that represents a certain point of the line.\n   * Same as start at t = 0, same as end at t = 1.\n   *\n   * @param t A parameter t\n   */\n  public at( t: number ): Vector3 {\n    return new Vector3( line3At( this.raw, t ) );\n  }\n\n  /**\n   * Apply given matrix4 to the line.\n   *\n   * @param matrix A matrix4 which will be applied to the line\n   */\n  public applyMatrix4( matrix: Matrix4 ): Line3 {\n    return Line3.fromRaw(\n      line3ApplyMatrix4(\n        this.raw,\n        matrix.elements,\n      )\n    );\n  }\n\n  /**\n   * Return a point that is on the line which is closest to the given point.\n   *\n   * If `segment` is true, it will treat the line as a segment which has start and end.\n   * Otherwise it will treat the line is infinite.\n   *\n   * @param point A point\n   * @param segment Is the line a segment?\n   */\n  public closestPointToPoint( point: Vector3, segment: boolean ): Vector3 {\n    return new Vector3( line3ClosestPointToPoint( this.raw, point.elements, segment ) );\n  }\n\n  /**\n   * Return a distance from the line to the given point.\n   *\n   * If `segment` is true, it will treat the line as a segment which has start and end.\n   * Otherwise it will treat the line is infinite.\n   *\n   * @param point A point\n   * @param segment Is the line a segment?\n   */\n  public distanceToPoint( point: Vector3, segment: boolean ): number {\n    return line3DistanceToPoint( this.raw, point.elements, segment );\n  }\n\n  /**\n   * Convert {@link RawLine3} to class form.\n   * @param line A {@link RawLine3}\n   */\n  public static fromRaw( line: RawLine3 ): Line3 {\n    return new Line3( new Vector3( line[ 0 ] ), new Vector3( line[ 1 ] ) );\n  }\n}\n", "import type { RawMatrix2 } from './RawMatrix2';\n\nexport function mat2Determinant( m: RawMatrix2 ): number {\n  return m[ 0 ] * m[ 3 ] - m[ 2 ] * m[ 1 ];\n}\n", "import { vecScale } from '../vec/vecScale';\nimport type { RawMatrix2 } from './RawMatrix2';\n\n/**\n * Return an inverse of given matrix.\n */\nexport function mat2Inverse( m: RawMatrix2 ): RawMatrix2 {\n  const\n    n11 = m[ 0 ], n21 = m[ 1 ],\n    n12 = m[ 2 ], n22 = m[ 3 ],\n    det = n11 * n22 - n12 * n21;\n\n  if ( det === 0.0 ) { return vecScale( m, 0.0 ); }\n\n  return vecScale( [\n    n22, -n21,\n    -n12, n11,\n  ], 1.0 / det );\n}\n", "import type { RawMatrix2 } from './RawMatrix2';\n\n/**\n * Return a multiplication result of matrices.\n */\nexport function mat2Multiply( ...mats: RawMatrix2[] ): RawMatrix2 {\n  if ( mats.length < 2 ) {\n    return mats[ 0 ];\n  }\n\n  const a = mats.shift()!;\n  const b = mat2Multiply( ...mats );\n  const\n    a00 = a[ 0 ], a01 = a[ 1 ],\n    a10 = a[ 2 ], a11 = a[ 3 ],\n    b00 = b[ 0 ], b01 = b[ 1 ],\n    b10 = b[ 2 ], b11 = b[ 3 ];\n\n  return [\n    a00 * b00 + a10 * b01,\n    a01 * b00 + a11 * b01,\n\n    a00 * b10 + a10 * b11,\n    a01 * b10 + a11 * b11,\n  ];\n}\n", "import type { RawMatrix2 } from './RawMatrix2';\n\n/**\n * Transpose a mat2.\n */\nexport function mat2Transpose(\n  source: RawMatrix2,\n): RawMatrix2 {\n  return [\n    source[ 0 ], source[ 2 ],\n    source[ 1 ], source[ 3 ],\n  ];\n}\n", "import { mat2Determinant } from './mat2Determinant';\nimport { mat2Inverse } from './mat2Inverse';\nimport { mat2Multiply } from './mat2Multiply';\nimport { mat2Transpose } from './mat2Transpose';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawMatrix2 } from './RawMatrix2';\n\nconst rawIdentityMatrix2: RawMatrix2 = [\n  1.0, 0.0,\n  0.0, 1.0,\n];\n\n/**\n * A Matrix2.\n */\nexport class Matrix2 {\n  public elements: RawMatrix2;\n\n  public constructor( v: RawMatrix2 = rawIdentityMatrix2 ) {\n    this.elements = v;\n  }\n\n  /**\n   * Itself but transposed.\n   */\n  public get transpose(): Matrix2 {\n    return new Matrix2( mat2Transpose( this.elements ) );\n  }\n\n  /**\n   * Its determinant.\n   */\n  public get determinant(): number {\n    return mat2Determinant( this.elements );\n  }\n\n  /**\n   * Itself but inverted.\n   */\n  public get inverse(): Matrix2 {\n    return new Matrix2( mat2Inverse( this.elements ) );\n  }\n\n  public toString(): string {\n    const m = this.elements.map( ( v ) => v.toFixed( 3 ) );\n    return `Matrix2( ${ m[ 0 ] }, ${ m[ 2 ] }; ${ m[ 1 ] }, ${ m[ 3 ] } )`;\n  }\n\n  /**\n   * Clone this.\n   */\n  public clone(): Matrix2 {\n    return new Matrix2( this.elements.concat() as RawMatrix2 );\n  }\n\n  /**\n   * Multiply this Matrix2 by one or more Matrix2s.\n   */\n  public multiply( ...matrices: Matrix2[] ): Matrix2 {\n    return Matrix2.multiply( this, ...matrices );\n  }\n\n  /**\n   * Multiply this Matrix3 by a scalar.\n   */\n  public scaleScalar( scalar: number ): Matrix2 {\n    return new Matrix2( vecScale( this.elements, scalar ) );\n  }\n\n  /**\n   * An identity Matrix4.\n   */\n  public static get identity(): Matrix2 {\n    return new Matrix2( rawIdentityMatrix2 );\n  }\n\n  /**\n   * Multiply two or more matrices.\n   * @param matrices Matrices\n   */\n  public static multiply( ...matrices: Matrix2[] ): Matrix2 {\n    if ( matrices.length === 0 ) {\n      return Matrix2.identity;\n    } else {\n      return new Matrix2( mat2Multiply( ...matrices.map( ( m ) => m.elements ) ) );\n    }\n  }\n}\n", "import type { RawMatrix3 } from '../mat3/RawMatrix3';\nimport type { RawVector3 } from './RawVector3';\n\n/**\n * Apply a vec3 a mat3.\n */\nexport function vec3ApplyMatrix3( v: RawVector3, m: RawMatrix3 ): RawVector3 {\n  return [\n    m[ 0 ] * v[ 0 ] + m[ 3 ] * v[ 1 ] + m[ 6 ] * v[ 2 ],\n    m[ 1 ] * v[ 0 ] + m[ 4 ] * v[ 1 ] + m[ 7 ] * v[ 2 ],\n    m[ 2 ] * v[ 0 ] + m[ 5 ] * v[ 1 ] + m[ 8 ] * v[ 2 ],\n  ];\n}\n", "import { vec3ApplyMatrix3 } from '../vec3/vec3ApplyMatrix3';\nimport { vec3ApplyMatrix4 } from '../vec3/vec3ApplyMatrix4';\nimport { vecDot } from '../vec/vecDot';\nimport { vecNormalize } from '../vec/vecNormalize';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawMatrix3 } from '../mat3/RawMatrix3';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * Apply given matrix4 to given plane.\n *\n * @param plane A plane\n * @param matrix A matrix4 which will be applied to the plane\n * @param normalMatrix A normalMatrix made out of {@link matrix}\n */\nexport function plane3ApplyMatrix4(\n  [ normal, distance ]: RawPlane3,\n  matrix: RawMatrix4,\n  normalMatrix: RawMatrix3,\n): RawPlane3 {\n  // normal\u306A\u3093\u3060\u304B\u3089normalMatrix\u5F53\u3066\u308C\u3070\u30E8\u30B7\uFF01\n  const newNormal = vecNormalize( vec3ApplyMatrix3( normal, normalMatrix ) );\n\n  // \u3068\u308A\u3042\u3048\u305A\u4E00\u70B9\u89B3\u6E2C\u3057\u3066\u3042\u3068\u3067dot\u53D6\u308A\u76F4\u3057\u3061\u3083\u304A\u3046\u305C\uFF01\n  const coplanar = vecScale( normal, -distance );\n  const refPoint = vec3ApplyMatrix4( coplanar, matrix );\n  const newDistance = -vecDot( refPoint, normal );\n\n  return [ newNormal, newDistance ];\n}\n", "import { vecDot } from '../vec/vecDot';\nimport type { RawPlane3 } from './RawPlane3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Return a signed distance from given plane to the given point.\n * Make sure the `normal` is normalized.\n */\nexport function plane3DistanceToPoint(\n  [ normal, distance ]: RawPlane3,\n  point: RawVector3,\n): number {\n  return vecDot( normal, point ) + distance;\n}\n", "import { vecLength } from '../vec/vecLength';\nimport { vecScale } from '../vec/vecScale';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * Normalize a given plane?\n * This normalizes the normal and also divide distance by its original normal length.\n *\n * I don't come up with any use cases other than {@link planesFromProjectionMatrix}.\n *\n * @param plane The plane you want to normalize\n */\nexport function plane3Normalize( [ normal, distance ]: RawPlane3 ): RawPlane3 {\n  const invL = 1.0 / vecLength( normal );\n  return [ vecScale( normal, invL ), distance * invL ];\n}\n", "import { Matrix3 } from '../mat3/Matrix3';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vector3 } from '../vec3/Vector3';\nimport { plane3ApplyMatrix4 } from './plane3ApplyMatrix4';\nimport { plane3DistanceToPoint } from './plane3DistanceToPoint';\nimport { plane3Normalize } from './plane3Normalize';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * A 3D plane.\n */\nexport class Plane3 {\n  public normal: Vector3;\n  public distance: number;\n\n  /**\n   * Itself but {@link RawPlane3} form.\n   */\n  public get raw(): RawPlane3 {\n    return [ this.normal.elements, this.distance ];\n  }\n\n  /**\n   * Normalized plane?\n   * This normalizes the normal and also divide distance by its original normal length.\n   */\n  public get normalized(): Plane3 {\n    return Plane3.fromRaw( plane3Normalize( this.raw ) );\n  }\n\n  public constructor( normal: Vector3 = Vector3.pz, distance = 0.0 ) {\n    this.normal = normal;\n    this.distance = distance;\n  }\n\n  /**\n   * Apply given matrix4 to the plane.\n   *\n   * @param matrix A matrix4 which will be applied to the plane\n   * @param normalMatrix A normalMatrix made out of {@link matrix}. Optional\n   */\n  public applyMatrix4( matrix: Matrix4, normalMatrix?: Matrix3 ): Plane3 {\n    return Plane3.fromRaw(\n      plane3ApplyMatrix4(\n        this.raw,\n        matrix.elements,\n        normalMatrix?.elements ?? matrix.normalMatrix.elements,\n      )\n    );\n  }\n\n  /**\n   * Return a signed distance from given plane to the given point.\n   *\n   * @param point A point\n   */\n  public distanceToPoint( point: Vector3 ): number {\n    return plane3DistanceToPoint( this.raw, point.elements );\n  }\n\n  /**\n   * Convert {@link RawPlane3} to class form.\n   * @param plane A {@link RawPlane3}\n   */\n  public static fromRaw( plane: RawPlane3 ): Plane3 {\n    return new Plane3( new Vector3( plane[ 0 ] ), plane[ 1 ] );\n  }\n}\n", "import { plane3DistanceToPoint } from './plane3DistanceToPoint';\nimport type { RawPlane3 } from './RawPlane3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Test if given point is contained in given planes or not.\n *\n * @param planes A list of planes\n * @param point A point\n */\nexport function planes3ContainPoint( planes: RawPlane3[], point: RawVector3 ): boolean {\n  return planes.every( ( plane ) => plane3DistanceToPoint( plane, point ) >= 0.0 );\n}\n", "import type { RawBox3 } from '../box3/RawBox3';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * Generate a set of plane3 out of a {@link RawBox3}.\n *\n * @param box A box\n */\nexport function planes3FromBox3( box: RawBox3 ): RawPlane3[] {\n  return [\n    [ [ 1.0, 0.0, 0.0 ], -box[ 0 ][ 0 ] ], // xn\n    [ [ -1.0, 0.0, 0.0 ], box[ 1 ][ 0 ] ], // xp\n    [ [ 0.0, 1.0, 0.0 ], -box[ 0 ][ 1 ] ], // yn\n    [ [ 0.0, -1.0, 0.0 ], box[ 1 ][ 1 ] ], // yp\n    [ [ 0.0, 0.0, 1.0 ], -box[ 0 ][ 2 ] ], // yn\n    [ [ 0.0, 0.0, -1.0 ], box[ 1 ][ 2 ] ], // yp\n  ];\n}\n", "import { plane3Normalize } from './plane3Normalize';\nimport type { RawMatrix4 } from '../mat4/RawMatrix4';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * Create frustum planes out of given projection matrix.\n *\n * @param m A projection matrix\n */\nexport function planes3FromProjectionMatrix( m: RawMatrix4 ): RawPlane3[] {\n  const\n    m11 = m[ 0 ], m12 = m[ 4 ], m13 = m[ 8 ], m14 = m[ 12 ],\n    m21 = m[ 1 ], m22 = m[ 5 ], m23 = m[ 9 ], m24 = m[ 13 ],\n    m31 = m[ 2 ], m32 = m[ 6 ], m33 = m[ 10 ], m34 = m[ 14 ],\n    m41 = m[ 3 ], m42 = m[ 7 ], m43 = m[ 11 ], m44 = m[ 15 ];\n\n  return [\n    plane3Normalize( [ [ m41 - m11, m42 - m12, m43 - m13 ], m44 - m14 ] ), // xp\n    plane3Normalize( [ [ m41 + m11, m42 + m12, m43 + m13 ], m44 + m14 ] ), // xn\n    plane3Normalize( [ [ m41 - m21, m42 - m22, m43 - m23 ], m44 - m24 ] ), // yp\n    plane3Normalize( [ [ m41 + m21, m42 + m22, m43 + m23 ], m44 + m24 ] ), // yn\n    plane3Normalize( [ [ m41 - m31, m42 - m32, m43 - m33 ], m44 - m34 ] ), // zn\n    plane3Normalize( [ [ m41 + m31, m42 + m32, m43 + m33 ], m44 + m34 ] ), // zp\n  ];\n}\n", "import { plane3DistanceToPoint } from './plane3DistanceToPoint';\nimport type { RawBox3 } from '../box3/RawBox3';\nimport type { RawPlane3 } from './RawPlane3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Test if given box intersects with planes or not.\n *\n * @param planes A list of planes\n * @param box A box3\n */\nexport function planes3IntersectBox3( planes: RawPlane3[], box: RawBox3 ): boolean {\n  return planes.every( ( plane ) => {\n    const v = plane[ 0 ].map( ( nc, i ) => box[ nc > 0.0 ? 1 : 0 ][ i ] ) as RawVector3;\n    return plane3DistanceToPoint( plane, v ) >= 0.0;\n  } );\n}\n", "import { RawSphere3 } from '../sphere3/RawSphere3';\nimport { plane3DistanceToPoint } from './plane3DistanceToPoint';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * Test if given sphere intersects with planes or not.\n *\n * It does not do strict intersection test but still should work well with frustum cull use cases.\n * See the test case for more details.\n *\n * @param planes A list of planes\n * @param sphere A sphere3\n */\nexport function planes3IntersectSphere3( planes: RawPlane3[], sphere: RawSphere3 ): boolean {\n  return planes.every( ( plane ) => (\n    plane3DistanceToPoint( plane, sphere[ 0 ] ) >= -sphere[ 1 ]\n  ) );\n}\n", "import { Box3 } from '../box3/Box3';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Plane3 } from './Plane3';\nimport { Sphere3 } from '../sphere3/Sphere3';\nimport { Vector3 } from '../vec3/Vector3';\nimport { planes3ContainPoint } from './planes3ContainPoint';\nimport { planes3FromBox3 } from './planes3FromBox3';\nimport { planes3FromProjectionMatrix } from './planes3FromProjectionMatrix';\nimport { planes3IntersectBox3 } from './planes3IntersectBox3';\nimport { planes3IntersectSphere3 } from './planes3IntersectSphere3';\nimport type { RawPlane3 } from './RawPlane3';\n\n/**\n * A set of {@link Plane3}.\n */\nexport class Planes3 {\n  public planes: Plane3[];\n\n  /**\n   * Itself but {@link RawPlane3}[] form.\n   */\n  public get raw(): RawPlane3[] {\n    return this.planes.map( ( plane ) => plane.raw );\n  }\n\n  public constructor( planes: Plane3[] ) {\n    this.planes = planes;\n  }\n\n  /**\n   * Test if given point is contained in the planes or not.\n   *\n   * @param point A point\n   */\n  public containPoint( point: Vector3 ): boolean {\n    return planes3ContainPoint( this.raw, point.elements );\n  }\n\n  /**\n   * Test if given box intersects with the planes or not.\n   *\n   * @param box A box3\n   */\n  public intersectBox3( box: Box3 ): boolean {\n    return planes3IntersectBox3( this.raw, box.raw );\n  }\n\n  /**\n   * Test if given sphere intersects with the planes or not.\n   *\n   * It does not do strict intersection test but still should work well with frustum cull use cases.\n   * See the test case for more details.\n   *\n   * @param sphere A sphere3\n   */\n  public intersectSphere3( sphere: Sphere3 ): boolean {\n    return planes3IntersectSphere3( this.raw, sphere.raw );\n  }\n\n  /**\n   * Convert {@link RawPlane3}[] to class form.\n   *\n   * @param planes A {@link RawPlane3}[]\n   */\n  public static fromRaw( planes: RawPlane3[] ): Planes3 {\n    return new Planes3( planes.map( ( plane ) => Plane3.fromRaw( plane ) ) );\n  }\n\n  /**\n   * Generate a set of plane3 out of a {@link RawBox3}.\n   *\n   * @param box A box\n   */\n  public static fromBox3( box: Box3 ): Planes3 {\n    return Planes3.fromRaw( planes3FromBox3( box.raw ) );\n  }\n\n  /**\n   * Create frustum planes out of given projection matrix.\n   *\n   * @param matrix A projection matrix\n   */\n  public static fromProjectionMatrix( matrix: Matrix4 ): Planes3 {\n    return Planes3.fromRaw( planes3FromProjectionMatrix( matrix.elements ) );\n  }\n}\n", "import { vecLengthSq } from '../vec/vecLengthSq';\nimport { vecSub } from '../vec/vecSub';\nimport type { RawSphere3 } from './RawSphere3';\nimport type { RawVector3 } from '../vec3/RawVector3';\n\n/**\n * Test if given point is contained in given sphere or not.\n * @param sphere A sphere\n * @param point A point\n */\nexport function sphere3ContainsPoint( sphere: RawSphere3, point: RawVector3 ): boolean {\n  return vecLengthSq( vecSub( sphere[ 0 ], point ) ) <= sphere[ 1 ] * sphere[ 1 ];\n}\n", "import { Vector3 } from '../vec3/Vector3';\nimport { sphere3ContainsPoint } from './sphere3ContainsPoint';\nimport type { RawSphere3 } from './RawSphere3';\n\n/**\n * A 3D sphere.\n */\nexport class Sphere3 {\n  public origin: Vector3;\n  public radius: number;\n\n  public constructor( origin: Vector3 = Vector3.zero, radius: number = 0.0 ) {\n    this.origin = origin;\n    this.radius = radius;\n  }\n\n  /**\n   * Itself but {@link RawSphere3} form.\n   */\n  public get raw(): RawSphere3 {\n    return [ this.origin.elements, this.radius ];\n  }\n\n  /**\n   * Test if given point is contained in the sphere or not.\n   *\n   * @param point A point\n   */\n  public containsPoint( point: Vector3 ): boolean {\n    return sphere3ContainsPoint( this.raw, point.elements );\n  }\n\n  /**\n   * Convert {@link RawSphere3} to class form.\n   * @param sphere A {@link RawSphere3}\n   */\n  public static fromRaw( sphere: RawSphere3 ): Sphere3 {\n    return new Sphere3( new Vector3( sphere[ 0 ] ), sphere[ 1 ] );\n  }\n}\n", "import { vec3ApplyMatrix3 } from '../vec3/vec3ApplyMatrix3';\nimport type { RawMatrix3 } from '../mat3/RawMatrix3';\nimport type { RawVector3 } from '../vec3/RawVector3';\nimport type { RawVector4 } from './RawVector4';\n\n/**\n * Apply a vec4 a mat3 (with an implicit 1 on m44).\n */\nexport function vec4ApplyMatrix3( v: RawVector4, m: RawMatrix3 ): RawVector4 {\n  const v3: RawVector3 = [ v[ 0 ], v[ 1 ], v[ 2 ] ];\n  const xyz = vec3ApplyMatrix3( v3, m );\n  const w = v[ 3 ];\n  return [ xyz[ 0 ], xyz[ 1 ], xyz[ 2 ], w ];\n}\n", "import { Matrix4 } from '../mat4/Matrix4';\nimport { Vector } from '../vec/Vector';\nimport { vec4ApplyMatrix3 } from './vec4ApplyMatrix3';\nimport { vec4ApplyMatrix4 } from './vec4ApplyMatrix4';\nimport type { Matrix3 } from '../mat3/Matrix3';\nimport type { RawVector4 } from './RawVector4';\n\n/**\n * A Vector3.\n */\nexport class Vector4 extends Vector<Vector4> {\n  public elements: RawVector4;\n\n  public constructor( v: RawVector4 = [ 0.0, 0.0, 0.0, 0.0 ] ) {\n    super();\n    this.elements = v;\n  }\n\n  /**\n   * An x component of this.\n   */\n  public get x(): number {\n    return this.elements[ 0 ];\n  }\n\n  public set x( x: number ) {\n    this.elements[ 0 ] = x;\n  }\n\n  /**\n   * A y component of this.\n   */\n  public get y(): number {\n    return this.elements[ 1 ];\n  }\n\n  public set y( y: number ) {\n    this.elements[ 1 ] = y;\n  }\n\n  /**\n   * A z component of this.\n   */\n  public get z(): number {\n    return this.elements[ 2 ];\n  }\n\n  public set z( z: number ) {\n    this.elements[ 2 ] = z;\n  }\n\n  /**\n   * A w component of this.\n   */\n  public get w(): number {\n    return this.elements[ 3 ];\n  }\n\n  public set w( z: number ) {\n    this.elements[ 3 ] = z;\n  }\n\n  public toString(): string {\n    return `Vector4( ${ this.x.toFixed( 3 ) }, ${ this.y.toFixed( 3 ) }, ${ this.z.toFixed( 3 ) }, ${ this.w.toFixed( 3 ) } )`;\n  }\n\n  /**\n   * Apply this vector a mat3 (with an implicit 1 on m44).\n   */\n  public applyMatrix3( matrix: Matrix3 ): Vector4 {\n    return new Vector4( vec4ApplyMatrix3( this.elements, matrix.elements ) );\n  }\n\n  /**\n   * Multiply this vector by a mat4.\n   */\n  public applyMatrix4( matrix: Matrix4 ): Vector4 {\n    return new Vector4( vec4ApplyMatrix4( this.elements, matrix.elements ) );\n  }\n\n  protected __new( v: RawVector4 ): Vector4 {\n    return new Vector4( v );\n  }\n\n  /**\n   * Vector4( 0.0, 0.0, 0.0, 0.0 )\n   */\n  public static get zero(): Vector4 {\n    return new Vector4( [ 0.0, 0.0, 0.0, 0.0 ] );\n  }\n\n  /**\n   * Vector4( 1.0, 1.0, 1.0, 1.0 )\n   */\n  public static get one(): Vector4 {\n    return new Vector4( [ 1.0, 1.0, 1.0, 1.0 ] );\n  }\n}\n", "import { MidiParseResult, MidiParseResultHeader, MidiParseResultTrack } from './MidiParseResult';\nimport { arraySerial } from '../array/arraySerial';\n\nfunction readU8( array: Uint8Array, headBox: [ number ] ): number {\n  return array[ headBox[ 0 ] ++ ];\n}\n\n/**\n * Big endian\n */\nfunction readU16( array: Uint8Array, headBox: [ number ] ): number {\n  return readU8( array, headBox ) * 256 + readU8( array, headBox );\n}\n\n/**\n * Big endian\n */\nfunction readU32( array: Uint8Array, headBox: [ number ] ): number {\n  return readU16( array, headBox ) * 65536 + readU16( array, headBox );\n}\n\nfunction readUVar( array: Uint8Array, headBox: [ number ] ): number {\n  let v = 0;\n  for ( ;; ) {\n    const vv = readU8( array, headBox );\n    v = v * 128 + ( vv & 127 );\n\n    if ( vv < 128 ) {\n      return v;\n    }\n  }\n}\n\nfunction parseHeader( array: Uint8Array, headBox: [ number ] ): MidiParseResultHeader {\n  // skip type and length (4+4)\n  // length has to be 6, there's no need to parse\n  headBox[ 0 ] += 8;\n\n  return [\n    readU16( array, headBox ),\n    readU16( array, headBox ),\n    readU16( array, headBox ),\n  ];\n}\n\nfunction parseTrack( array: Uint8Array, headBox: [ number ] ): MidiParseResultTrack {\n  // skip type (4)\n  headBox[ 0 ] += 4;\n\n  const endOfTrack = headBox[ 0 ] + readU32( array, headBox ) + 4;\n\n  const track: MidiParseResultTrack = [];\n  let type = 0;\n\n  while ( headBox[ 0 ] < endOfTrack ) {\n    const delta = readUVar( array, headBox );\n    const status = readU8( array, headBox );\n    type = status < 128 ? type : status;\n    const data0 = status < 128 ? status : readU8( array, headBox );\n\n    if ( type < 0xc0 ) {\n      // note on (9x), note off (8x), polyphonic key pressure (Ax), control change (Bx)\n\n      track.push( [\n        delta,\n        type,\n        data0, // note or cc number\n        readU8( array, headBox ), // velocity, pressure, or data\n      ] );\n    } else if ( type === 0xff ) {\n      // meta events\n\n      const eventLength = readU8( array, headBox );\n\n      track.push( [\n        delta,\n        type,\n        data0,\n        arraySerial( eventLength ).map( () => readU8( array, headBox ) ),\n      ] );\n\n      if ( data0 === 0x2f ) { // end of track\n        break;\n      }\n    } else {\n      throw new Error( `${ type }` );\n    }\n  }\n\n  return track;\n}\n\nexport function midiParse( buffer: ArrayBuffer ): MidiParseResult {\n  const array = new Uint8Array( buffer );\n  const headBox: [ number ] = [ 0 ];\n\n  const header = parseHeader( array, headBox );\n  const tracks: MidiParseResultTrack[] = [];\n\n  while ( headBox[ 0 ] < array.length ) {\n    tracks.push( parseTrack( array, headBox ) );\n  }\n\n  return [ header, tracks ];\n}\n", "import type { PokerRank } from './PokerRank';\n\nexport const pokerRanksByStrength: PokerRank[] = [\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  'T',\n  'J',\n  'Q',\n  'K',\n  'A',\n];\n", "import type { PokerSuit } from './PokerSuit';\n\nexport const pokerSuitsByIndex: PokerSuit[] = [\n  'c',\n  'd',\n  'h',\n  's',\n];\n", "import { pokerRanksByStrength } from './pokerRanksByStrength';\nimport { pokerSuitsByIndex } from './pokerSuitsByIndex';\nimport type { PokerCard } from './PokerCard';\n\n/**\n * Create a 52-card deck.\n * You might want to use {@link shuffleArray} to shuffle the deck.\n */\nexport function createPokerDeck(): PokerCard[] {\n  const array: PokerCard[] = [];\n\n  pokerSuitsByIndex.map( ( suit ) => (\n    pokerRanksByStrength.map( ( rank ) => (\n      array.push( rank + suit as PokerCard )\n    ) )\n  ) );\n\n  return array;\n}\n", "import { PokerHand } from './PokerHand';\n\nexport const pokerHandStrengthMap: { [ hand in PokerHand ]: number } = {\n  'HighCard': 0,\n  'OnePair': 1,\n  'TwoPair': 2,\n  'ThreeOfAKind': 3,\n  'Straight': 4,\n  'Flush': 5,\n  'FullHouse': 6,\n  'FourOfAKind': 7,\n  'StraightFlush': 8,\n};\n", "import type { PokerRank } from './PokerRank';\n\nexport const pokerRankStrengthMap: { [ rank in PokerRank ]: number } = {\n  '2': 0,\n  '3': 1,\n  '4': 2,\n  '5': 3,\n  '6': 4,\n  '7': 5,\n  '8': 6,\n  '9': 7,\n  'T': 8,\n  'J': 9,\n  'Q': 10,\n  'K': 11,\n  'A': 12\n};\n", "import type { PokerSuit } from './PokerSuit';\n\nexport const pokerSuitIndexMap: { [ suit in PokerSuit ]: number } = {\n  'c': 0,\n  'd': 1,\n  'h': 2,\n  's': 3,\n};\n", "import { pokerRankStrengthMap } from './pokerRankStrengthMap';\nimport { pokerSuitIndexMap } from './pokerSuitIndexMap';\nimport type { PokerCard } from './PokerCard';\nimport type { PokerRank } from './PokerRank';\nimport type { PokerSuit } from './PokerSuit';\n\n/**\n * Sort given array of cards in place by rank (and suit).\n */\nexport function sortPokerCardsByRank( cards: PokerCard[] ): PokerCard[] {\n  return cards\n    .sort( ( a, b ) => (\n      pokerSuitIndexMap[ a[ 1 ] as PokerSuit ] - pokerSuitIndexMap[ b[ 1 ] as PokerSuit ]\n    ) )\n    .sort( ( a, b ) => (\n      pokerRankStrengthMap[ a[ 0 ] as PokerRank ] - pokerRankStrengthMap[ b[ 0 ] as PokerRank ]\n    ) );\n}\n", "import { MapOfSet } from '../MapOfSet/MapOfSet';\nimport { pokerHandStrengthMap } from './pokerHandStrengthMap';\nimport { pokerRankStrengthMap } from './pokerRankStrengthMap';\nimport { pokerRanksByStrength } from './pokerRanksByStrength';\nimport { sortPokerCardsByRank } from './sortPokerCardsByRank';\nimport type { PokerCard } from './PokerCard';\nimport type { PokerHand } from './PokerHand';\nimport type { PokerRank } from './PokerRank';\nimport type { PokerSuit } from './PokerSuit';\n\nexport interface EvaluatePokerHandResult {\n  hand: PokerHand;\n  strength: number[];\n  cards: [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ];\n}\n\nexport function evaluatePokerHand( cards: PokerCard[] ): EvaluatePokerHandResult {\n  // cards mutable edition\n  const cards_ = cards.concat();\n\n  const cardsByRank = new MapOfSet<PokerRank, PokerCard>();\n  const cardsBySuit = new MapOfSet<PokerSuit, PokerCard>();\n\n  cards_.map( ( card ) => {\n    const rank = card[ 0 ] as PokerRank;\n    const suit = card[ 1 ] as PokerSuit;\n    cardsByRank.add( rank, card );\n    cardsBySuit.add( suit, card );\n  } );\n\n  // pairs\n  const fours: PokerRank[] = [];\n  const threes: PokerRank[] = [];\n  const twos: PokerRank[] = [];\n\n  pokerRanksByStrength.map( ( rank ) => {\n    const cards = cardsByRank.get( rank );\n    if ( cards.size > 3 ) {\n      fours.push( rank );\n    } else if ( cards.size > 2 ) {\n      threes.push( rank );\n    } else if ( cards.size > 1 ) {\n      twos.push( rank );\n    }\n  } );\n\n  // straight\n  let straightCards: PokerCard[] | undefined;\n  {\n    let current: PokerCard[] = [];\n\n    // handle steel wheel\n    const a = Array.from( cardsByRank.get( 'A' ) )[ 0 ];\n    if ( a ) {\n      current.push( a );\n    }\n\n    pokerRanksByStrength.map( ( rank ) => {\n      const card = Array.from( cardsByRank.get( rank ) )[ 0 ];\n      if ( card ) {\n        current.push( card );\n\n        if ( current.length > 4 ) {\n          straightCards = current;\n        }\n      } else {\n        current = [];\n      }\n    } );\n  }\n\n  // straight flush\n  if ( straightCards ) {\n    for ( const [ suit, cardsSet ] of cardsBySuit.map ) {\n      if ( cardsSet.size > 0 ) {\n        let straightFlushCards: PokerCard[] | undefined;\n        let current: PokerCard[] = [];\n\n        // handle steel wheel\n        const target = 'A' + suit as PokerCard;\n        const a = cardsSet.has( target );\n        if ( a ) {\n          current.push( target );\n        }\n\n        pokerRanksByStrength.map( ( rank ) => {\n          const target = rank + suit as PokerCard;\n          if ( cardsSet.has( target ) ) {\n            current.push( target );\n\n            if ( current.length > 4 ) {\n              straightFlushCards = current;\n            }\n          } else {\n            current = [];\n          }\n        } );\n\n        if ( straightFlushCards ) {\n          straightFlushCards.splice( 0, straightFlushCards.length - 5 );\n\n          const hand = 'StraightFlush';\n          const strength = [\n            pokerHandStrengthMap[ hand ],\n            pokerRankStrengthMap[ straightFlushCards[ 4 ][ 0 ] as PokerRank ],\n          ];\n\n          return {\n            hand,\n            cards: straightFlushCards as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n            strength,\n          };\n        }\n      }\n    }\n  }\n\n  // four of a kind\n  if ( fours.length > 0 ) {\n    fours.sort( ( a, b ) => pokerRankStrengthMap[ a ] - pokerRankStrengthMap[ b ] );\n    fours.splice( 0, fours.length - 1 );\n\n    // 5s, 5c, Kd, 6d, 9c, 5d, 5h\n\n    const sameCards = Array.from( cardsByRank.get( fours[ 0 ] ) );\n    sameCards.map( ( card ) => (\n      cards_.splice( cards_.indexOf( card ), 1 )\n    ) );\n    // Kd, 6d, 9c\n\n    sortPokerCardsByRank( cards_ ).splice( 0, cards_.length - 1 );\n    // Kd\n\n    const hand = 'FourOfAKind';\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ fours[ 0 ] ],\n      pokerRankStrengthMap[ cards_[ 0 ][ 0 ] as PokerRank ],\n    ];\n\n    cards_.push( ...sameCards );\n    sortPokerCardsByRank( cards_ );\n    // 5c, 5d, 5h, 5s, Kd\n\n    return {\n      hand,\n      cards: cards_ as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n\n  // full house\n  if ( threes.length > 0 && threes.length + twos.length > 1 ) {\n    threes.sort( ( a, b ) => pokerRankStrengthMap[ a ] - pokerRankStrengthMap[ b ] );\n\n    // tricky part: it is possible to have two or more threes at once\n    // just transfer threes which is not highest\n    // and wish we'll do this right in the rest of the code\n    twos.push( ...threes.splice( 0, threes.length - 1 ) );\n\n    twos.sort( ( a, b ) => pokerRankStrengthMap[ a ] - pokerRankStrengthMap[ b ] );\n    twos.splice( 0, twos.length - 1 );\n\n    // 7d, 7s, Tc, Td, 7h, 9d, Th\n\n    const sameCards = Array.from( cardsByRank.get( threes[ 0 ] ) );\n    sameCards.push( ...Array.from( cardsByRank.get( twos[ 0 ] ) ) );\n    // sameCards: Tc, Td, Th, 7d, 7s, 7h\n\n    sortPokerCardsByRank( sameCards ).splice( 0, sameCards.length - 5 );\n    // sameCards: 7h, 7s, Tc, Td, Th\n\n    const hand = 'FullHouse';\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ threes[ 0 ] ],\n      pokerRankStrengthMap[ twos[ 0 ] ],\n    ];\n\n    return {\n      hand,\n      cards: sameCards as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n\n  // flush\n  for ( const [ _suit, cardsSet ] of cardsBySuit.map ) {\n    if ( cardsSet.size > 4 ) {\n      const cards = sortPokerCardsByRank( Array.from( cardsSet ) );\n      cards.splice( 0, cards.length - 5 );\n\n      const hand = 'Flush';\n      const strength = [\n        pokerHandStrengthMap[ hand ],\n        ...cards\n          .concat()\n          .reverse()\n          .map( ( card ) => (\n            pokerRankStrengthMap[ card[ 0 ] as PokerRank ]\n          ) ),\n      ];\n\n      return {\n        hand,\n        cards: cards as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n        strength,\n      };\n    }\n  }\n\n  // straight\n  if ( straightCards ) {\n    straightCards.splice( 0, straightCards.length - 5 );\n\n    const hand = 'Straight';\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ straightCards[ 4 ][ 0 ] as PokerRank ],\n    ];\n\n    return {\n      hand,\n      cards: straightCards as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n\n  // three of a kind\n  if ( threes.length > 0 ) {\n    threes.sort( ( a, b ) => pokerRankStrengthMap[ a ] - pokerRankStrengthMap[ b ] );\n    threes.splice( 0, threes.length - 1 );\n\n    // Ah, Ad, Kc, 7s, 4s, Qc, As\n\n    const sameCards = Array.from( cardsByRank.get( threes[ 0 ] ) );\n    sameCards.map( ( card ) => (\n      cards_.splice( cards_.indexOf( card ), 1 )\n    ) );\n    // Kc, 7s, 4s, Qc\n\n    sortPokerCardsByRank( cards_ ).splice( 0, cards_.length - 2 );\n    // Qc, Kc\n\n    const hand = 'ThreeOfAKind';\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ threes[ 0 ] ],\n      pokerRankStrengthMap[ cards_[ 1 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 0 ][ 0 ] as PokerRank ],\n    ];\n\n    cards_.push( ...sameCards );\n    sortPokerCardsByRank( cards_ );\n    // Qc, Kc, Ad, Ah, As\n\n    return {\n      hand,\n      cards: cards_ as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n\n  // two pair\n  if ( twos.length > 1 ) {\n    twos.sort( ( a, b ) => pokerRankStrengthMap[ a ] - pokerRankStrengthMap[ b ] );\n    twos.splice( 0, twos.length - 2 );\n\n    // 4c, 8d, 7h, 4h, 8h, Jc, 2s\n\n    const pairs = Array.from( cardsByRank.get( twos[ 0 ] ) );\n    pairs.push( ...Array.from( cardsByRank.get( twos[ 1 ] ) ) );\n    pairs.map( ( card ) => (\n      cards_.splice( cards_.indexOf( card ), 1 )\n    ) );\n    // 7h, Jc, 2s\n\n    sortPokerCardsByRank( cards_ ).splice( 0, cards_.length - 1 );\n    // Jc\n\n    const hand = 'TwoPair';\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ twos[ 1 ] ],\n      pokerRankStrengthMap[ twos[ 0 ] ],\n      pokerRankStrengthMap[ cards_[ 0 ][ 0 ] as PokerRank ],\n    ];\n\n    cards_.push( ...pairs );\n    sortPokerCardsByRank( cards_ );\n    // 4c, 4h, 8d, 8h, Jc\n\n    return {\n      hand,\n      cards: cards_ as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n\n  // one pair\n  if ( twos.length > 0 ) {\n    // 3c, 5d, 8c, 8s, Ac, Qd, 7h\n\n    const pair = Array.from( cardsByRank.get( twos[ 0 ] ) );\n    pair.map( ( card ) => (\n      cards_.splice( cards_.indexOf( card ), 1 )\n    ) );\n    // 3c, 5d, Ac, Qd, 7h\n\n    sortPokerCardsByRank( cards_ ).splice( 0, cards_.length - 3 );\n    // 7h, Qd, Ac\n\n    const hand = 'OnePair';\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ twos[ 0 ] ],\n      pokerRankStrengthMap[ cards_[ 2 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 1 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 0 ][ 0 ] as PokerRank ],\n    ];\n\n    cards_.push( ...pair );\n    sortPokerCardsByRank( cards_ );\n    // 7h, 8c, 8s, Qd, Ac\n\n    return {\n      hand,\n      cards: cards_ as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n\n  // high card\n  {\n    const hand = 'HighCard';\n\n    // 2h, 5c, 6c, 7s, Td, Ad, Kd\n\n    sortPokerCardsByRank( cards_ );\n    // 2h, 5c, 6c, 7s, Td, Kd, Ad\n\n    cards_.splice( 0, cards_.length - 5 );\n    // 6c, 7s, Td, Kd, Ad\n\n    const strength = [\n      pokerHandStrengthMap[ hand ],\n      pokerRankStrengthMap[ cards_[ 4 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 3 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 2 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 1 ][ 0 ] as PokerRank ],\n      pokerRankStrengthMap[ cards_[ 0 ][ 0 ] as PokerRank ],\n    ];\n\n    return {\n      hand,\n      cards: cards_ as [ PokerCard, PokerCard, PokerCard, PokerCard, PokerCard ],\n      strength,\n    };\n  }\n}\n", "import type { PokerHand } from './PokerHand';\n\nexport const pokerHandsByStrength: PokerHand[] = [\n  'HighCard',\n  'OnePair',\n  'TwoPair',\n  'ThreeOfAKind',\n  'Straight',\n  'Flush',\n  'FullHouse',\n  'FourOfAKind',\n  'StraightFlush',\n];\n", "/**\n * Retry given function for n times.\n *\n * See also: {@link retry}\n */\nexport async function asyncRetry<T>( func: () => Promise<T>, n: number ): Promise<T> {\n  return await func().catch( ( error ) => {\n    if ( n <= 1 ) {\n      throw error;\n    }\n\n    return asyncRetry( func, n - 1 );\n  } );\n}\n", "/**\n * Retry given function for n times.\n *\n * See also: {@link asyncRetry}\n */\nexport function retry<T>( func: () => T, n: number ): T {\n  try {\n    return func();\n  } catch ( error ) {\n    if ( n <= 1 ) {\n      throw error;\n    }\n\n    return retry( func, n - 1 );\n  }\n}\n", "import { STNICCCFrame } from './STNICCCFrame';\n\n/**\n * Ref: http://arsantica-online.com/st-niccc-competition/\n *\n * @param buffer The input ST-NICCC data\n */\nexport function parseSTNICCC( buffer: ArrayBuffer ): STNICCCFrame[] {\n  const frames: STNICCCFrame[] = [];\n\n  const array = new Uint8Array( buffer );\n\n  const palette = new Uint16Array( 16 );\n\n  let head = 0;\n\n  // when poly-descriptor says 0xfe\n  let shouldSkip = false;\n\n  // when poly-descriptor says 0xfd\n  let shouldEnd = false;\n\n  // > Every frame stores the following data:\n  for ( ;; ) {\n    // > 1 byte Flags Bit 0: Frame needs to clear the screen.\n    // > Bit 1: Frame contains palette data.\n    // > Bit 2: Frame is stored in indexed mode.\n    const flags = array[ head ++ ];\n    const needsClear = ( flags & 1 ) === 1;\n    const hasPalette = ( flags >> 1 & 1 ) === 1;\n    const indexedMode = ( flags >> 2 & 1 ) === 1;\n\n    // > If frame contains palette data\n    if ( hasPalette ) {\n      // > 1 word Bitmask\n      const bitmask = array[ head ++ ] << 8 | array[ head ++ ];\n\n      // > For every set bit in the Bitmask (0-15)\n      for ( let i = 0; i < 16; i ++ ) {\n        if ( bitmask >> ( 15 - i ) & 1 ) {\n          // > 1 word Color The color has to be copied into the palette at the reverse index of the actual bit,\n          // > because the bitmask is stored in reverse order.\n          // > In other words: If bit 15 of mask is set -> update color 0 of palette,\n          // > \u2026\n          // > if bit 0 of mask is set -> update color 15 of palette.\n\n          palette[ i ] = array[ head ++ ] << 8 | array[ head ++ ];\n        }\n      }\n    }\n\n    // > If frame is stored in indexed mode\n    if ( indexedMode ) {\n      // > 1 byte Number of vertices (0-255)\n      const nVertices = array[ head ++ ];\n\n      // > For every Vertex\n      // > {\n      // > 1 byte X-position\n      // > 1 byte Y-position\n      // > }\n      const vertices = array.subarray( head, head + 2 * nVertices );\n      head += 2 * nVertices;\n\n      const polygons: { colorIndex: number; indices: number[] }[] = [];\n\n      // > While (\u2026)\n      for ( ;; ) {\n        // > 1 byte Poly-descriptor Contains: hi-nibble - 4 bits color-index\n        // > lo-nibble - 4 bits number of polygon vertices\n        // >\n        // > Some special cases are encoded in the descriptor byte:\n        // > $ff = End of frame\n        // > $fe = End of frame and the stream skips to the next 64KB block\n        // > $fd = End of stream (we are done \\o/)\n        const descriptor = array[ head ++ ];\n\n        if ( descriptor === 0xff ) { // end of frame\n          break;\n\n        } else if ( descriptor === 0xfe ) { // end of frame + skip to the next 64KB\n          shouldSkip = true;\n          break;\n\n        } else if ( descriptor === 0xfd ) { // end of stream\n          shouldEnd = true;\n          break;\n\n        }\n\n        const colorIndex = descriptor >> 4 & 15;\n        const nIndices = descriptor & 15;\n\n        // > For every vertex of the polygon\n        // > {\n        // > 1 byte Vertex-id (0-255)\n        // > }\n        const indices = array.subarray( head, head + nIndices );\n        head += nIndices;\n\n        polygons.push( {\n          colorIndex,\n          indices: Array.from( indices ),\n        } );\n      }\n\n      frames.push( {\n        needsClear,\n        indexedMode,\n        palette: Array.from( palette ),\n        vertices: Array.from( vertices ),\n        polygons,\n      } );\n\n    // > Else if frame is stored in non-indexed mode\n    } else {\n      const polygons: { colorIndex: number; vertices: number[] }[] = [];\n\n      // > While (\u2026)\n      for ( ;; ) {\n        // > 1 byte Poly-descriptor (See indexed mode)\n        const descriptor = array[ head ++ ];\n\n        if ( descriptor === 0xff ) { // end of frame\n          break;\n\n        } else if ( descriptor === 0xfe ) { // end of frame + skip to the next 64KB\n          shouldSkip = true;\n          break;\n\n        } else if ( descriptor === 0xfd ) { // end of stream\n          shouldEnd = true;\n          break;\n\n        }\n\n        const colorIndex = descriptor >> 4 & 15;\n        const nVertices = descriptor & 15;\n\n        // > For every vertex of the polygon\n        // > {\n        // > 1 byte Vertex-id (0-255)\n        // > }\n        const vertices = array.subarray( head, head + 2 * nVertices );\n        head += 2 * nVertices;\n\n        polygons.push( {\n          colorIndex,\n          vertices: Array.from( vertices ),\n        } );\n      }\n\n      frames.push( {\n        needsClear,\n        indexedMode,\n        palette: Array.from( palette ),\n        polygons,\n      } );\n    }\n\n    if ( shouldSkip ) {\n      head = ( Math.floor( head / 0x10000 ) + 1 ) * 0x10000;\n      shouldSkip = false;\n    }\n\n    if ( shouldEnd ) {\n      break;\n    }\n  }\n\n  return frames;\n}\n", "import { STNICCCFrame } from './STNICCCFrame';\nimport { colorFromAtariST } from '../color/colorFromAtariST';\nimport { colorToHex } from '../color/colorToHex';\n\nexport function stnicccToSVG( frames: STNICCCFrame[], options: {\n  fps?: number;\n} = {} ): string {\n  const delta = 1.0 / ( options?.fps ?? 30.0 );\n\n  let svg = '<svg width=\"256\" height=\"200\" viewBox=\"0 0 256 200\" xmlns=\"http://www.w3.org/2000/svg\">';\n\n  let style = `g{visibility:hidden;animation-duration:${ ( delta * frames.length ).toFixed( 3 ) }s;animation-iteration-count:infinite;animation-name:frame}@keyframes frame{0%{visibility:visible}${ 200.0 / frames.length }%{visibility:hidden}}`;\n\n  frames.map( ( frame, iFrame ) => {\n    const { indexedMode, palette, polygons } = frame;\n\n    style += `#f${ iFrame }{animation-delay:${ ( delta * iFrame ).toFixed( 3 ) }s}`;\n\n    const paletteInHex = palette.map( ( stColor ) => {\n      const color = colorFromAtariST( stColor );\n      return colorToHex( color );\n    } );\n\n    let childrenStr = '<rect width=\"256\" height=\"200\" fill=\"#000\" />';\n\n    let currentColorIndex = -1;\n    let d = '';\n\n    if ( indexedMode ) {\n      const { vertices } = frame;\n\n      polygons.map( ( { colorIndex, indices } ) => {\n        if ( currentColorIndex !== colorIndex ) {\n          if ( currentColorIndex !== -1 ) {\n            const colorHex = paletteInHex[ currentColorIndex ];\n            childrenStr += `<path d=\"${ d }\" fill=\"${ colorHex }\" />`;\n          }\n\n          currentColorIndex = colorIndex;\n          d = '';\n        }\n\n        for ( let i = 0; i < indices.length; i ++ ) {\n          const index = indices[ i ];\n          const x = vertices[ 2 * index ];\n          const y = vertices[ 2 * index + 1 ];\n\n          d += i === 0\n            ? `M${ x },${ y }`\n            : `L${ x },${ y }`;\n        }\n      } );\n    } else {\n      polygons.map( ( { colorIndex, vertices } ) => {\n        if ( currentColorIndex !== colorIndex ) {\n          if ( currentColorIndex !== -1 ) {\n            const colorHex = paletteInHex[ currentColorIndex ];\n            childrenStr += `<path d=\"${ d }\" fill=\"${ colorHex }\" />`;\n          }\n\n          currentColorIndex = colorIndex;\n          d = '';\n        }\n\n        for ( let i = 0; i < vertices.length; i += 2 ) {\n          const x = vertices[ i ];\n          const y = vertices[ i + 1 ];\n\n          d += i === 0\n            ? `M${ x },${ y }`\n            : `L${ x },${ y }`;\n        }\n      } );\n    }\n\n    const colorHex = paletteInHex[ currentColorIndex ];\n    childrenStr += `<path d=\"${ d }\" fill=\"${ colorHex }\" />`;\n\n    svg += `<g id=\"f${ iFrame }\">${ childrenStr }</g>`;\n  } );\n\n  svg += `<style>${style}</style></svg>`;\n\n  return svg;\n}\n", "/**\n * The naive implementation of so-called SmoothDamp.\n * Pretty much the same as {@link CDS}, but it has a way easier parameter to tweak, {@link smoothTime}.\n *\n * Ref: Game Programming Gems 4, Chapter 1.10\n *\n * See: https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\n */\nexport class SmoothDamp {\n  public smoothTime = 1.0;\n  public velocity = 0.0;\n  public value = 0.0;\n  public target = 0.0;\n\n  public update( deltaTime: number ): number {\n    const omega = 2.0 / this.smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1.0 / ( 1.0 + x + 0.48 * x * x + 0.235 * x * x * x );\n    const delta = this.value - this.target;\n    const temp = ( this.velocity + omega * delta ) * deltaTime;\n    this.velocity = ( this.velocity - omega * temp ) * exp;\n    this.value = this.target + ( delta + temp ) * exp;\n    return this.value;\n  }\n}\n", "/**\n * Useful for swap buffer\n */\nexport class Swap<T> {\n  public i: T;\n  public o: T;\n\n  public constructor( a: T, b: T ) {\n    this.i = a;\n    this.o = b;\n  }\n\n  public swap(): void {\n    const i = this.i;\n    this.i = this.o;\n    this.o = i;\n  }\n}\n", "import { HistoryMeanCalculator } from '../HistoryMeanCalculator/HistoryMeanCalculator';\n\nexport class TapTempo {\n  private __bpm = 0.0;\n  private __lastTap = 0.0;\n  private __lastBeat = 0.0;\n  private __lastTime = 0.0;\n  private __calc: HistoryMeanCalculator = new HistoryMeanCalculator( 16 );\n\n  public get beatDuration(): number {\n    return 60.0 / this.__bpm;\n  }\n\n  public get bpm(): number {\n    return this.__bpm;\n  }\n\n  public set bpm( bpm: number ) {\n    this.__lastBeat = this.beat;\n    this.__lastTime = performance.now();\n    this.__bpm = bpm;\n  }\n\n  public get beat(): number {\n    return this.__lastBeat + ( performance.now() - this.__lastTime ) * 0.001 / this.beatDuration;\n  }\n\n  public reset(): void {\n    this.__calc.reset();\n  }\n\n  public nudge( amount: number ): void {\n    this.__lastBeat = this.beat + amount;\n    this.__lastTime = performance.now();\n  }\n\n  public tap(): void {\n    const now = performance.now();\n    const delta = ( now - this.__lastTap ) * 0.001;\n\n    if ( 2.0 < delta ) {\n      this.reset();\n    } else {\n      this.__calc.push( delta );\n      this.__bpm = 60.0 / ( this.__calc.mean );\n    }\n\n    this.__lastTap = now;\n    this.__lastTime = now;\n    this.__lastBeat = 0.0;\n  }\n}\n", "import { arraySerial } from '../array';\n\n/**\n * Parse a polyphonic tinyseq buffer.\n *\n * Returns [ time, offTime, note, reserved, time, offTime, note, reserved, ... ]\n */\nexport function createTinyseqPolyReader(\n  buffer: Uint8Array,\n  options: {\n    poly?: number,\n    blockSize?: number,\n    sampleRate?: number,\n    stepsPerSecond?: number,\n  } = {},\n): () => Float32Array[] {\n  const poly = options.poly ?? 8;\n  const blockSize = options.blockSize ?? 128;\n  const sampleRate = options.sampleRate ?? 48000;\n  const stepsPerSecond = options.stepsPerSecond ?? 1.0;\n\n  let samples = 0;\n  let pos = 0;\n  let note: number;\n  const notes = arraySerial( poly ).fill( -1 );\n  const notesTime = arraySerial( poly ).fill( -Infinity );\n  const notesOffTime = arraySerial( poly ).fill( -Infinity );\n  let nextStep = 0;\n\n  return () => {\n    const ret = arraySerial( poly ).map( () => new Float32Array( 4 * blockSize ) );\n\n    arraySerial( blockSize ).map( ( iSample ) => {\n      const t = samples / sampleRate;\n      const s = t * stepsPerSecond;\n\n      if ( s >= nextStep ) {\n        const eventNote = buffer[ pos ];\n        const eventDeltaStep = buffer[ pos + 1 ];\n\n        note = ( ( pos === 0 ? 60 : note ) + eventNote ) & 127;\n\n        // find same note\n        let iPoly = notes.indexOf( note );\n\n        // find earliest note off\n        let tEarliest = Infinity;\n\n        if ( iPoly === -1 ) {\n          notesTime.map( ( tOn, jPoly ) => {\n            const tOff = notesOffTime[ jPoly ];\n            if ( tOn <= tOff ) {\n              if ( tOff < tEarliest ) {\n                iPoly = jPoly;\n                tEarliest = tOff;\n              }\n            }\n          } );\n        }\n\n        // find earliest note on\n        if ( iPoly === -1 ) {\n          notesTime.map( ( tOn, jPoly ) => {\n            if ( tOn < tEarliest ) {\n              iPoly = jPoly;\n              tEarliest = tOn;\n            }\n          } );\n        }\n\n        notes[ iPoly ] = note;\n\n        if ( eventNote & 128 ) {\n          if ( notesOffTime[ iPoly ] < notesTime[ iPoly ] ) {\n            notesOffTime[ iPoly ] = t;\n          }\n        } else {\n          if ( notesOffTime[ iPoly ] >= notesTime[ iPoly ] ) {\n            notesTime[ iPoly ] = t;\n          }\n        }\n\n        nextStep += eventDeltaStep;\n\n        pos = ( pos + 2 ) % buffer.length;\n      }\n\n      samples ++;\n\n      arraySerial( poly ).map( ( iPoly ) => {\n        const noteTime = notesTime[ iPoly ];\n        const noteOffTime = notesOffTime[ iPoly ];\n\n        ret[ iPoly ][ 4 * iSample + 0 ] = t - noteTime; // time\n        ret[ iPoly ][ 4 * iSample + 1 ] = noteOffTime < noteTime ? 0.0 : t - noteOffTime; // offTime\n        ret[ iPoly ][ 4 * iSample + 2 ] = notes[ iPoly ]; // note\n        ret[ iPoly ][ 4 * iSample + 3 ] = 0.0; // reserved\n      } );\n    } );\n\n    return ret;\n  };\n}\n", "import { arraySerial } from '../array';\n\n/**\n * Parse a tinyseq buffer.\n *\n * Returns [ time, offTime, note, reserved, time, offTime, note, reserved, ... ]\n */\nexport function createTinyseqReader(\n  buffer: Uint8Array,\n  options: {\n    blockSize?: number,\n    sampleRate?: number,\n    stepsPerSecond?: number,\n  } = {},\n): () => Float32Array {\n  const blockSize = options.blockSize ?? 128;\n  const sampleRate = options.sampleRate ?? 48000;\n  const stepsPerSecond = options.stepsPerSecond ?? 960.0;\n\n  let samples = 0;\n  let pos = 0;\n  let note: number;\n  let noteTime = -Infinity;\n  let noteOffTime = -Infinity;\n  let nextStep = 0;\n\n  return () => {\n    return new Float32Array( arraySerial( blockSize ).map( () => {\n      const t = samples / sampleRate;\n      const s = t * stepsPerSecond;\n\n      if ( s >= nextStep ) {\n        const eventNote = buffer[ pos ];\n        const eventDeltaStep = buffer[ pos + 1 ];\n\n        note = ( ( pos === 0 ? 60 : note ) + eventNote ) & 127;\n        if ( eventNote & 128 ) {\n          if ( noteOffTime < noteTime ) {\n            noteOffTime = t;\n          }\n        } else {\n          if ( noteOffTime >= noteTime ) {\n            noteTime = t;\n          }\n        }\n\n        nextStep += eventDeltaStep;\n\n        pos = ( pos + 2 ) % buffer.length;\n      }\n\n      samples ++;\n\n      return [\n        t - noteTime, // time\n        noteOffTime < noteTime ? 0.0 : t - noteOffTime, // offTime\n        note, // note\n        0.0, // reserved\n      ];\n    } ).flat() );\n  };\n}\n", "import { MidiParseResult } from '../midi';\nimport { arraySerial } from '../array';\n\n/**\n * Convert the parsed midi result to a tinyseq binary.\n *\n * See: {@link midiParse}\n *\n * @param midi The parsed midi result\n * @param track The index of the midi track you want to convert\n * @param tickMultiplier Multiply this value to tick\n * @returns A tinyseq binary\n */\nexport function tinyseqFromMidiParseResult(\n  midi: MidiParseResult,\n  { track, tickMultiplier }: {\n    track?: number,\n    tickMultiplier?: number,\n  } = {},\n): Uint8Array {\n  const data: number[] = [];\n  let lastNote = 60;\n  let delta = 0;\n\n  const trackEvents = midi[ 1 ][ track ?? 0.0 ];\n\n  // [ delta, midi event, note, vel ][] -> [ onoff (0 or 128) + deltaNote, delta, ... ]\n  // [ [ 4, 144, 60, 100 ], [ 4, 128, 60, 100 ] ] -> [ 128, 4, 0, 4, 128, 0 ]\n\n  arraySerial( trackEvents.length + 1 ).map( ( i ) => {\n    delta += ( trackEvents[ i ]?.[ 0 ] ?? 0 ) * ( tickMultiplier ?? 1.0 );\n\n    if ( delta === 0 && i === 0 ) { return; } // ignore if it's the first event and delta is 0\n\n    const evMsg = trackEvents[ i - 1 ]?.[ 1 ] ?? 128;\n    const evNote = trackEvents[ i - 1 ]?.[ 2 ] ?? 60;\n\n    if ( evMsg >= 160 ) { return; } // ignore if the msg is not a note event\n\n    const noteDelta = ( evNote - lastNote + 128 ) & 127;\n    lastNote = evNote;\n    const onoff = evMsg < 144 ? 128 : 0; // 0 if on (144 - 159), 128 if off (128 - 143)\n\n    // probably 240 is more efficient than 256 since the division in most of midi files are 480 or 960\n    let deltaConsume = Math.floor( Math.min( delta, 240 ) );\n    data.push( noteDelta + onoff, deltaConsume );\n    delta -= deltaConsume;\n\n    while ( delta >= 1 ) {\n      deltaConsume = Math.floor( Math.min( delta, 240 ) );\n      data.push( onoff, deltaConsume );\n      delta -= deltaConsume;\n    }\n  } );\n\n  return new Uint8Array( data );\n}\n", "export class Xorshift {\n  public seed: number;\n\n  public constructor( seed?: number ) {\n    this.seed = seed || 1;\n  }\n\n  public gen( seed?: number ): number {\n    if ( seed ) {\n      this.seed = seed;\n    }\n\n    this.seed = this.seed ^ ( this.seed << 13 );\n    this.seed = this.seed ^ ( this.seed >>> 17 );\n    this.seed = this.seed ^ ( this.seed << 5 );\n    return this.seed / Math.pow( 2, 32 ) + 0.5;\n  }\n\n  public set( seed?: number ): void {\n    this.seed = seed || this.seed || 1;\n  }\n}\n\nexport default Xorshift;\n", "import { linearstep } from '../math/utils';\n\n/**\n * https://twitter.com/yugop\n *\n * @param text The input text\n * @param phase The value between 0.0 and 1.0\n * @param randomRatio The nerd value\n */\nexport function getYugopText( text: string, phase: number, randomRatio = 0.5 ): string {\n  if ( phase >= 1.0 ) { return text; }\n  if ( phase < 0.0 ) { return ''; }\n\n  /*\n   * ------=====\n   * .------====\n   * ..------===\n   * ...------==\n   * ....------=\n   * ^     ^   ^\n   * |     |   |\n   * |     |   phase is 1.0\n   * |     phase is randomRatio\n   * phase is 0.0\n   */\n\n  const displayTween = linearstep( 0.0, 1.0 - randomRatio, phase );\n  const fixTween = linearstep( randomRatio, 1.0, phase );\n\n  const displayLength = 1.0 + Math.floor( displayTween * ( text.length - 1 ) );\n  const fixLength = phase < randomRatio ? 0 : 1.0 + Math.floor( fixTween * ( text.length - 1 ) );\n  const randomLength = displayLength - fixLength;\n\n  const randomStr = [ ...Array( randomLength ) ]\n    .map( () => String.fromCharCode( 33 + Math.floor( 93 * Math.random() ) ) )\n    .join( '' );\n\n  return text.substring( 0, fixLength ) + randomStr;\n}\n"],
  "mappings": ";ywBAAA,u4GCcO,YACL,EACA,EACQ,CACR,GAAK,MAAO,IAAqB,WAC/B,MAAO,IAAc,EAAO,AAAE,GAAe,EAAU,GAEzD,GAAM,GAAU,EAEZ,EAAQ,EACR,EAAM,EAAM,OAEhB,KAAQ,EAAQ,GAAM,CACpB,GAAM,GAAW,EAAQ,GAAS,EAC5B,EAAgB,EAAO,GAI7B,AAFsB,EAAS,GAG7B,EAAQ,EAAS,EAEjB,EAAM,EAIV,MAAO,GCfF,YACL,EACA,EACM,CACN,GAAM,GAA4B,CAAE,GAC9B,EAAY,GAAI,KAAY,GAElC,KAAQ,EAAiB,OAAS,GAAI,CACpC,GAAM,GAAc,EAAiB,QAE/B,EAAW,EAAW,GAE5B,GAAK,CAAC,EACJ,MAGF,GAAM,GAAa,EAAS,OAAQ,AAAE,GAAU,CAAC,EAAU,IAAK,IAChE,EAAiB,QAAS,GAAG,GAC7B,EAAW,IAAK,AAAE,GAAU,EAAU,IAAK,KC1CxC,YAAqB,EAAe,EAAa,EAA0B,CAChF,GAAI,GAAU,EACR,EAAgB,GAEtB,GAAK,EAAQ,EAEX,IADA,EAAO,UAAQ,EACP,EAAU,GAChB,EAAI,KAAM,GACV,GAAW,MAIb,KADA,EAAO,UAAQ,GACP,EAAU,GAChB,EAAI,KAAM,GACV,GAAW,EAIf,MAAO,GClBF,GAAM,GAAc,AAAE,GAC3B,CAAE,GAAG,MAAO,IAAU,IAAK,CAAE,EAAG,IAAO,GCDlC,YAA4B,EAAiB,EAAoB,CACtE,GAAM,GAAQ,EAAM,QAAS,GAC7B,MAAK,KAAU,GAAc,GAE7B,GAAM,OAAQ,EAAO,GACd,IAGF,YAAyB,EAAiB,EAAoB,CACnE,MAAO,GAAM,QAAS,KAAY,GAG7B,YAAyB,EAAiB,EAAoB,CAEnE,MAAK,AADS,GAAM,QAAS,KACd,GAAc,GAE7B,GAAM,KAAM,GACL,IAGF,YAA2B,EAAa,EAAwB,CACrE,GAAM,GAAM,CAAE,GAAG,GACjB,SAAE,QAAS,AAAE,GAAO,CAClB,AAAM,GAAa,EAAK,IACtB,EAAI,KAAM,KAGP,EAGF,YAA0B,EAAgB,EAA2B,CAC1E,GAAM,GAAM,CAAE,GAAG,GACjB,SAAK,QAAS,AAAE,GAAO,CACrB,GAAgB,EAAK,KAEhB,EChCF,GAAM,IAAsB,CAAE,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAKjD,GAAyB,CAAE,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAKhE,GAA6B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKhE,GAAyB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GCftD,YAA0B,EAAY,EAA2B,CACtE,GAAM,GAAI,GAAc,KAAM,KAAK,UACnC,OAAU,GAAI,EAAG,EAAI,EAAM,OAAS,EAAG,IAAO,CAC5C,GAAM,GAAK,EAAI,KAAK,MAAO,IAAQ,GAAM,OAAS,IAC5C,EAAO,EAAO,GACpB,EAAO,GAAO,EAAO,GACrB,EAAO,GAAM,EAEf,MAAO,GAQF,YAAiC,EAAkB,CACxD,GAAM,GAAW,GACjB,OAAU,GAAI,EAAG,EAAI,EAAM,OAAS,EAAG,IAAO,CAC5C,GAAM,GAAO,EAAI,EACjB,EAAI,KACF,EAAO,GAAY,EAAO,EAAO,GACjC,EAAO,EAAO,GAAK,EAAO,EAAO,GACjC,EAAO,EAAO,GAAK,EAAO,IAG9B,MAAO,GAMF,YAAmB,EAAW,EAAsB,CACzD,GAAM,GAAgB,GACtB,OAAU,GAAK,EAAG,EAAK,EAAG,IACxB,OAAU,GAAK,EAAG,EAAK,EAAG,IACxB,EAAI,KAAM,EAAI,GAGlB,MAAO,GAMF,YAAmB,EAAW,EAAW,EAAsB,CACpE,GAAM,GAAgB,GACtB,OAAU,GAAK,EAAG,EAAK,EAAG,IACxB,OAAU,GAAK,EAAG,EAAK,EAAG,IACxB,OAAU,GAAK,EAAG,EAAK,EAAG,IACxB,EAAI,KAAM,EAAI,EAAI,GAIxB,MAAO,GCpDF,YAAU,CAAV,aALP,CAMS,YAAS,IACT,WAAQ,EACR,cAAW,EACX,WAAQ,EACR,YAAS,EAET,OAAQ,EAA4B,CACzC,YAAK,UACH,EAAC,KAAK,OAAW,MAAK,MAAQ,KAAK,QACjC,EAAM,KAAK,SAAW,KAAK,KAAM,KAAK,QAAW,KAAK,OACtD,EACJ,KAAK,OAAS,KAAK,SAAW,EACvB,KAAK,QCbT,YAAY,CAAZ,aALP,CASY,YAAS,EAKT,iBAAc,EAKd,iBAAc,MAKb,OAAe,CAAE,MAAO,MAAK,UAK7B,YAAoB,CAAE,MAAO,MAAK,eAKlC,YAAqB,CAAE,MAAO,MAAK,YAMvC,OAAQ,EAAsB,CACnC,GAAM,GAAW,KAAK,OACtB,KAAK,OAAS,GAAQ,EACtB,KAAK,YAAc,KAAK,OAAS,EAM5B,MAAa,CAClB,KAAK,YAAc,GAMd,OAAc,CACnB,KAAK,YAAc,GAOd,QAAS,EAAqB,CACnC,KAAK,OAAS,IC1DX,oBAAyB,GAAM,CAW7B,YAAa,EAAM,GAAK,CAC7B,QARM,aAAU,EAShB,KAAK,MAAQ,KAMJ,QAAgB,CAAE,MAAO,MAAK,WAK9B,MAAc,CAAE,MAAO,MAAK,MAKhC,QAAe,CACpB,AAAK,KAAK,YACR,MAAK,OAAS,KAAK,QAAU,KAAK,MAClC,KAAK,YAAc,EAAM,KAAK,MAC9B,KAAK,WAEL,KAAK,YAAc,EAShB,QAAS,EAAqB,CACnC,KAAK,QAAU,KAAK,MAAO,KAAK,MAAQ,GACxC,KAAK,OAAS,KAAK,QAAU,KAAK,QC/C/B,oBAA4B,GAAM,CAAlC,aANP,CAMO,oBAIG,cAAW,EAKX,cAAmB,YAAY,SAK5B,aAAsB,CAAE,MAAO,GAKnC,QAAe,CACpB,GAAM,GAAM,YAAY,MAExB,GAAK,KAAK,YAAc,CACtB,GAAM,GAAW,KAAK,OAChB,EAAc,EAAM,KAAK,SAC/B,KAAK,OAAS,KAAK,SAAW,EAAY,IAC1C,KAAK,YAAc,KAAK,KAAO,MAE/B,MAAK,SAAW,KAAK,KACrB,KAAK,SAAW,EAChB,KAAK,YAAc,EAQhB,QAAS,EAAqB,CACnC,KAAK,OAAS,EACd,KAAK,SAAW,KAAK,KACrB,KAAK,SAAW,YAAY,QCxCzB,YAA2B,EAA0B,CAC1D,MAAO,CACH,IAAW,EAAI,GAAM,EACrB,IAAW,EAAI,GAAM,EACrB,GAAU,GAAM,GCRf,YAAe,EAAW,EAAW,EAAoB,CAC9D,MAAO,GAAM,GAAI,GAAM,EAMlB,YAAgB,EAAW,EAAW,EAAoB,CAC/D,MAAO,MAAK,IAAK,KAAK,IAAK,EAAG,GAAK,GAM9B,WAAmB,EAAoB,CAC5C,MAAO,IAAO,EAAG,EAAK,GAMjB,YAAgB,EAAW,EAAY,EAAY,EAAY,EAAqB,CACzF,MAAW,GAAI,GAAS,GAAK,GAAS,GAAK,GAAO,EAM7C,YAAqB,EAAW,EAAW,EAAoB,CACpE,MAAO,GAAY,GAAI,GAAQ,GAAI,IAM9B,YAAqB,EAAW,EAAW,EAAoB,CACpE,GAAM,GAAI,GAAY,EAAG,EAAG,GAC5B,MAAO,GAAI,EAAM,GAAM,EAAM,GAMxB,YAAuB,EAAW,EAAW,EAAoB,CACtE,GAAM,GAAI,GAAY,EAAG,EAAG,GAC5B,MAAO,GAAI,EAAI,EAAM,GAAM,GAAI,EAAM,IAAS,IAMzC,YAAwB,EAAW,EAAW,EAAoB,CACvE,GAAM,GAAI,GAAY,EAAG,EAAG,GAC5B,MAAO,GAAI,EAAI,EAAI,EAAM,GAAM,GAAM,KAAQ,EAAI,IAAS,IAAS,IC/C9D,YAAuB,CAAE,EAAG,EAAG,GAA0C,CAC9E,GAAM,GAAK,EAAI,EAAM,EAErB,MAAO,CAAE,EAAK,EAAK,GAAM,IAAK,AAAE,GAAO,CACrC,GAAM,GAAO,KAAK,IAAK,KAAK,IAC1B,KAAK,IAAO,GAAK,GAAM,EAAM,GAAQ,EACpC,GAAO,GACJ,EAAO,GAAM,EAAK,EAAM,GAC9B,MAAO,GAAI,ICVR,YAAqB,EAAwB,CAClD,MAAO,IAAM,EAAM,IAAK,AAAE,GACtB,KAAQ,KAAK,MAAO,EAAU,GAAM,KAAU,SAAU,KAAO,MAAO,KACtE,KAAM,ICPL,WAAqC,EAAS,EAAkB,CACrE,MAAO,GAAK,OAAQ,CAAE,EAAK,EAAG,IAAO,EAAM,EAAI,EAAM,GAAK,GCJ5D,AAiBO,YAAqB,EAAoB,CAC9C,GAAM,GAAK,CACT,UAAY,UAAY,aACxB,aAAc,cAAe,aAEzB,EAAK,CACT,UAAY,WAAY,WACxB,aAAc,WAAY,YAEtB,EAAK,CACT,SAAY,YAAa,aACzB,aAAc,aAAc,aAGxB,EAAK,EAAU,GACf,EAAK,CACT,EACA,EACA,EAAK,EACL,EAAK,EAAK,EACV,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EAAK,GAStB,MANY,CACV,EAAU,EAAQ,EAAI,IACtB,EAAU,EAAQ,EAAI,IACtB,EAAU,EAAQ,EAAI,KCvCnB,YAAqB,EAAwB,CAClD,MAAO,GAAM,IAAK,AAAE,GAClB,EAAI,KACA,EAAI,IACJ,KAAK,IAAO,GAAI,MAAU,MAAO,EAAM,MCJxC,YAAqB,EAA4B,CACtD,MAAO,GAAU,IAAK,AAAE,GACtB,EAAI,KACA,IAAM,EACN,MAAQ,KAAK,IAAK,EAAG,KAAS,MCA/B,YAA6B,EAAwB,EAAsB,CAChF,MAAO,GACJ,OAAQ,AAAE,GAAU,EAAM,KAAQ,GAClC,IAAK,AAAE,GAAU,EAAM,ICDrB,YAA+B,EAAwB,EAAsB,CAClF,GAAM,GAAY,GAAI,KAEtB,UAAU,EAAa,AAAE,GAAU,CACjC,GAAM,GAAU,GAAiB,EAAO,GACxC,SAAQ,IAAK,AAAE,GAAY,EAAU,IAAK,IACnC,IAGF,MAAM,KAAM,GCXd,YAA8B,EAAwB,EAAiB,CAC5E,MAAO,GACJ,OAAQ,AAAE,GAAU,EAAM,KAAQ,GAClC,IAAK,AAAE,GAAU,EAAM,ICDrB,YAAiC,EAAwB,EAAiB,CAC/E,GAAM,GAAc,GAAI,KAExB,UAAU,EAAQ,AAAE,GAAU,CAC5B,GAAM,GAAW,GAAkB,EAAO,GAC1C,SAAS,IAAK,AAAE,GAAW,EAAY,IAAK,IACrC,IAGF,MAAM,KAAM,GCTd,YAA4B,EAAwB,EAA2B,CAXtF,QAYE,MAAO,QAAM,KAAM,AAAE,GAAU,EAAM,KAAQ,KAAtC,cAAuD,KAAvD,OAA8D,KCHhE,YAA6B,EAAwB,EAAkB,CAC5E,GAAM,GAAa,GAEb,EAAU,GAAI,KAAK,GACrB,EAAY,EAAM,SAEtB,KAAQ,EAAU,OAAS,GACzB,EAAQ,QAAS,AAAE,GAAU,CAI3B,AAAM,AAFa,GAAgB,EAAW,IAAU,MAGtD,GAAQ,OAAQ,GAChB,EAAM,KAAM,GAGZ,EAAY,EAAU,OAAQ,CAAE,CAAE,KAAa,IAAQ,MAK7D,MAAO,GAAM,OAAQ,MAAM,KAAM,ICjB5B,YACL,EACA,EACA,EACA,EACM,CAEN,GAAI,GAAI,EAGF,EAAI,GAAI,cAAc,GAC5B,EAAG,GAAM,EAGT,GAAM,GAAI,GAAI,cAAc,EAAS,GACrC,EAAG,GAAM,KACT,EAAG,GAAM,IAGT,GAAM,GAAI,GAAI,cAAc,GAC5B,OAAU,GAAI,EAAG,EAAI,EAAQ,IAC3B,EAAG,GAAM,EAAM,EAAS,EAAI,GAI9B,OAAU,GAAI,EAAG,EAAI,EAAQ,IAAO,CAClC,GAAI,GAAI,EAER,KAAQ,GAAK,GACX,GAAM,GAAG,GAAM,EAAI,EAAI,EAAG,EAAG,IAAQ,EAAG,GAAM,EAAG,IAAU,GAAM,EAAI,EAAM,EAAG,IACzE,GAAK,EAAG,KACX,IAMJ,IACA,EAAG,GAAM,EACT,EAAG,GAAM,EACT,EAAG,EAAI,GAAM,IAGf,EAAI,EAGJ,OAAU,GAAI,EAAG,EAAI,EAAQ,IAAO,CAClC,KAAQ,EAAG,EAAI,GAAM,GAAM,IAC3B,GAAM,GAAS,EAAI,EAAG,GACtB,EAAM,EAAS,EAAI,GAAW,EAAG,EAAG,IAAQ,EAAS,GAYlD,YACL,EACA,EACA,EACM,CACN,OAAU,GAAI,EAAG,EAAI,EAAO,IAC1B,GAAO,EAAM,EAAG,EAAO,GAGzB,OAAU,GAAI,EAAG,EAAI,EAAQ,IAC3B,GAAO,EAAM,EAAI,EAAO,EAAG,GC/ExB,YAAgB,CAAhB,aALP,CAMS,YAAS,GACT,YAAS,EACT,WAAQ,EAER,OAAQ,EAA4B,CACzC,YAAK,MAAQ,GAAM,KAAK,OAAQ,KAAK,MAAO,KAAK,IAAK,CAAC,KAAK,OAAS,IAC9D,KAAK,QCZT,YAAc,CASZ,YAAa,EAAa,CAN1B,WAAQ,EAOb,KAAK,MAAQ,KALJ,UAAa,CACtB,MAAO,MAAK,MAAO,KAAK,OAOnB,MAAU,CACf,YAAK,MAAU,MAAK,MAAQ,GAAM,KAAK,MAAM,OACtC,KAAK,UCbT,YAAe,OAQN,aAAa,EAA8D,CACvF,MAAO,IAAI,KAAK,EAAG,0BAA2B,IAAK,mCAG9C,YAAa,EAA6B,CAC/C,KAAK,GAAK,EAEV,GAAM,GAAU,GAAI,OAAO,MAAO,KAAM,GAAI,IAAK,IAAM,EAAG,eAC1D,KAAK,QAAU,GAAI,IAAM,GAEzB,KAAK,MAAQ,GAEb,KAAK,IAAM,EAAG,aAAc,mCAE5B,KAAK,YAAc,GAAI,KAGvB,GAAM,GAAS,IAAY,CACzB,KAAK,SACL,sBAAuB,IAEzB,IAGK,QAAe,CACpB,MAAM,KAAM,KAAK,aAAc,QAAS,AAAE,GAAU,KAGzC,QAAS,EAAoC,iCACxD,GAAM,CAAE,MAAO,KAEf,GAAK,KAAK,MAAM,SAAW,EAAI,CAC7B,EAAG,SAAU,KAAK,IAAI,kBACtB,GAAM,GAAuB,KAAK,MAAO,KAAK,QAAQ,SAEtD,KAAK,MAAQ,KAAK,MAAM,IAAK,AAAQ,GAAkB,yBACrD,MAAS,MAAM,IAAmB,MAAM,OAI5C,KAAK,MAAM,KAAM,QAAQ,QAAS,IAElC,EAAG,WAAY,KAAK,IAAI,iBAAkB,KAAK,QAAQ,QAEvD,IAEA,EAAG,SAAU,KAAK,IAAI,kBAEtB,GAAM,GAAe,KAAK,MAAM,MAC1B,EAAc,KAAK,MAAO,KAAK,QAAQ,SAE7C,MAAK,MAAK,MAAM,SAAW,GACzB,MAAK,MAAQ,KAAK,MAAM,IAAK,AAAQ,GAAkB,yBACrD,MAAS,MAAM,IAAmB,MAAM,OAG1C,EAAG,WAAY,KAAK,IAAI,iBAAkB,KAAK,QAAQ,SAGhD,MAAM,IAAmB,MAAM,MAGnC,MAAO,EAAqC,CACjD,GAAM,CAAE,MAAO,KAEf,MAAO,IAAI,SAAS,AAAE,GAAa,CACjC,GAAM,GAAO,IAAY,CAGvB,AAAK,AAFe,EAAG,kBAAmB,EAAO,EAAG,yBAGlD,MAAK,YAAY,OAAQ,GACzB,EAAS,EAAG,kBAAmB,EAAO,EAAG,cAAiB,KAAQ,QAItE,KAAK,YAAY,IAAK,OCjFrB,YAA4B,CAS1B,YAAa,EAAiB,CAR7B,qBAAkB,EAClB,wBAAqB,EACrB,eAAsB,GACtB,aAAU,EAEV,aAAU,EACV,aAAU,EAGhB,KAAK,SAAW,EAChB,KAAK,gBAAkB,EACvB,OAAU,GAAI,EAAG,EAAI,EAAQ,IAC3B,KAAK,UAAW,GAAM,KAIf,OAAe,CACxB,GAAM,GAAQ,KAAK,IAAK,KAAK,QAAS,KAAK,UAC3C,MAAO,KAAU,EAAI,EAAM,KAAK,QAAU,KAGjC,gBAAwB,CACjC,MAAO,MAAK,mBAGH,eAAe,EAAgB,CACxC,GAAM,GAAQ,EAAQ,KAAK,gBAC3B,KAAK,gBAAkB,EACvB,KAAK,mBAAqB,KAAK,IAAK,EAAG,KAAK,mBAAqB,GAG5D,OAAc,CACnB,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,QAAU,EACf,KAAK,mBAAqB,EAC1B,OAAU,GAAI,EAAG,EAAI,KAAK,SAAU,IAClC,KAAK,UAAW,GAAM,EAInB,KAAM,EAAsB,CACjC,GAAM,GAAO,KAAK,UAAW,KAAK,SAClC,KAAK,UAAW,KAAK,SAAY,EACjC,KAAK,UACL,KAAK,QAAY,MAAK,QAAU,GAAM,KAAK,SAE3C,AAAK,KAAK,qBAAuB,EAC/B,KAAK,SAEL,MAAK,qBACL,KAAK,SAAW,EAChB,KAAK,SAAW,GAIb,QAAe,CACpB,KAAK,mBAAqB,KAAK,gBAC/B,GAAM,GAAM,KAAK,UACd,MAAO,EAAG,KAAK,IAAK,KAAK,QAAS,KAAK,WACvC,OAAQ,CAAE,EAAK,IAAO,EAAM,EAAG,GAClC,KAAK,QAAU,IC5DZ,YAAkC,CAMhC,YAAa,EAAiB,CAL7B,eAAsB,GACtB,cAAqB,GACrB,aAAU,EAIhB,KAAK,SAAW,KAGP,SAAiB,CAC1B,MAAO,MAAK,WAAY,IAGnB,WAAY,EAA6B,CAC9C,MAAK,MAAK,UAAU,SAAW,EAAa,EACrC,KAAK,SAAU,KAAK,MAAO,EAAa,IAAS,MAAK,UAAU,OAAS,KAG3E,OAAc,CACnB,KAAK,QAAU,EACf,KAAK,UAAY,GACjB,KAAK,SAAW,GAGX,KAAM,EAAsB,CACjC,GAAM,GAAO,KAAK,UAAW,KAAK,SAKlC,GAJA,KAAK,UAAW,KAAK,SAAY,EACjC,KAAK,QAAY,MAAK,QAAU,GAAM,KAAK,SAGtC,KAAK,SAAS,SAAW,KAAK,SAAW,CAC5C,GAAM,GAAY,GAAc,KAAK,SAAU,GAC/C,KAAK,SAAS,OAAQ,EAAW,GAGnC,GAAM,GAAQ,GAAc,KAAK,SAAU,GAC3C,KAAK,SAAS,OAAQ,EAAO,EAAG,KCtC7B,oBAAsC,GAA4B,CAChE,YAAa,EAAiB,CACnC,MAAO,GACP,QAAQ,KAAM,kFCRX,YAAqB,CAGnB,aAAc,CACnB,KAAK,IAAM,GAAI,KAGV,IAAK,EAAiB,CAP/B,MAQI,MAAO,QAAK,IAAI,IAAK,KAAd,OAAuB,GAAI,KAG7B,IAAK,EAAQ,EAAiB,CACnC,GAAI,GAAM,KAAK,IAAI,IAAK,GACxB,AAAK,GAAO,MACV,GAAM,GAAI,KACV,KAAK,IAAI,IAAK,EAAK,IAErB,EAAI,IAAK,KCdN,YAAqC,EAAY,CACtD,MAAO,GAAI,IAAK,AAAE,GAAO,KAAK,IAAK,ICD9B,cAAwC,EAAe,CAC5D,GAAK,EAAK,OAAS,EACjB,MAAO,GAAM,GAGf,GAAM,GAAI,EAAK,QACT,EAAI,EAAQ,GAAG,GAErB,MAAO,GAAE,IAAK,CAAE,EAAG,IAAO,EAAI,EAAG,ICR5B,YAAwC,EAAS,EAAa,CACnE,MAAO,GAAK,IAAK,CAAE,EAAG,IAAO,EAAI,EAAM,ICDlC,WAAwC,EAAiB,CAC9D,MAAO,MAAK,KAAM,EAAI,OAAQ,CAAE,EAAK,IAAO,EAAM,EAAI,EAAG,ICDpD,WAA0C,EAAiB,CAChE,MAAO,GAAI,OAAQ,CAAE,EAAK,IAAO,EAAM,EAAI,EAAG,GCDzC,YAAiD,EAAiB,CACvE,MAAO,GAAI,OAAQ,CAAE,EAAK,IAAO,EAAM,KAAK,IAAK,GAAK,GCDjD,eAA6C,EAAe,CACjE,GAAK,EAAK,OAAS,EACjB,MAAO,GAAM,GAGf,GAAM,GAAI,EAAK,QACT,EAAI,GAAa,GAAG,GAE1B,MAAO,GAAE,IAAK,CAAE,EAAG,IAAO,EAAI,EAAG,ICR5B,WAAqC,EAAY,CACtD,MAAO,GAAI,IAAK,AAAE,GAAO,CAAC,GCDrB,WAAuC,EAAQ,EAAoB,CACxE,MAAO,GAAI,IAAK,AAAE,GAAO,EAAI,GCGxB,WAA2C,EAAY,CAC5D,GAAM,GAAM,EAAW,GACjB,EAAS,IAAQ,EAAM,EAAM,EAAM,EACzC,MAAO,GAAU,EAAK,GCPjB,WAAqC,EAAS,EAAa,CAChE,MAAO,GAAK,IAAK,CAAE,EAAG,IAAO,EAAI,EAAM,ICYlC,YAA2C,IAOrC,SAAiB,CAC1B,MAAO,GAAW,KAAK,aAMd,WAAmB,CAC5B,MAAO,GAAa,KAAK,aAMhB,kBAA0B,CACnC,MAAO,IAAoB,KAAK,aAMvB,aAAgB,CACzB,MAAO,MAAK,MAAO,EAAc,KAAK,cAM7B,UAAa,CACtB,MAAO,MAAK,MAAO,EAAQ,KAAK,cAMvB,MAAS,CAClB,MAAO,MAAK,MAAO,GAAQ,KAAK,WAM3B,OAAW,CAChB,MAAO,MAAK,MAAO,KAAK,SAAS,UAO5B,OAAQ,EAAkB,CAC/B,MAAO,MAAK,MAAO,EAAQ,KAAK,SAAU,GAAG,EAAQ,IAAK,AAAE,GAAO,EAAE,YAOhE,IAAK,EAAe,CACzB,MAAO,MAAK,MAAO,EAAQ,KAAK,SAAU,EAAO,WAO5C,YAAa,EAAkB,CACpC,MAAO,MAAK,MAAO,GAAa,KAAK,SAAU,GAAG,EAAQ,IAAK,AAAE,GAAO,EAAE,YAOrE,OAAQ,EAAe,CAC5B,MAAO,MAAK,MAAO,GAAW,KAAK,SAAU,EAAO,WAQ/C,MAAO,EAAoB,CAChC,MAAO,MAAK,MAAO,EAAU,KAAK,SAAU,IAOvC,IAAK,EAAoB,CAC9B,MAAO,GAAQ,KAAK,SAAU,EAAO,YC7GlC,YAA2B,EAAe,EAA4B,CAC3E,MAAO,CACL,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,IAAO,EAAG,GACnE,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,IAAO,EAAG,GACnE,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,IAAO,EAAG,GAAM,EAAG,IAAO,EAAG,GACpE,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,IAAO,EAAG,GAAM,EAAG,IAAO,EAAG,ICHjE,WAA2B,EAAe,EAA4B,CAC3E,GAAM,GAAO,GAAkB,CAAE,GAAG,EAAG,GAAK,GACtC,EAAkB,CAAE,EAAM,GAAK,EAAM,GAAK,EAAM,IAChD,EAAI,EAAM,GAChB,MAAO,GAAU,EAAK,EAAM,GCPvB,YAAsB,EAAqC,CAChE,MAAO,CAAE,CAAC,EAAM,GAAK,CAAC,EAAM,GAAK,CAAC,EAAM,GAAK,EAAM,ICD9C,eAA0B,EAAwC,CACvE,GAAK,EAAM,OAAS,EAClB,MAAO,GAAO,GAGhB,GAAM,GAAI,EAAM,QACV,EAAI,GAAc,GAAG,GAE3B,MAAO,CACL,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAClE,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAClE,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAClE,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,ICT/D,YAA8B,EAAiB,EAAkC,CACtF,GAAM,GAAmB,CAAE,GAAG,EAAK,GAC7B,EAAI,GAAa,GACjB,EAAM,GAAc,EAAM,EAAG,GACnC,SAAI,MACG,ECRF,WAAoB,EAAkB,EAA+B,CAC1E,MAAO,CACL,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,ICGvC,YACL,EACA,EAAsB,CAAE,EAAK,EAAK,GAClC,EAKE,CACF,GAAM,GAAI,EAAc,GACpB,EAAI,EAAc,GAElB,EAAQ,EAAQ,EAAG,GAEvB,AAAK,IAAU,GACb,CAAK,KAAK,IAAK,EAAG,IAAQ,KAAK,IAAK,EAAG,IACrC,EAAI,CAAE,EAAK,EAAK,GAEhB,EAAI,CAAE,EAAK,EAAK,GAElB,EAAQ,EAAQ,EAAG,IAGrB,EAAI,EAAc,EAAQ,EAAG,EAAU,EAAG,KAE1C,GAAI,GAAI,EAAW,EAAG,GACtB,MAAK,IAAY,EAAQ,EAAG,GAAa,GACvC,GAAI,EAAQ,IAGP,CACL,OAAQ,EACR,QAAS,EACT,SAAU,GCjCP,mBAAsB,GAAgB,CAGpC,YAAa,EAAgB,CAAE,EAAK,EAAK,GAAQ,CACtD,QACA,KAAK,SAAW,KAMP,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,KAMZ,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,KAMZ,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,EAGhB,UAAmB,CACxB,MAAO,YAAa,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAOnF,MAAO,EAA2B,CACvC,MAAO,IAAI,GAAS,EAAW,KAAK,SAAU,EAAO,WAOhD,gBAAiB,EAAkC,CACxD,MAAO,IAAI,GAAS,GAAqB,KAAK,SAAU,EAAW,WAM9D,aAAc,EAA2B,CAC9C,MAAO,IAAI,GAAS,EAAkB,KAAK,SAAU,EAAO,WAGpD,MAAO,EAAyB,CACxC,MAAO,IAAI,GAAS,aAMJ,OAAgB,CAChC,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,cAMhB,KAAc,CAC9B,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,cAMhB,KAAc,CAC9B,MAAO,IAAI,GAAS,CAAE,GAAM,EAAK,cAMjB,KAAc,CAC9B,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,cAMhB,KAAc,CAC9B,MAAO,IAAI,GAAS,CAAE,EAAK,GAAM,cAMjB,KAAc,CAC9B,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,cAMhB,KAAc,CAC9B,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,eAMhB,MAAe,CAC/B,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,UAOpB,gBAAgB,EAAiB,EAAkB,EAI/D,CACA,GAAM,GAAS,GAAoB,EAAO,SAAU,EAAQ,SAAU,EAAS,UAC/E,MAAO,CACL,OAAQ,GAAI,GAAS,EAAO,QAC5B,QAAS,GAAI,GAAS,EAAO,SAC7B,SAAU,GAAI,GAAS,EAAO,aCjJ7B,YAA4B,EAAc,EAA6B,CAC5E,MACE,GAAK,GAAK,IAAO,EAAO,IACxB,EAAK,GAAK,IAAO,EAAO,IACxB,EAAK,GAAK,IAAO,EAAO,IACxB,EAAK,GAAK,IAAO,EAAO,IACxB,EAAK,GAAK,IAAO,EAAO,IACxB,EAAK,GAAK,IAAO,EAAO,GCRrB,YAAW,CAIT,YAAa,EAAe,EAAQ,KAAM,EAAe,EAAQ,KAAO,CAC7E,KAAK,IAAM,EACX,KAAK,IAAM,KAMF,MAAe,CACxB,MAAO,CAAE,KAAK,IAAI,SAAU,KAAK,IAAI,UAQhC,cAAe,EAA0B,CAC9C,MAAO,IAAmB,KAAK,IAAK,EAAM,gBAO9B,SAAS,EAAqB,CAC1C,MAAO,IAAI,IAAM,GAAI,GAAS,EAAK,IAAO,GAAI,GAAS,EAAK,OC7BzD,YACL,EACY,CACZ,MAAO,CACL,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAClC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAClC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,KCN/B,YAAsB,EAA4B,CACvD,GACE,GAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAM,EAAM,EAAM,EACxB,EAAM,EAAM,EAAM,EAAM,EACxB,EAAM,EAAM,EAAM,EAAM,EACxB,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAEtC,MAAK,KAAQ,EAAe,EAAU,EAAG,GAElC,EAAU,CACf,EACA,EAAM,EAAM,EAAM,EAClB,EAAM,EAAM,EAAM,EAClB,EACA,EAAM,EAAM,EAAM,EAClB,EAAM,EAAM,EAAM,EAClB,EACA,EAAM,EAAM,EAAM,EAClB,EAAM,EAAM,EAAM,GACjB,EAAM,GCpBJ,YAAiC,EAA4B,CAClE,MAAO,IAAa,GAAuB,ICTtC,YAA0B,EAAwB,CACvD,GACE,GAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAM,EAAM,EAAM,EACxB,EAAM,EAAM,EAAM,EAAM,EACxB,EAAM,EAAM,EAAM,EAAM,EAE1B,MAAO,GAAM,EAAM,EAAM,EAAM,EAAM,ECLhC,WACL,EACY,CACZ,MAAO,CACL,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAClC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAClC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,KCF/B,YAA6B,EAAkC,CACpE,GAAM,GAAI,EAAM,GACV,EAAI,EAAM,GACV,EAAI,EAAM,GACV,EAAI,EAAM,GAEhB,MAAO,CACL,EAAM,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EACpF,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EACpF,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAM,EAAI,EAAI,EAAM,EAAI,GCdjF,eAA0B,EAAiC,CAChE,GAAK,EAAK,OAAS,EACjB,MAAO,GAAM,GAGf,GAAM,GAAI,EAAK,QACT,EAAI,GAAc,GAAG,GAEzB,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GAEvC,MAAO,CACL,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAE9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAE9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,GC1B3B,YACL,EACY,CACZ,MAAO,CACL,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAClC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAClC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,ICCtC,GAAM,IAAiC,CACrC,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAK,EAAK,GAML,OAAc,CAGZ,YAAa,EAAgB,GAAqB,CACvD,KAAK,SAAW,KAMP,YAAqB,CAC9B,MAAO,IAAI,GAAS,GAAe,KAAK,cAM/B,cAAsB,CAC/B,MAAO,IAAiB,KAAK,aAMpB,UAAmB,CAC5B,MAAO,IAAI,GAAS,GAAa,KAAK,cAM7B,UAAmB,CAC5B,MAAO,GAAQ,YAAa,MAGvB,UAAmB,CACxB,GAAM,GAAI,KAAK,SAAS,IAAK,AAAE,GAAO,EAAE,QAAS,IACjD,MAAO,YAAa,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAM1H,OAAiB,CACtB,MAAO,IAAI,GAAS,KAAK,SAAS,UAM7B,YAAa,EAA+B,CACjD,MAAO,GAAQ,SAAU,KAAM,GAAG,GAM7B,YAAa,EAA0B,CAC5C,MAAO,IAAI,GAAS,EAAU,KAAK,SAAU,cAM7B,WAAoB,CACpC,MAAO,IAAI,GAAS,UAOR,aAAa,EAA+B,CACxD,MAAK,GAAS,SAAW,EAChB,EAAQ,SAER,GAAI,GAAS,GAAc,GAAG,EAAS,IAAK,AAAE,GAAO,EAAE,kBAQpD,oBAAoB,EAA4B,CAC5D,MAAO,IAAI,GAAS,GAAwB,EAAQ,iBAOxC,aAAa,EAA4B,CACrD,MAAO,IAAI,GAAS,EAAc,EAAQ,iBAO9B,gBAAgB,EAAkC,CAC9D,MAAO,IAAI,GAAS,GAAoB,EAAW,aChHhD,WAA6B,EAAkC,CACpE,GAAM,GAAI,EAAM,GACV,EAAI,EAAM,GACV,EAAI,EAAM,GACV,EAAI,EAAM,GAEhB,MAAO,CACL,EAAM,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EACvF,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EACvF,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EAAM,EAAM,EAAI,EAAI,EAAM,EAAI,EAAG,EACvF,EAAK,EAAK,EAAK,GCXZ,YACL,EACA,EACA,EACY,CACZ,GAAM,GAAS,EAAoB,GAE7B,EAAK,EAAO,GAAK,EAAK,EAAO,GAAK,EAAK,EAAO,GAEpD,MAAO,CACL,EAAQ,GAAM,EACd,EAAQ,GAAM,EACd,EAAQ,GAAM,EACd,EAEA,EAAQ,GAAM,EACd,EAAQ,GAAM,EACd,EAAQ,GAAM,EACd,EAEA,EAAQ,GAAM,EACd,EAAQ,GAAM,EACd,EAAQ,IAAO,EACf,EAEA,EAAU,GACV,EAAU,GACV,EAAU,GACV,GChCG,YAA0B,EAAwB,CACvD,GACE,GAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAG,IAAM,EAAM,EAAG,IACtD,EAAM,EAAG,IAAM,EAAM,EAAG,IAAM,EAAM,EAAG,IAAM,EAAM,EAAG,IACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAExD,MAAO,GAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,ECXpE,YAA0B,EAA+B,CAC9D,GAAM,GAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACzC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GACrC,EAAQ,EAAM,EAAM,EAEtB,GAAK,EAAQ,EAAI,CACf,GAAM,GAAI,GAAM,KAAK,KAAM,EAAQ,GACnC,MAAO,CACH,GAAM,GAAQ,EACd,GAAM,GAAQ,EACd,GAAM,GAAQ,EAChB,IAAO,WAEC,EAAM,GAAO,EAAM,EAAM,CACnC,GAAM,GAAI,EAAM,KAAK,KAAM,EAAM,EAAM,EAAM,GAC7C,MAAO,CACL,IAAO,EACL,GAAM,GAAQ,EACd,GAAM,GAAQ,EACd,GAAM,GAAQ,WAER,EAAM,EAAM,CACtB,GAAM,GAAI,EAAM,KAAK,KAAM,EAAM,EAAM,EAAM,GAC7C,MAAO,CACH,GAAM,GAAQ,EAChB,IAAO,EACL,GAAM,GAAQ,EACd,GAAM,GAAQ,OAEb,CACL,GAAM,GAAI,EAAM,KAAK,KAAM,EAAM,EAAM,EAAM,GAC7C,MAAO,CACH,GAAM,GAAQ,EACd,GAAM,GAAQ,EAChB,IAAO,EACL,GAAM,GAAQ,ICnCf,YAA0B,EAA+B,CAC9D,MAAO,IAAiB,EAAc,ICEjC,YAAwB,EAI7B,CACA,GAAI,GAAK,EAAW,CAAE,EAAG,GAAK,EAAG,GAAK,EAAG,KACnC,EAAK,EAAW,CAAE,EAAG,GAAK,EAAG,GAAK,EAAG,KACrC,EAAK,EAAW,CAAE,EAAG,GAAK,EAAG,GAAK,EAAG,MAI3C,AAAK,AADO,GAAiB,GAClB,GAAM,GAAK,CAAC,GAEvB,GAAM,GAAQ,EAAM,EACd,EAAQ,EAAM,EACd,EAAQ,EAAM,EAEd,EAAiB,EAAE,SAEzB,SAAgB,IAAO,EACvB,EAAgB,IAAO,EACvB,EAAgB,IAAO,EAEvB,EAAgB,IAAO,EACvB,EAAgB,IAAO,EACvB,EAAgB,IAAO,EAEvB,EAAgB,IAAO,EACvB,EAAgB,IAAO,EACvB,EAAgB,KAAQ,EAEjB,CACL,SAAU,CAAE,EAAG,IAAM,EAAG,IAAM,EAAG,KACjC,MAAO,CAAE,EAAI,EAAI,GACjB,SAAU,GAAiB,ICvCxB,YACL,EACY,CACZ,MAAO,CACL,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAAK,EACvC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAAK,EACvC,EAAQ,GAAK,EAAQ,GAAK,EAAQ,GAAK,EACvC,EAAK,EAAK,EAAK,GCPZ,YAAsB,EAA4B,CACvD,GACE,GAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAG,IAAM,EAAM,EAAG,IACtD,EAAM,EAAG,IAAM,EAAM,EAAG,IAAM,EAAM,EAAG,IAAM,EAAM,EAAG,IACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EACtD,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAElD,GAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE9E,MAAK,MAAQ,EAAe,EAAU,EAAG,GAElC,EAAU,CACf,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,EAC9B,EAAM,EAAM,EAAM,EAAM,EAAM,GAC7B,EAAM,IC3BJ,YACL,EACA,EAAqB,CAAE,EAAK,EAAK,GACjC,EAAiB,CAAE,EAAK,EAAK,GAC7B,EAAO,EACK,CACZ,GAAM,GAAM,EAAc,EAAQ,EAAU,IAExC,EAAM,EAAc,EAAW,EAAI,IAEvC,AAAK,IAAS,GACZ,GAAM,EACJ,EAAU,EAAK,KAAK,IAAK,IACzB,EAAU,EAAW,EAAK,GAAO,KAAK,IAAK,MAI/C,GAAM,GAAM,EAAW,EAAK,GAE5B,MAAO,CACL,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAC9B,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAC9B,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAC9B,EAAU,GAAK,EAAU,GAAK,EAAU,GAAK,GCtB1C,YACL,EACA,EAAqB,CAAE,EAAK,EAAK,GACjC,EAAiB,CAAE,EAAK,EAAK,GAC7B,EAAO,EACK,CACZ,GAAM,GAAM,EAAc,EAAQ,EAAU,IAExC,EAAM,EAAc,EAAW,EAAI,IAEvC,AAAK,IAAS,GACZ,GAAM,EACJ,EAAU,EAAK,KAAK,IAAK,IACzB,EAAU,EAAW,EAAK,GAAO,KAAK,IAAK,MAI/C,GAAM,GAAM,EAAW,EAAK,GAE5B,MAAO,CACL,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAC9B,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAC9B,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAC9B,CAAC,EAAQ,EAAK,GACd,CAAC,EAAQ,EAAK,GACd,CAAC,EAAQ,EAAK,GACd,GCnCG,eAA0B,EAAiC,CAChE,GAAK,EAAK,OAAS,EACjB,MAAO,GAAM,GAGf,GAAM,GAAI,EAAK,QACT,EAAI,GAAc,GAAG,GAEzB,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAG,IAAM,EAAM,EAAG,IACtD,EAAM,EAAG,IAAM,EAAM,EAAG,IAAM,EAAM,EAAG,IAAM,EAAM,EAAG,IACtD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,EAAM,EAAI,GACvD,EAAM,EAAI,GAAK,EAAM,EAAI,GAAK,GAAM,EAAG,IAAM,GAAM,EAAG,IACtD,GAAM,EAAG,IAAM,GAAM,EAAG,IAAM,GAAM,EAAG,IAAM,GAAM,EAAG,IAExD,MAAO,CACL,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE1C,EAAM,EAAM,EAAM,EAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,GAAM,EAAM,GAE1C,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAC1C,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,IC/BvC,YACL,EAAM,GACN,EAAO,IACP,EAAM,IACN,EAAS,EACG,CACZ,GAAM,GAAI,EAAM,KAAK,IAAK,EAAM,KAAK,GAAK,KACpC,EAAM,EAAM,EAClB,MAAO,CACL,EAAI,EAAQ,EAAK,EAAK,EACtB,EAAK,EAAG,EAAK,EACb,EAAK,EAAK,CAAG,GAAM,GAAS,EAAG,GAC/B,EAAK,EAAK,GAAK,EAAM,EAAO,EAAG,GCjB5B,YAAwB,EAA4B,CACzD,GAAM,GAAI,KAAK,IAAK,GACd,EAAI,KAAK,IAAK,GAEpB,MAAO,CACL,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,CAAC,EAAG,EACV,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GCRN,YAAwB,EAA4B,CACzD,GAAM,GAAI,KAAK,IAAK,GACd,EAAI,KAAK,IAAK,GAEpB,MAAO,CACL,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,CAAC,EAAG,EAAG,EAAG,EACV,EAAG,EAAG,EAAG,GCRN,YAAwB,EAA4B,CACzD,GAAM,GAAI,KAAK,IAAK,GACd,EAAI,KAAK,IAAK,GAEpB,MAAO,CACL,EAAG,CAAC,EAAG,EAAG,EACV,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GCPN,YAAoB,EAA8B,CACvD,MAAO,CACL,EAAK,GAAK,EAAG,EAAG,EAChB,EAAG,EAAK,GAAK,EAAG,EAChB,EAAG,EAAG,EAAK,GAAK,EAChB,EAAG,EAAG,EAAG,GCNN,YAA0B,EAA6B,CAC5D,MAAO,CACL,EAAQ,EAAG,EAAG,EACd,EAAG,EAAQ,EAAG,EACd,EAAG,EAAG,EAAQ,EACd,EAAG,EAAG,EAAG,GCJN,YAAwB,EAA8B,CAC3D,MAAO,CACL,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,GCN3B,YAAwB,EAA4B,CACzD,MAAO,CACL,EAAG,GAAK,EAAG,GAAK,EAAG,GAAK,EAAG,IAC3B,EAAG,GAAK,EAAG,GAAK,EAAG,GAAK,EAAG,IAC3B,EAAG,GAAK,EAAG,GAAK,EAAG,IAAM,EAAG,IAC5B,EAAG,GAAK,EAAG,GAAK,EAAG,IAAM,EAAG,KCahC,GAAM,IAAiC,CACrC,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,GAMV,OAAc,CAGZ,YAAa,EAAgB,GAAqB,CACvD,KAAK,SAAW,KAMP,YAAqB,CAC9B,MAAO,IAAI,GAAS,GAAe,KAAK,cAM/B,cAAsB,CAC/B,MAAO,IAAiB,KAAK,aAMpB,UAAmB,CAC5B,MAAO,IAAI,GAAS,GAAa,KAAK,cAM7B,UAAmB,CAC5B,MAAO,GAAQ,YAAa,SAMnB,eAAwB,CACjC,MAAO,GAAQ,mBAAoB,MAG9B,UAAmB,CACxB,GAAM,GAAI,KAAK,SAAS,IAAK,AAAE,GAAO,EAAE,QAAS,IACjD,MAAO,YAAa,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,QAAW,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,QAAW,EAAG,OAAU,EAAG,OAAU,EAAG,QAAW,EAAG,QAAW,EAAG,OAAU,EAAG,OAAU,EAAG,QAAW,EAAG,QAM1N,OAAiB,CACtB,MAAO,IAAI,GAAS,KAAK,SAAS,UAM7B,YAAa,EAA+B,CACjD,MAAO,GAAQ,SAAU,KAAM,GAAG,GAM7B,YAAa,EAA0B,CAC5C,MAAO,IAAI,GAAS,EAAU,KAAK,SAAU,IAMxC,WAAyE,CAC9E,GAAM,CAAE,WAAU,QAAO,YAAa,GAAe,KAAK,UAE1D,MAAO,CACL,SAAU,GAAI,GAAS,GACvB,MAAO,GAAI,GAAS,GACpB,SAAU,GAAI,GAAY,cAOZ,WAAoB,CACpC,MAAO,IAAI,GAAS,UAOR,aAAa,EAA+B,CACxD,MAAK,GAAS,SAAW,EAChB,EAAQ,SAER,GAAI,GAAS,GAAc,GAAG,EAAS,IAAK,AAAE,GAAO,EAAE,kBAQpD,gBAAgB,EAAkC,CAC9D,MAAO,IAAI,GAAS,EAAoB,EAAW,iBAOvC,aAAa,EAA4B,CACrD,MAAO,IAAI,GAAS,GAAc,EAAQ,iBAO9B,WAAW,EAA2B,CAClD,MAAO,IAAI,GAAS,GAAe,EAAO,iBAO9B,OAAO,EAA2B,CAC9C,MAAO,IAAI,GAAS,GAAW,EAAO,iBAO1B,aAAa,EAA0B,CACnD,MAAO,IAAI,GAAS,GAAiB,UAOzB,WAAW,EAAyB,CAChD,MAAO,IAAI,GAAS,GAAe,UAOvB,WAAW,EAAyB,CAChD,MAAO,IAAI,GAAS,GAAe,UAOvB,WAAW,EAAyB,CAChD,MAAO,IAAI,GAAS,GAAe,UAQvB,QACZ,EACA,EAAS,GAAI,GAAS,CAAE,EAAK,EAAK,IAClC,EAAK,GAAI,GAAS,CAAE,EAAK,EAAK,IAC9B,EAAO,EACE,CACT,MAAO,IAAI,GAAS,GAClB,EAAS,SACT,EAAO,SACP,EAAG,SACH,UASU,eACZ,EACA,EAAS,GAAI,GAAS,CAAE,EAAK,EAAK,IAClC,EAAK,GAAI,GAAS,CAAE,EAAK,EAAK,IAC9B,EAAO,EACE,CACT,MAAO,IAAI,GAAS,GAClB,EAAS,SACT,EAAO,SACP,EAAG,SACH,UAQU,aAAa,EAAM,GAAM,EAAO,IAAM,EAAM,IAAiB,CACzE,MAAO,IAAI,GAAS,GAAiB,EAAK,EAAM,UAOpC,SAAS,EAAmB,EAAsB,EAA0B,CACxF,MAAO,IAAI,GAAS,GAAa,EAAS,SAAU,EAAS,SAAU,EAAM,aClP1E,YAA4B,EAAkB,EAA+B,CAClF,GAAM,GAAY,EAAQ,EACpB,EAAe,KAAK,IAAK,GAC/B,MAAO,CACL,EAAM,GAAM,EACZ,EAAM,GAAM,EACZ,EAAM,GAAM,EACZ,KAAK,IAAK,ICNP,YAA2B,EAAkB,EAAiC,CACnF,GAAM,CAAE,SAAQ,UAAS,YAAa,GAAoB,EAAM,UAAM,CAAE,EAAK,EAAK,IAE5E,EAAI,KAAK,KAAM,EAAM,EAAU,GAAM,EAAS,GAAM,EAAQ,IAAQ,GACpE,EAAQ,IAAO,EAErB,MAAO,CACH,GAAS,GAAM,EAAQ,IAAQ,EAC/B,GAAQ,GAAM,EAAU,IAAQ,EAChC,GAAU,GAAM,EAAS,IAAQ,EACnC,GCNG,YAAwB,EAAoC,CACjE,GAAM,GAAM,EAAW,GACvB,MAAK,KAAQ,EACJ,CAAE,EAAK,EAAK,EAAK,GAEnB,EAAU,EAAK,EAAM,GCVvB,YAAwB,EAA+B,CAC5D,MAAO,CAAE,KAAK,IAAK,EAAQ,GAAO,EAAK,EAAK,KAAK,IAAK,EAAQ,ICDzD,YAAwB,EAA+B,CAC5D,MAAO,CAAE,EAAK,KAAK,IAAK,EAAQ,GAAO,EAAK,KAAK,IAAK,EAAQ,ICDzD,YAAwB,EAA+B,CAC5D,MAAO,CAAE,EAAK,EAAK,KAAK,IAAK,EAAQ,GAAO,KAAK,IAAK,EAAQ,ICEzD,YAAoB,EAAkB,EAAkB,EAA2B,CACxF,GAAK,IAAM,EAAQ,MAAO,GAAE,SAC5B,GAAK,IAAM,EAAQ,MAAO,GAAE,SAK5B,GAAI,GAAe,EAAQ,EAAG,GAQ9B,GANK,EAAe,GAClB,GAAI,EAAQ,GACZ,EAAe,CAAC,GAIb,GAAgB,EACnB,MAAO,GAAE,SAGX,GAAM,GAAkB,EAAM,EAAe,EAG7C,GAAK,GAAmB,OAAO,QAAU,CACvC,GAAM,GAAI,EAAM,EAEhB,MAAO,GAAc,CACnB,EAAI,EAAG,GAAM,EAAI,EAAG,GACpB,EAAI,EAAG,GAAM,EAAI,EAAG,GACpB,EAAI,EAAG,GAAM,EAAI,EAAG,GACpB,EAAI,EAAG,GAAM,EAAI,EAAG,KAKxB,GAAM,GAAe,KAAK,KAAM,GAC1B,EAAY,KAAK,MAAO,EAAc,GACtC,EAAS,KAAK,IAAO,GAAM,GAAM,GAAc,EAC/C,EAAS,KAAK,IAAK,EAAI,GAAc,EAE3C,MAAO,CACL,EAAG,GAAM,EAAS,EAAG,GAAM,EAC3B,EAAG,GAAM,EAAS,EAAG,GAAM,EAC3B,EAAG,GAAM,EAAS,EAAG,GAAM,EAC3B,EAAG,GAAM,EAAS,EAAG,GAAM,GCnC/B,GAAM,IAAuC,CAAE,EAAK,EAAK,EAAK,GAKvD,OAAiB,CAGf,YAAa,EAA0B,GAAwB,CACpE,KAAK,SAAW,KAMP,IAAY,CACrB,MAAO,MAAK,SAAU,MAMb,IAAY,CACrB,MAAO,MAAK,SAAU,MAMb,IAAY,CACrB,MAAO,MAAK,SAAU,MAMb,IAAY,CACrB,MAAO,MAAK,SAAU,GAGjB,UAAmB,CACxB,MAAO,eAAgB,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAMhH,OAAoB,CACzB,MAAO,IAAI,GAAY,KAAK,SAAS,aAM5B,UAAmB,CAC5B,MAAO,IAAI,GAAS,EAAoB,KAAK,cAMpC,WAAuB,CAChC,MAAO,IAAI,GAAY,GAAa,KAAK,cAMhC,SAAiB,CAC1B,MAAO,GAAW,KAAK,aAMd,WAAmB,CAC5B,MAAO,GAAa,KAAK,aAMhB,aAAyB,CAClC,MAAO,IAAI,GAAY,GAAe,KAAK,WAOtC,YAAa,EAAwC,CAC1D,MAAO,GAAW,SAAU,KAAM,GAAG,GAQhC,MAAO,EAAe,EAAwB,CACnD,MAAO,GAAW,MAAO,KAAM,EAAG,aAMlB,WAAuB,CACvC,MAAO,IAAI,GAAY,UAOX,aAAa,EAAwC,CACjE,MAAK,GAAY,SAAW,EACnB,EAAW,SAEX,GAAI,GAAY,GAAc,GAAG,EAAY,IAAK,AAAE,GAAO,EAAE,kBAU1D,OAAO,EAAe,EAAe,EAAwB,CACzE,MAAO,IAAI,GAAY,GAAW,EAAE,SAAU,EAAE,SAAU,UAO9C,WAAW,EAA4B,CACnD,MAAO,IAAI,GAAY,GAAe,UAO1B,WAAW,EAA4B,CACnD,MAAO,IAAI,GAAY,GAAe,UAO1B,WAAW,EAA4B,CACnD,MAAO,IAAI,GAAY,GAAe,UAQ1B,cAAc,EAAe,EAA0B,CACnE,MAAO,IAAI,GAAY,GAAkB,EAAK,SAAU,EAAG,iBAM/C,eAAe,EAAe,EAA4B,CACtE,MAAO,IAAI,GAAY,GAAmB,EAAK,SAAU,UAM7C,aAAa,EAA8B,CACvD,MAAO,IAAI,GAAY,GAAiB,EAAO,aC7L5C,YAAc,EAAe,EAA0B,CAC5D,MAAO,GAAQ,KAAK,MAAO,EAAQ,GAAY,ECA1C,YAAwB,EAAwB,CACrD,MAAO,IAAK,EAAQ,KAAK,GAAI,EAAM,KAAK,IAAO,KAAK,GCQ/C,YAAwB,EAAe,EAAiC,CAC7E,GAAM,CAAE,EAAG,EAAG,EAAG,GACf,CAAC,GAAS,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,GACvC,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,IAC7B,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,IAC7B,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,GAC7B,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,GAC7B,CAAE,EAAG,EAAG,EAAG,IAEP,EAAqB,CAAE,EAAK,EAAK,GAEjC,EAAI,EAAG,EAAI,EAAI,GACrB,SAAQ,GAAM,CAAC,EAAO,KAAK,KAAM,GAAO,EAAG,GAAM,IAEjD,AAAK,KAAK,IAAK,GAAM,QACnB,GAAQ,GAAM,EAAO,KAAK,MAAO,EAAG,EAAI,EAAI,GAAK,EAAG,EAAI,IACxD,EAAQ,GAAM,EAAO,KAAK,MAAO,EAAG,EAAI,EAAI,GAAK,EAAG,EAAI,KAGxD,EAAQ,GAAM,EAAO,KAAK,MAAO,CAAC,EAAG,EAAI,EAAI,GAAK,EAAG,EAAI,IAGtD,GAAoB,GAAW,IAAM,KAAK,IAE7C,GAAQ,GAAM,GAAe,EAAQ,GAAM,KAAK,IAChD,EAAQ,GAAM,GAAe,KAAK,GAAK,EAAQ,IAC/C,EAAQ,GAAM,GAAe,EAAQ,GAAM,KAAK,KAG3C,EC9BF,YAAwB,EAAe,EAAiC,CAC7E,MAAO,IAAe,EAAc,GAAK,GCFpC,YAA8B,EAAkB,EAAiC,CACtF,MAAO,IAAe,GAAoB,GAAK,GCN1C,YAAwB,EAAmB,EAAoC,CACpF,GAAM,CAAE,EAAG,EAAG,EAAG,GACf,CAAC,GAAS,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,GACvC,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,IAC7B,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,IAC7B,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,GAC7B,IAAU,MAAQ,CAAE,EAAG,EAAG,EAAG,GAC7B,CAAE,EAAG,EAAG,EAAG,IAEP,EAAK,GAAM,EAAO,GAClB,EAAK,GAAM,EAAO,EAAO,GACzB,EAAK,GAAM,EAAO,GAElB,EAAK,KAAK,IAAK,GACf,EAAK,KAAK,IAAK,GACf,EAAK,KAAK,IAAK,GACf,EAAK,KAAK,IAAK,GACf,EAAK,KAAK,IAAK,GACf,EAAK,KAAK,IAAK,GAEf,EAAwB,CAC5B,EACA,EACA,EACA,EAAK,EAAK,EAAK,EAAK,EAAK,GAE3B,SAAQ,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EACvC,EAAQ,GAAM,EAAS,GAAK,EAAK,EAAK,EAAK,EAAK,GAChD,EAAQ,GAAM,EAAK,EAAK,EAAK,EAAK,EAAK,EAEhC,ECxBF,YAAY,CAYV,YAAa,EAAuB,CAAE,EAAK,EAAK,GAAO,EAAoB,MAAQ,CACxF,KAAK,SAAW,EAChB,KAAK,MAAQ,KAMJ,IAAY,CACrB,MAAO,MAAK,SAAU,MAMb,IAAY,CACrB,MAAO,MAAK,SAAU,MAMb,IAAY,CACrB,MAAO,MAAK,SAAU,GAGjB,UAAmB,CACxB,MAAO,UAAW,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,WAMhG,OAAe,CACpB,MAAO,IAAI,IAAO,KAAK,SAAS,SAAwB,KAAK,UAMpD,aAAyB,CAClC,MAAO,IAAI,GAAY,GAAe,KAAK,SAAU,KAAK,WAMjD,UAAmB,CAC5B,MAAO,MAAK,WAAW,cAMX,aAAa,EAAiB,EAA2B,CACrE,MAAO,IAAI,IAAO,GAAe,EAAO,SAAU,GAAS,SAM/C,aAAa,EAAiB,EAA2B,CACrE,MAAO,IAAI,IAAO,GAAe,EAAO,SAAU,GAAS,SAM/C,gBAAgB,EAAwB,EAA2B,CAC/E,MAAO,IAAI,IAAO,GAAqB,EAAW,SAAU,GAAS,KC9ElE,YACL,CAAE,EAAI,GACN,EAC2B,CAC3B,GAAM,GAAI,EAAQ,EAAI,EAAQ,IACxB,EAAI,EAAQ,EAAG,GACf,EAAI,EAAQ,EAAG,GAAM,EAAQ,GAC7B,EAAI,EAAI,EAAI,EAElB,GAAK,EAAI,EAAQ,MAAO,MAExB,GAAM,GAAQ,KAAK,KAAM,GAEzB,MAAO,CAAE,CAAC,EAAI,EAAO,CAAC,EAAI,GCpBrB,YAAqB,EAA6B,CACvD,MAAO,GAAQ,EAAM,GAAK,EAAM,ICA3B,YAAwB,EAA0B,CACvD,MAAO,CACL,EAAM,GACN,EAAc,GAAY,KCHvB,YAAW,CAYT,YAAa,EAAiB,EAAQ,KAAM,EAAe,EAAQ,GAAK,CAC7E,KAAK,OAAS,EACd,KAAK,UAAY,KAMR,MAAe,CACxB,MAAO,CAAE,KAAK,OAAO,SAAU,KAAK,UAAU,UAazC,iBAAkB,EAA6C,CACpE,MAAO,IAAsB,KAAK,IAAK,EAAO,WAOlC,SAAS,EAAqB,CAC1C,MAAO,IAAI,IAAM,GAAI,GAAS,EAAK,IAAO,GAAI,GAAS,EAAK,WAQhD,WAAW,EAAoB,CAC3C,MAAO,IAAK,QAAS,GAAe,EAAK,QCpDtC,YACL,CAAE,EAAO,GACT,EACU,CACV,MAAO,CACL,EAAkB,EAAO,GACzB,EAAkB,EAAK,ICJpB,YAAkB,EAAgB,EAAwB,CAC/D,MAAO,GACL,EAAU,EAAM,GAAK,EAAM,GAC3B,EAAU,EAAM,GAAK,ICElB,YACL,EACA,EACA,EACY,CACZ,GAAM,GAAK,EAAQ,EAAO,EAAM,IAC1B,EAAK,EAAQ,EAAM,GAAK,EAAM,IAEhC,EAAI,EAAQ,EAAI,GAAO,EAAQ,EAAI,GACvC,UAAa,GAAI,EAAU,IAEpB,GAAS,EAAM,GCZjB,YACL,EACA,EACA,EACQ,CACR,MAAO,GAAW,EAChB,GAA0B,EAAM,EAAO,GACvC,ICVG,YAAY,CAIV,YAAa,EAAiB,EAAQ,KAAM,EAAe,EAAQ,KAAO,CAC/E,KAAK,MAAQ,EACb,KAAK,IAAM,KAMF,MAAgB,CACzB,MAAO,CAAE,KAAK,MAAM,SAAU,KAAK,IAAI,aAM9B,MAAY,CACrB,MAAO,IAAK,UAAW,MAMlB,OAAiB,CACtB,MAAO,IAAI,GAAS,GAAY,KAAK,MAMhC,QAAiB,CACtB,MAAO,MAAK,MAAM,OASb,GAAI,EAAqB,CAC9B,MAAO,IAAI,GAAS,GAAS,KAAK,IAAK,IAQlC,aAAc,EAAyB,CAC5C,MAAO,IAAM,QACX,GACE,KAAK,IACL,EAAO,WAcN,oBAAqB,EAAgB,EAA4B,CACtE,MAAO,IAAI,GAAS,GAA0B,KAAK,IAAK,EAAM,SAAU,IAYnE,gBAAiB,EAAgB,EAA2B,CACjE,MAAO,IAAsB,KAAK,IAAK,EAAM,SAAU,SAO3C,SAAS,EAAwB,CAC7C,MAAO,IAAI,IAAO,GAAI,GAAS,EAAM,IAAO,GAAI,GAAS,EAAM,OCvG5D,YAA0B,EAAwB,CACvD,MAAO,GAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GCGhC,YAAsB,EAA4B,CACvD,GACE,GAAM,EAAG,GAAK,EAAM,EAAG,GACvB,EAAM,EAAG,GAAK,EAAM,EAAG,GACvB,EAAM,EAAM,EAAM,EAAM,EAE1B,MAAK,KAAQ,EAAe,EAAU,EAAG,GAElC,EAAU,CACf,EAAK,CAAC,EACN,CAAC,EAAK,GACL,EAAM,GCZJ,eAA0B,EAAiC,CAChE,GAAK,EAAK,OAAS,EACjB,MAAO,GAAM,GAGf,GAAM,GAAI,EAAK,QACT,EAAI,GAAc,GAAG,GAEzB,EAAM,EAAG,GAAK,EAAM,EAAG,GACvB,EAAM,EAAG,GAAK,EAAM,EAAG,GACvB,EAAM,EAAG,GAAK,EAAM,EAAG,GACvB,EAAM,EAAG,GAAK,EAAM,EAAG,GAEzB,MAAO,CACL,EAAM,EAAM,EAAM,EAClB,EAAM,EAAM,EAAM,EAElB,EAAM,EAAM,EAAM,EAClB,EAAM,EAAM,EAAM,GClBf,YACL,EACY,CACZ,MAAO,CACL,EAAQ,GAAK,EAAQ,GACrB,EAAQ,GAAK,EAAQ,ICHzB,GAAM,IAAiC,CACrC,EAAK,EACL,EAAK,GAMA,OAAc,CAGZ,YAAa,EAAgB,GAAqB,CACvD,KAAK,SAAW,KAMP,YAAqB,CAC9B,MAAO,IAAI,GAAS,GAAe,KAAK,cAM/B,cAAsB,CAC/B,MAAO,IAAiB,KAAK,aAMpB,UAAmB,CAC5B,MAAO,IAAI,GAAS,GAAa,KAAK,WAGjC,UAAmB,CACxB,GAAM,GAAI,KAAK,SAAS,IAAK,AAAE,GAAO,EAAE,QAAS,IACjD,MAAO,YAAa,EAAG,OAAU,EAAG,OAAU,EAAG,OAAU,EAAG,OAMzD,OAAiB,CACtB,MAAO,IAAI,GAAS,KAAK,SAAS,UAM7B,YAAa,EAA+B,CACjD,MAAO,GAAQ,SAAU,KAAM,GAAG,GAM7B,YAAa,EAA0B,CAC5C,MAAO,IAAI,GAAS,EAAU,KAAK,SAAU,cAM7B,WAAoB,CACpC,MAAO,IAAI,GAAS,UAOR,aAAa,EAA+B,CACxD,MAAK,GAAS,SAAW,EAChB,EAAQ,SAER,GAAI,GAAS,GAAc,GAAG,EAAS,IAAK,AAAE,GAAO,EAAE,cC9E7D,YAA2B,EAAe,EAA4B,CAC3E,MAAO,CACL,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAChD,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAChD,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,ICM7C,YACL,CAAE,EAAQ,GACV,EACA,EACW,CAEX,GAAM,GAAY,EAAc,GAAkB,EAAQ,IAGpD,EAAW,EAAU,EAAQ,CAAC,GAC9B,EAAW,EAAkB,EAAU,GACvC,EAAc,CAAC,EAAQ,EAAU,GAEvC,MAAO,CAAE,EAAW,GCrBf,WACL,CAAE,EAAQ,GACV,EACQ,CACR,MAAO,GAAQ,EAAQ,GAAU,ECA5B,WAA0B,CAAE,EAAQ,GAAmC,CAC5E,GAAM,GAAO,EAAM,EAAW,GAC9B,MAAO,CAAE,EAAU,EAAQ,GAAQ,EAAW,GCHzC,YAAa,IAOP,MAAiB,CAC1B,MAAO,CAAE,KAAK,OAAO,SAAU,KAAK,aAO3B,aAAqB,CAC9B,MAAO,IAAO,QAAS,EAAiB,KAAK,MAGxC,YAAa,EAAkB,EAAQ,GAAI,EAAW,EAAM,CACjE,KAAK,OAAS,EACd,KAAK,SAAW,EASX,aAAc,EAAiB,EAAiC,CAzCzE,MA0CI,MAAO,IAAO,QACZ,GACE,KAAK,IACL,EAAO,SACP,oBAAc,WAAd,OAA0B,EAAO,aAAa,WAU7C,gBAAiB,EAAyB,CAC/C,MAAO,GAAuB,KAAK,IAAK,EAAM,gBAOlC,SAAS,EAA2B,CAChD,MAAO,IAAI,IAAQ,GAAI,GAAS,EAAO,IAAO,EAAO,MCvDlD,YAA8B,EAAqB,EAA6B,CACrF,MAAO,GAAO,MAAO,AAAE,GAAW,EAAuB,EAAO,IAAW,GCHtE,YAA0B,EAA4B,CAC3D,MAAO,CACL,CAAE,CAAE,EAAK,EAAK,GAAO,CAAC,EAAK,GAAK,IAChC,CAAE,CAAE,GAAM,EAAK,GAAO,EAAK,GAAK,IAChC,CAAE,CAAE,EAAK,EAAK,GAAO,CAAC,EAAK,GAAK,IAChC,CAAE,CAAE,EAAK,GAAM,GAAO,EAAK,GAAK,IAChC,CAAE,CAAE,EAAK,EAAK,GAAO,CAAC,EAAK,GAAK,IAChC,CAAE,CAAE,EAAK,EAAK,IAAQ,EAAK,GAAK,KCN7B,YAAsC,EAA6B,CACxE,GACE,GAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,IACnD,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,IACnD,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,IAAM,EAAM,EAAG,IACpD,EAAM,EAAG,GAAK,EAAM,EAAG,GAAK,EAAM,EAAG,IAAM,EAAM,EAAG,IAEtD,MAAO,CACL,EAAiB,CAAE,CAAE,EAAM,EAAK,EAAM,EAAK,EAAM,GAAO,EAAM,IAC9D,EAAiB,CAAE,CAAE,EAAM,EAAK,EAAM,EAAK,EAAM,GAAO,EAAM,IAC9D,EAAiB,CAAE,CAAE,EAAM,EAAK,EAAM,EAAK,EAAM,GAAO,EAAM,IAC9D,EAAiB,CAAE,CAAE,EAAM,EAAK,EAAM,EAAK,EAAM,GAAO,EAAM,IAC9D,EAAiB,CAAE,CAAE,EAAM,EAAK,EAAM,EAAK,EAAM,GAAO,EAAM,IAC9D,EAAiB,CAAE,CAAE,EAAM,EAAK,EAAM,EAAK,EAAM,GAAO,EAAM,KCX3D,YAA+B,EAAqB,EAAwB,CACjF,MAAO,GAAO,MAAO,AAAE,GAAW,CAChC,GAAM,GAAI,EAAO,GAAI,IAAK,CAAE,EAAI,IAAO,EAAK,EAAK,EAAM,EAAI,GAAK,IAChE,MAAO,GAAuB,EAAO,IAAO,ICDzC,YAAkC,EAAqB,EAA8B,CAC1F,MAAO,GAAO,MAAO,AAAE,GACrB,EAAuB,EAAO,EAAQ,KAAS,CAAC,EAAQ,ICArD,YAAc,IAMR,MAAmB,CAC5B,MAAO,MAAK,OAAO,IAAK,AAAE,GAAW,EAAM,KAGtC,YAAa,EAAmB,CACrC,KAAK,OAAS,EAQT,aAAc,EAA0B,CAC7C,MAAO,IAAqB,KAAK,IAAK,EAAM,UAQvC,cAAe,EAAqB,CACzC,MAAO,IAAsB,KAAK,IAAK,EAAI,KAWtC,iBAAkB,EAA2B,CAClD,MAAO,IAAyB,KAAK,IAAK,EAAO,WAQrC,SAAS,EAA+B,CACpD,MAAO,IAAI,IAAS,EAAO,IAAK,AAAE,GAAW,GAAO,QAAS,WAQjD,UAAU,EAAqB,CAC3C,MAAO,IAAQ,QAAS,GAAiB,EAAI,YAQjC,sBAAsB,EAA2B,CAC7D,MAAO,IAAQ,QAAS,GAA6B,EAAO,aCzEzD,YAA+B,EAAoB,EAA6B,CACrF,MAAO,GAAa,EAAQ,EAAQ,GAAK,KAAa,EAAQ,GAAM,EAAQ,GCJvE,YAAc,CAIZ,YAAa,EAAkB,EAAQ,KAAM,EAAiB,EAAM,CACzE,KAAK,OAAS,EACd,KAAK,OAAS,KAML,MAAkB,CAC3B,MAAO,CAAE,KAAK,OAAO,SAAU,KAAK,QAQ/B,cAAe,EAA0B,CAC9C,MAAO,IAAsB,KAAK,IAAK,EAAM,gBAOjC,SAAS,EAA8B,CACnD,MAAO,IAAI,IAAS,GAAI,GAAS,EAAQ,IAAO,EAAQ,MC7BrD,YAA2B,EAAe,EAA4B,CAC3E,GAAM,GAAiB,CAAE,EAAG,GAAK,EAAG,GAAK,EAAG,IACtC,EAAM,GAAkB,EAAI,GAC5B,EAAI,EAAG,GACb,MAAO,CAAE,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,GCFlC,mBAAsB,GAAgB,CAGpC,YAAa,EAAgB,CAAE,EAAK,EAAK,EAAK,GAAQ,CAC3D,QACA,KAAK,SAAW,KAMP,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,KAMZ,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,KAMZ,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,KAMZ,IAAY,CACrB,MAAO,MAAK,SAAU,MAGb,GAAG,EAAY,CACxB,KAAK,SAAU,GAAM,EAGhB,UAAmB,CACxB,MAAO,YAAa,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAAU,KAAK,EAAE,QAAS,OAM7G,aAAc,EAA2B,CAC9C,MAAO,IAAI,GAAS,GAAkB,KAAK,SAAU,EAAO,WAMvD,aAAc,EAA2B,CAC9C,MAAO,IAAI,GAAS,GAAkB,KAAK,SAAU,EAAO,WAGpD,MAAO,EAAyB,CACxC,MAAO,IAAI,GAAS,aAMJ,OAAgB,CAChC,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,EAAK,cAMrB,MAAe,CAC/B,MAAO,IAAI,GAAS,CAAE,EAAK,EAAK,EAAK,MC5FzC,YAAiB,EAAmB,EAA8B,CAChE,MAAO,GAAO,EAAS,MAMzB,YAAkB,EAAmB,EAA8B,CACjE,MAAO,IAAQ,EAAO,GAAY,IAAM,GAAQ,EAAO,GAMzD,YAAkB,EAAmB,EAA8B,CACjE,MAAO,IAAS,EAAO,GAAY,MAAQ,GAAS,EAAO,GAG7D,YAAmB,EAAmB,EAA8B,CAClE,GAAI,GAAI,EACR,OAAW,CACT,GAAM,GAAK,GAAQ,EAAO,GAG1B,GAFA,EAAI,EAAI,IAAQ,GAAK,KAEhB,EAAK,IACR,MAAO,IAKb,YAAsB,EAAmB,EAA6C,CAGpF,SAAS,IAAO,EAET,CACL,GAAS,EAAO,GAChB,GAAS,EAAO,GAChB,GAAS,EAAO,IAIpB,YAAqB,EAAmB,EAA4C,CAElF,EAAS,IAAO,EAEhB,GAAM,GAAa,EAAS,GAAM,GAAS,EAAO,GAAY,EAExD,EAA8B,GAChC,EAAO,EAEX,KAAQ,EAAS,GAAM,GAAa,CAClC,GAAM,GAAQ,GAAU,EAAO,GACzB,EAAS,GAAQ,EAAO,GAC9B,EAAO,EAAS,IAAM,EAAO,EAC7B,GAAM,GAAQ,EAAS,IAAM,EAAS,GAAQ,EAAO,GAErD,GAAK,EAAO,IAGV,EAAM,KAAM,CACV,EACA,EACA,EACA,GAAQ,EAAO,aAEP,IAAS,IAAO,CAG1B,GAAM,GAAc,GAAQ,EAAO,GASnC,GAPA,EAAM,KAAM,CACV,EACA,EACA,EACA,EAAa,GAAc,IAAK,IAAM,GAAQ,EAAO,MAGlD,IAAU,GACb,UAGF,MAAM,IAAI,OAAO,GAAI,KAIzB,MAAO,GAGF,YAAoB,EAAuC,CAChE,GAAM,GAAQ,GAAI,YAAY,GACxB,EAAsB,CAAE,GAExB,EAAS,GAAa,EAAO,GAC7B,EAAiC,GAEvC,KAAQ,EAAS,GAAM,EAAM,QAC3B,EAAO,KAAM,GAAY,EAAO,IAGlC,MAAO,CAAE,EAAQ,GCrGZ,GAAM,IAAoC,CAC/C,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KCbK,GAAM,IAAiC,CAC5C,IACA,IACA,IACA,KCEK,aAAwC,CAC7C,GAAM,GAAqB,GAE3B,UAAkB,IAAK,AAAE,GACvB,GAAqB,IAAK,AAAE,GAC1B,EAAM,KAAM,EAAO,KAIhB,ECfF,GAAM,GAA0D,CACrE,SAAY,EACZ,QAAW,EACX,QAAW,EACX,aAAgB,EAChB,SAAY,EACZ,MAAS,EACT,UAAa,EACb,YAAe,EACf,cAAiB,GCTZ,GAAM,GAA0D,CACrE,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,GACL,EAAK,GACL,EAAK,ICbA,GAAM,IAAuD,CAClE,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,GCGA,WAA+B,EAAkC,CACtE,MAAO,GACJ,KAAM,CAAE,EAAG,IACV,GAAmB,EAAG,IAAqB,GAAmB,EAAG,KAElE,KAAM,CAAE,EAAG,IACV,EAAsB,EAAG,IAAqB,EAAsB,EAAG,KCCtE,YAA4B,EAA8C,CAE/E,GAAM,GAAS,EAAM,SAEf,EAAc,GAAI,IAClB,EAAc,GAAI,IAExB,EAAO,IAAK,AAAE,GAAU,CACtB,GAAM,GAAO,EAAM,GACb,EAAO,EAAM,GACnB,EAAY,IAAK,EAAM,GACvB,EAAY,IAAK,EAAM,KAIzB,GAAM,GAAqB,GACrB,EAAsB,GACtB,EAAoB,GAE1B,GAAqB,IAAK,AAAE,GAAU,CACpC,GAAM,GAAQ,EAAY,IAAK,GAC/B,AAAK,EAAM,KAAO,EAChB,EAAM,KAAM,GACP,AAAK,EAAM,KAAO,EACvB,EAAO,KAAM,GACH,EAAM,KAAO,GACvB,EAAK,KAAM,KAKf,GAAI,GACJ,CACE,GAAI,GAAuB,GAGrB,EAAI,MAAM,KAAM,EAAY,IAAK,MAAS,GAChD,AAAK,GACH,EAAQ,KAAM,GAGhB,GAAqB,IAAK,AAAE,GAAU,CACpC,GAAM,GAAO,MAAM,KAAM,EAAY,IAAK,IAAU,GACpD,AAAK,EACH,GAAQ,KAAM,GAET,EAAQ,OAAS,GACpB,GAAgB,IAGlB,EAAU,KAMhB,GAAK,GACH,OAAY,CAAE,EAAM,IAAc,GAAY,IAC5C,GAAK,EAAS,KAAO,EAAI,CACvB,GAAI,GACA,EAAuB,GAGrB,EAAS,IAAM,EAmBrB,GAjBK,AADK,EAAS,IAAK,IAEtB,EAAQ,KAAM,GAGhB,GAAqB,IAAK,AAAE,GAAU,CACpC,GAAM,GAAS,EAAO,EACtB,AAAK,EAAS,IAAK,GACjB,GAAQ,KAAM,GAET,EAAQ,OAAS,GACpB,GAAqB,IAGvB,EAAU,KAIT,EAAqB,CACxB,EAAmB,OAAQ,EAAG,EAAmB,OAAS,GAE1D,GAAM,GAAO,gBACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAoB,GAAK,KAGjD,MAAO,CACL,OACA,MAAO,EACP,cAQV,GAAK,EAAM,OAAS,EAAI,CACtB,EAAM,KAAM,CAAE,EAAG,IAAO,EAAsB,GAAM,EAAsB,IAC1E,EAAM,OAAQ,EAAG,EAAM,OAAS,GAIhC,GAAM,GAAY,MAAM,KAAM,EAAY,IAAK,EAAO,KACtD,EAAU,IAAK,AAAE,GACf,EAAO,OAAQ,EAAO,QAAS,GAAQ,IAIzC,EAAsB,GAAS,OAAQ,EAAG,EAAO,OAAS,GAG1D,GAAM,GAAO,cACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAO,IAC7B,EAAsB,EAAQ,GAAK,KAGrC,SAAO,KAAM,GAAG,GAChB,EAAsB,GAGf,CACL,OACA,MAAO,EACP,YAKJ,GAAK,EAAO,OAAS,GAAK,EAAO,OAAS,EAAK,OAAS,EAAI,CAC1D,EAAO,KAAM,CAAE,EAAG,IAAO,EAAsB,GAAM,EAAsB,IAK3E,EAAK,KAAM,GAAG,EAAO,OAAQ,EAAG,EAAO,OAAS,IAEhD,EAAK,KAAM,CAAE,EAAG,IAAO,EAAsB,GAAM,EAAsB,IACzE,EAAK,OAAQ,EAAG,EAAK,OAAS,GAI9B,GAAM,GAAY,MAAM,KAAM,EAAY,IAAK,EAAQ,KACvD,EAAU,KAAM,GAAG,MAAM,KAAM,EAAY,IAAK,EAAM,MAGtD,EAAsB,GAAY,OAAQ,EAAG,EAAU,OAAS,GAGhE,GAAM,GAAO,YACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAQ,IAC9B,EAAsB,EAAM,KAG9B,MAAO,CACL,OACA,MAAO,EACP,YAKJ,OAAY,CAAE,EAAO,IAAc,GAAY,IAC7C,GAAK,EAAS,KAAO,EAAI,CACvB,GAAM,GAAQ,EAAsB,MAAM,KAAM,IAChD,EAAM,OAAQ,EAAG,EAAM,OAAS,GAEhC,GAAM,GAAO,QACP,EAAW,CACf,EAAsB,GACtB,GAAG,EACA,SACA,UACA,IAAK,AAAE,GACN,EAAsB,EAAM,MAIlC,MAAO,CACL,OACA,MAAO,EACP,YAMN,GAAK,EAAgB,CACnB,EAAc,OAAQ,EAAG,EAAc,OAAS,GAEhD,GAAM,GAAO,WACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAe,GAAK,KAG5C,MAAO,CACL,OACA,MAAO,EACP,YAKJ,GAAK,EAAO,OAAS,EAAI,CACvB,EAAO,KAAM,CAAE,EAAG,IAAO,EAAsB,GAAM,EAAsB,IAC3E,EAAO,OAAQ,EAAG,EAAO,OAAS,GAIlC,GAAM,GAAY,MAAM,KAAM,EAAY,IAAK,EAAQ,KACvD,EAAU,IAAK,AAAE,GACf,EAAO,OAAQ,EAAO,QAAS,GAAQ,IAIzC,EAAsB,GAAS,OAAQ,EAAG,EAAO,OAAS,GAG1D,GAAM,GAAO,eACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAQ,IAC9B,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,KAGrC,SAAO,KAAM,GAAG,GAChB,EAAsB,GAGf,CACL,OACA,MAAO,EACP,YAKJ,GAAK,EAAK,OAAS,EAAI,CACrB,EAAK,KAAM,CAAE,EAAG,IAAO,EAAsB,GAAM,EAAsB,IACzE,EAAK,OAAQ,EAAG,EAAK,OAAS,GAI9B,GAAM,GAAQ,MAAM,KAAM,EAAY,IAAK,EAAM,KACjD,EAAM,KAAM,GAAG,MAAM,KAAM,EAAY,IAAK,EAAM,MAClD,EAAM,IAAK,AAAE,GACX,EAAO,OAAQ,EAAO,QAAS,GAAQ,IAIzC,EAAsB,GAAS,OAAQ,EAAG,EAAO,OAAS,GAG1D,GAAM,GAAO,UACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAM,IAC5B,EAAsB,EAAM,IAC5B,EAAsB,EAAQ,GAAK,KAGrC,SAAO,KAAM,GAAG,GAChB,EAAsB,GAGf,CACL,OACA,MAAO,EACP,YAKJ,GAAK,EAAK,OAAS,EAAI,CAGrB,GAAM,GAAO,MAAM,KAAM,EAAY,IAAK,EAAM,KAChD,EAAK,IAAK,AAAE,GACV,EAAO,OAAQ,EAAO,QAAS,GAAQ,IAIzC,EAAsB,GAAS,OAAQ,EAAG,EAAO,OAAS,GAG1D,GAAM,GAAO,UACP,EAAW,CACf,EAAsB,GACtB,EAAsB,EAAM,IAC5B,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,KAGrC,SAAO,KAAM,GAAG,GAChB,EAAsB,GAGf,CACL,OACA,MAAO,EACP,YAKJ,CACE,GAAM,GAAO,WAIb,EAAsB,GAGtB,EAAO,OAAQ,EAAG,EAAO,OAAS,GAGlC,GAAM,GAAW,CACf,EAAsB,GACtB,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,IACnC,EAAsB,EAAQ,GAAK,KAGrC,MAAO,CACL,OACA,MAAO,EACP,aClWC,GAAM,IAAoC,CAC/C,WACA,UACA,UACA,eACA,WACA,QACA,YACA,cACA,iBCNF,YAAqC,EAAwB,EAAwB,iCACnF,MAAO,MAAM,KAAO,MAAO,AAAE,GAAW,CACtC,GAAK,GAAK,EACR,KAAM,GAGR,MAAO,IAAY,EAAM,EAAI,OCN1B,YAAmB,EAAe,EAAe,CACtD,GAAI,CACF,MAAO,WACC,EAAR,CACA,GAAK,GAAK,EACR,KAAM,GAGR,MAAO,IAAO,EAAM,EAAI,ICNrB,YAAuB,EAAsC,CAClE,GAAM,GAAyB,GAEzB,EAAQ,GAAI,YAAY,GAExB,EAAU,GAAI,aAAa,IAE7B,EAAO,EAGP,EAAa,GAGb,EAAY,GAGhB,OAAW,CAIT,GAAM,GAAQ,EAAO,KACf,EAAe,GAAQ,KAAQ,EAC/B,EAAe,IAAS,EAAI,KAAQ,EACpC,EAAgB,IAAS,EAAI,KAAQ,EAG3C,GAAK,EAAa,CAEhB,GAAM,GAAU,EAAO,MAAa,EAAI,EAAO,KAG/C,OAAU,GAAI,EAAG,EAAI,GAAI,IACvB,AAAK,GAAa,GAAK,EAAM,GAO3B,GAAS,GAAM,EAAO,MAAa,EAAI,EAAO,MAMpD,GAAK,EAAc,CAEjB,GAAM,GAAY,EAAO,KAOnB,EAAW,EAAM,SAAU,EAAM,EAAO,EAAI,GAClD,GAAQ,EAAI,EAEZ,GAAM,GAAwD,GAG9D,OAAW,CAQT,GAAM,GAAa,EAAO,KAE1B,GAAK,IAAe,IAClB,MAEK,GAAK,IAAe,IAAO,CAChC,EAAa,GACb,cAEU,IAAe,IAAO,CAChC,EAAY,GACZ,MAIF,GAAM,GAAa,GAAc,EAAI,GAC/B,EAAW,EAAa,GAMxB,EAAU,EAAM,SAAU,EAAM,EAAO,GAC7C,GAAQ,EAER,EAAS,KAAM,CACb,aACA,QAAS,MAAM,KAAM,KAIzB,EAAO,KAAM,CACX,aACA,cACA,QAAS,MAAM,KAAM,GACrB,SAAU,MAAM,KAAM,GACtB,iBAIG,CACL,GAAM,GAAyD,GAG/D,OAAW,CAET,GAAM,GAAa,EAAO,KAE1B,GAAK,IAAe,IAClB,MAEK,GAAK,IAAe,IAAO,CAChC,EAAa,GACb,cAEU,IAAe,IAAO,CAChC,EAAY,GACZ,MAIF,GAAM,GAAa,GAAc,EAAI,GAC/B,EAAY,EAAa,GAMzB,EAAW,EAAM,SAAU,EAAM,EAAO,EAAI,GAClD,GAAQ,EAAI,EAEZ,EAAS,KAAM,CACb,aACA,SAAU,MAAM,KAAM,KAI1B,EAAO,KAAM,CACX,aACA,cACA,QAAS,MAAM,KAAM,GACrB,aASJ,GALK,GACH,GAAS,MAAK,MAAO,EAAO,OAAY,GAAM,MAC9C,EAAa,IAGV,EACH,MAIJ,MAAO,GCtKF,YAAuB,EAAwB,EAElD,GAAa,CANjB,MAOE,GAAM,GAAQ,EAAQ,qBAAS,MAAT,OAAgB,IAElC,EAAM,0FAEN,EAAQ,0CAA6C,GAAQ,EAAO,QAAS,QAAS,sGAAyG,IAAQ,EAAO,8BAElN,SAAO,IAAK,CAAE,EAAO,IAAY,CAC/B,GAAM,CAAE,cAAa,UAAS,YAAa,EAE3C,GAAS,KAAM,qBAA8B,GAAQ,GAAS,QAAS,OAEvE,GAAM,GAAe,EAAQ,IAAK,AAAE,GAAa,CAC/C,GAAM,GAAQ,GAAkB,GAChC,MAAO,IAAY,KAGjB,EAAc,gDAEd,EAAoB,GACpB,EAAI,GAER,GAAK,EAAc,CACjB,GAAM,CAAE,YAAa,EAErB,EAAS,IAAK,CAAE,CAAE,aAAY,aAAe,CAC3C,GAAK,IAAsB,EAAa,CACtC,GAAK,IAAsB,GAAK,CAC9B,GAAM,GAAW,EAAc,GAC/B,GAAe,YAAa,YAAc,QAG5C,EAAoB,EACpB,EAAI,GAGN,OAAU,GAAI,EAAG,EAAI,EAAQ,OAAQ,IAAO,CAC1C,GAAM,GAAQ,EAAS,GACjB,EAAI,EAAU,EAAI,GAClB,EAAI,EAAU,EAAI,EAAQ,GAEhC,GAAK,IAAM,EACP,IAAK,KAAO,IACZ,IAAK,KAAO,WAIpB,GAAS,IAAK,CAAE,CAAE,aAAY,cAAgB,CAC5C,GAAK,IAAsB,EAAa,CACtC,GAAK,IAAsB,GAAK,CAC9B,GAAM,GAAW,EAAc,GAC/B,GAAe,YAAa,YAAc,QAG5C,EAAoB,EACpB,EAAI,GAGN,OAAU,GAAI,EAAG,EAAI,EAAS,OAAQ,GAAK,EAAI,CAC7C,GAAM,GAAI,EAAU,GACd,EAAI,EAAU,EAAI,GAExB,GAAK,IAAM,EACP,IAAK,KAAO,IACZ,IAAK,KAAO,OAKtB,GAAM,GAAW,EAAc,GAC/B,GAAe,YAAa,YAAc,QAE1C,GAAO,WAAY,MAAa,UAGlC,GAAO,UAAU,kBAEV,EC3EF,YAAiB,CAAjB,aARP,CASS,gBAAa,EACb,cAAW,EACX,WAAQ,EACR,YAAS,EAET,OAAQ,EAA4B,CACzC,GAAM,GAAQ,EAAM,KAAK,WACnB,EAAI,EAAQ,EACZ,EAAM,EAAQ,GAAM,EAAI,IAAO,EAAI,EAAI,KAAQ,EAAI,EAAI,GACvD,EAAQ,KAAK,MAAQ,KAAK,OAC1B,EAAS,MAAK,SAAW,EAAQ,GAAU,EACjD,YAAK,SAAa,MAAK,SAAW,EAAQ,GAAS,EACnD,KAAK,MAAQ,KAAK,OAAW,GAAQ,GAAS,EACvC,KAAK,QCnBT,YAAc,CAIZ,YAAa,EAAM,EAAO,CAC/B,KAAK,EAAI,EACT,KAAK,EAAI,EAGJ,MAAa,CAClB,GAAM,GAAI,KAAK,EACf,KAAK,EAAI,KAAK,EACd,KAAK,EAAI,ICbN,YAAe,CAAf,aAFP,CAGU,WAAQ,EACR,eAAY,EACZ,gBAAa,EACb,gBAAa,EACb,YAAgC,GAAI,IAAuB,OAExD,eAAuB,CAChC,MAAO,IAAO,KAAK,SAGV,MAAc,CACvB,MAAO,MAAK,SAGH,KAAK,EAAc,CAC5B,KAAK,WAAa,KAAK,KACvB,KAAK,WAAa,YAAY,MAC9B,KAAK,MAAQ,KAGJ,OAAe,CACxB,MAAO,MAAK,WAAe,aAAY,MAAQ,KAAK,YAAe,KAAQ,KAAK,aAG3E,OAAc,CACnB,KAAK,OAAO,QAGP,MAAO,EAAuB,CACnC,KAAK,WAAa,KAAK,KAAO,EAC9B,KAAK,WAAa,YAAY,MAGzB,KAAY,CACjB,GAAM,GAAM,YAAY,MAClB,EAAU,GAAM,KAAK,WAAc,KAEzC,AAAK,EAAM,EACT,KAAK,QAEL,MAAK,OAAO,KAAM,GAClB,KAAK,MAAQ,GAAS,KAAK,OAAO,MAGpC,KAAK,UAAY,EACjB,KAAK,WAAa,EAClB,KAAK,WAAa,IC1Cf,YACL,EACA,EAKI,GACkB,CAfxB,YAgBE,GAAM,GAAO,KAAQ,OAAR,OAAgB,EACvB,EAAY,KAAQ,YAAR,OAAqB,IACjC,EAAa,KAAQ,aAAR,OAAsB,KACnC,EAAiB,KAAQ,iBAAR,OAA0B,EAE7C,EAAU,EACV,EAAM,EACN,EACE,EAAQ,EAAa,GAAO,KAAM,IAClC,EAAY,EAAa,GAAO,KAAM,MACtC,EAAe,EAAa,GAAO,KAAM,MAC3C,EAAW,EAEf,MAAO,IAAM,CACX,GAAM,GAAM,EAAa,GAAO,IAAK,IAAM,GAAI,cAAc,EAAI,IAEjE,SAAa,GAAY,IAAK,AAAE,GAAa,CAC3C,GAAM,GAAI,EAAU,EAGpB,GAAK,AAFK,EAAI,GAEJ,EAAW,CACnB,GAAM,GAAY,EAAQ,GACpB,EAAiB,EAAQ,EAAM,GAErC,EAAW,KAAQ,EAAI,GAAK,GAAS,EAAc,IAGnD,GAAI,GAAQ,EAAM,QAAS,GAGvB,EAAY,IAEhB,AAAK,IAAU,IACb,EAAU,IAAK,CAAE,EAAK,IAAW,CAC/B,GAAM,GAAO,EAAc,GAC3B,AAAK,GAAO,GACL,EAAO,GACV,GAAQ,EACR,EAAY,KAOf,IAAU,IACb,EAAU,IAAK,CAAE,EAAK,IAAW,CAC/B,AAAK,EAAM,GACT,GAAQ,EACR,EAAY,KAKlB,EAAO,GAAU,EAEjB,AAAK,EAAY,IACV,EAAc,GAAU,EAAW,IACtC,GAAc,GAAU,GAGrB,EAAc,IAAW,EAAW,IACvC,GAAW,GAAU,GAIzB,GAAY,EAEZ,EAAQ,GAAM,GAAM,EAAO,OAG7B,IAEA,EAAa,GAAO,IAAK,AAAE,GAAW,CACpC,GAAM,GAAW,EAAW,GACtB,EAAc,EAAc,GAElC,EAAK,GAAS,EAAI,EAAU,GAAM,EAAI,EACtC,EAAK,GAAS,EAAI,EAAU,GAAM,EAAc,EAAW,EAAM,EAAI,EACrE,EAAK,GAAS,EAAI,EAAU,GAAM,EAAO,GACzC,EAAK,GAAS,EAAI,EAAU,GAAM,MAI/B,GC7FJ,YACL,EACA,EAII,GACgB,CAdtB,UAeE,GAAM,GAAY,KAAQ,YAAR,OAAqB,IACjC,EAAa,KAAQ,aAAR,OAAsB,KACnC,EAAiB,KAAQ,iBAAR,OAA0B,IAE7C,EAAU,EACV,EAAM,EACN,EACA,EAAW,KACX,EAAc,KACd,EAAW,EAEf,MAAO,IACE,GAAI,cAAc,EAAa,GAAY,IAAK,IAAM,CAC3D,GAAM,GAAI,EAAU,EAGpB,GAAK,AAFK,EAAI,GAEJ,EAAW,CACnB,GAAM,GAAY,EAAQ,GACpB,EAAiB,EAAQ,EAAM,GAErC,EAAW,KAAQ,EAAI,GAAK,GAAS,EAAc,IACnD,AAAK,EAAY,IACV,EAAc,GACjB,GAAc,GAGX,GAAe,GAClB,GAAW,GAIf,GAAY,EAEZ,EAAQ,GAAM,GAAM,EAAO,OAG7B,WAEO,CACL,EAAI,EACJ,EAAc,EAAW,EAAM,EAAI,EACnC,EACA,KAEA,QC9CD,YACL,EACA,CAAE,QAAO,kBAGL,GACQ,CACZ,GAAM,GAAiB,GACnB,EAAW,GACX,EAAQ,EAEN,EAAc,EAAM,GAAK,UAAS,GAKxC,SAAa,EAAY,OAAS,GAAI,IAAK,AAAE,GAAO,CA7BtD,gBAgCI,GAFA,GAAW,SAAa,KAAb,cAAoB,KAApB,OAA2B,GAAQ,WAAkB,GAE3D,IAAU,GAAK,IAAM,EAAM,OAEhC,GAAM,GAAQ,QAAa,EAAI,KAAjB,cAAwB,KAAxB,OAA+B,IACvC,EAAS,QAAa,EAAI,KAAjB,cAAwB,KAAxB,OAA+B,GAE9C,GAAK,GAAS,IAAQ,OAEtB,GAAM,GAAc,EAAS,EAAW,IAAQ,IAChD,EAAW,EACX,GAAM,GAAQ,EAAQ,IAAM,IAAM,EAG9B,EAAe,KAAK,MAAO,KAAK,IAAK,EAAO,MAIhD,IAHA,EAAK,KAAM,EAAY,EAAO,GAC9B,GAAS,EAED,GAAS,GACf,EAAe,KAAK,MAAO,KAAK,IAAK,EAAO,MAC5C,EAAK,KAAM,EAAO,GAClB,GAAS,IAIN,GAAI,YAAY,GCvDlB,YAAe,CAGb,YAAa,EAAgB,CAClC,KAAK,KAAO,GAAQ,EAGf,IAAK,EAAwB,CAClC,MAAK,IACH,MAAK,KAAO,GAGd,KAAK,KAAO,KAAK,KAAS,KAAK,MAAQ,GACvC,KAAK,KAAO,KAAK,KAAS,KAAK,OAAS,GACxC,KAAK,KAAO,KAAK,KAAS,KAAK,MAAQ,EAChC,KAAK,KAAO,KAAK,IAAK,EAAG,IAAO,GAGlC,IAAK,EAAsB,CAChC,KAAK,KAAO,GAAQ,KAAK,MAAQ,ICV9B,YAAuB,EAAc,EAAe,EAAc,GAAc,CACrF,GAAK,GAAS,EAAQ,MAAO,GAC7B,GAAK,EAAQ,EAAQ,MAAO,GAe5B,GAAM,GAAe,GAAY,EAAK,EAAM,EAAa,GACnD,EAAW,GAAY,EAAa,EAAK,GAEzC,EAAgB,EAAM,KAAK,MAAO,EAAiB,GAAK,OAAS,IACjE,EAAY,EAAQ,EAAc,EAAI,EAAM,KAAK,MAAO,EAAa,GAAK,OAAS,IACnF,EAAe,EAAgB,EAE/B,EAAY,CAAE,GAAG,MAAO,IAC3B,IAAK,IAAM,OAAO,aAAc,GAAK,KAAK,MAAO,GAAK,KAAK,YAC3D,KAAM,IAET,MAAO,GAAK,UAAW,EAAG,GAAc",
  "names": []
}
